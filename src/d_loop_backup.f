      SUBROUTINE D_LOOP(VBAND5,NO_WRT,IBINPT,VCEN,NLOS,SUMMS,IPH,       &
     &  SUMSSS,LVBND5,THMCUM,S0,TSNOBS,TSNREF,FDNTRT,FDNRT,KNTRVL,      &
     &  GROUND,TRNLOS,BTERM,ADINTP,INTPVL)

!     LOOP LOOPS OVER DISORT MULTIPLE SCATTER PATH SEGMENTS AT EACH
!     SPECTRAL FREQUENCY.
      IMPLICIT NONE

!     PARAMETERS:
      INCLUDE 'PARAMS.h'

!     INPUT ARGUMENTS:
!       IBINPT   BIN NUMBER OF CURRENT SPECTRAL POINT.
!                (CENTER FREQUENCY = IBINPT * BNDWID + OSHIFT).
!       VBAND5   5 CM-1 RESOLUTION DATA SPECTRAL FREQUENCY [CM-1].
!       NO_WRT   OUTPUT FLAG FOR SPECTRAL DATA AT CURRENT FREQUENCY.
!       VCEN     SPECTRAL-BIN CENTRAL FREQUENCY [CM-1].
!       NLOS     NUMBER OF OBSERVER LINES-OF-SIGHT.
!       LVBND5   LOGICAL FLAG, TRUE WHEN 5 CM-1 DATA IS TO BE OBTAINED.
!       KNTRVL   NUMBER OF CORRELATED-K SUB-INTERVALS.
!       GROUND   LOGICAL FLAG, TRUE IF LINE OF SIGHT INTERSECTS GROUND.
      INTEGER IBINPT,NLOS,IPH,KNTRVL
      REAL VBAND5,VCEN,S0
      LOGICAL NO_WRT,LVBND5,GROUND(NLOS)

!     OUTPUT ARGUMENTS:
!       FDNTRT   GROUND REFLECTED DOWNWARD THERMAL
!                FLUX TRANSMITTED TO SENSOR [W CM-2 SR-1 / CM-1].
!       FDNRT    GROUND REFLECTED DOWNWARD THERMAL + DIFFUSE SOLAR
!                FLUX TRANSMITTED TO SENSOR [W CM-2 SR-1 / CM-1].
!       THMCUM   PATH EMIT & SCAT THERMAL RADIANCE [W CM-2 SR-1 / CM-1].
!       SUMMS    MULTIPLE SCATTER SOLAR RADIANCE [W SR-1 CM-2 / CM-1].
!       SUMSSS   SINGLE SCATTER SOLAR RADIANCE [W SR-1 CM-2 / CM-1].
!       TSNOBS   TRANSMITTED SOLAR IRRADIANCE AT SENSOR [W CM-2 / CM-1].
!       TSNREF   SENSOR-FINAL_ALTITUDE-SUN TRANSMITTANCE CONVOLVED WITH
!                THE TOP-OF-ATMOSPHERE SOLAR IRRADIANCE [W CM-2 / CM-1].
!       TRNLOS   LINE-OF-SIGHT COMBINED SPECIES TRANSMITTANCE [TX(9)].
!       BTERM    B TERM IN REMOTE SENSING EQUATION [W CM-2 SR-1 / CM-1].
      REAL FDNTRT(NLOS),FDNRT(NLOS),THMCUM(NLOS),SUMMS(NLOS),           &
     &  SUMSSS(NLOS),TSNOBS(NLOS),TSNREF(NLOS),TRNLOS(NLOS),BTERM

!     COMMONS:
      INCLUDE 'YPROP.h'
      INCLUDE 'BASE.h'
      INCLUDE 'SEGDAT.h'
      INCLUDE 'IFIL.h'
      INCLUDE 'WSOL.h'

! ADD COMMONS for PCRTM
      INCLUDE 'PC.h'

!     /RCNSTN/
!       PI       THE CONSTANT PI.
!       DEG      NUMBER OF DEGREES IN ONE RADIAN.
!       BIGNUM   MAXIMUM SINGLE PRECISION NUMBER.
!       BIGEXP   MAXIMUM EXPONENTIAL ARGUMENT WITHOUT OVERFLOW.
!       RRIGHT   SMALLEST SINGLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
      REAL PI,DEG,BIGNUM,BIGEXP,RRIGHT
      COMMON/RCNSTN/PI,DEG,BIGNUM,BIGEXP,RRIGHT

!     /CARD1/
!       MODEL    MODEL ATMOSPHERE INDEX.
!       ITYPE    SLANT PATH TYPE.
!       IEMSCT   RADIATIVE TRANSFER MODE.
!                  0 FOR TRANSMITTANCE
!                  1 FOR THERMAL EMISSION ONLY
!                  2 FOR THERMAL EMISSION PLUS SOLAR SCATTER
!                  3 FOR TRANSMITTED SOLAR IRRADIANCE
!                  4 FOR SOLAR SCATTER ONLY
!       M1       MODEL ATMOSPHERE FOR PRESSURE & TEMPERATURE PROFILES.
!       M2       MODEL ATMOSPHERE FOR H2O PROFILE.
!       M3       MODEL ATMOSPHERE FOR O3 PROFILE.
!       I_RD2C   READ CARD 2C, 2C1, ... IF EQUAL 1; SKIP IF EQUAL TO 0.
!       NOPRNT   PRINT FLAG.
!       MODTRN   MODTRAN BAND MODEL FLAG.
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT,MODTRN

!     /CNTRL/
!       NSEG     NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
!       THERML   FLAG TO CALCULATE THERMAL SCATTER.
      INTEGER NSEG,ML,MLFLX,IMULT
      LOGICAL THERML
      COMMON/CNTRL/NSEG(0:MLOSP1),ML,MLFLX,IMULT,THERML

!     /SPCCTL/
!       DODRGD   .TRUE. FOR NON-DEFAULT SPECTRAL ANALYSIS.
      LOGICAL DODGRD
      COMMON/SPCCTL/DODGRD

!     /SURFWV/
!       LAMBER  LOGICAL FLAG, .TRUE. FOR LAMBERTIAN SURFACE.
!       TPTEMP  TARGET-PIXEL SURFACE TEMPERATURES [K].
!       TPHDIR  TARGET-PIXEL HEMISPHERE DIRECTIONAL REFLECTANCE AT
!               VIEWING ANGLES.
!       TPBRDF  TARGET-PIXEL BIDIRECTIONAL REFLECTANCE DISTRIBUTION
!               FUNCTION AT VIEWING AND SUN ANGLES.
!       AATEMP  AREA-AVERAGED GROUND SURFACE TEMPERATURES [K].
!       AASALB  AREA-AVERAGED GROUND SURFACE ALBEDO.
!       AADREF  AREA-AVERAGED GROUND SURFACE DIRECTIONAL REFLECTIVITY
!               AT THE SOLAR ZENITH ANGLE.
!       EMU     GROUND DIRECTIONAL EMISSIVITY AT VIEWING ANGLES.
!       BEM     GROUND DIRECTIONAL EMISSIVITY AT QUADRATURE ANGLES.
!       RMU     GROUND BRDF AZIMUTH COMPONENTS AT VIEWING ANGLES
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
!       BDR     GROUND BRDF AZIMUTH COMPONENTS AT QUADRATURE ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
      LOGICAL LAMBER
      REAL TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,EMU,BEM,RMU,BDR
      COMMON/SURFWV/LAMBER,TPTEMP(MLOS),TPHDIR(MLOS),TPBRDF(MLOS),      &
     &  AATEMP,AASALB,AADREF,EMU(MXUMU),BEM(MI),                        &
     &  RMU(1:MXUMU,0:MI,0:MAZ),BDR(1:MI,0:MI,0:MAZ)                    &

!     /PATH/
!       PTHCOS   COSINE OF PATH ZENITH AT PATH BOUNDARIES.
!       PTHZEN   PATH ZENITH AT PATH BOUNDARIES [DEG].
!       PTHECA   SENSOR TO PATH EARTH CENTER ANGLE [DEG].
!       PTHALT   ALTITUDES AT PATH BOUNDARIES [KM].
!       PTH_MS   ALTITUDES AT PATH BOUNDARIES FOR THE MS PATH.
!       PTHSEG   PATH SEGMENT LENGTH [KM].
!       PTHRNG   SENSOR TO PATH BOUNDARY RANGE [KM].
!       JMAX     NUMBER OF DISTINCT LOS PATH SEGMENT ENDPOINT ALTITUDES.
!       IKHMIN   PATH BOUNDARY INDEX OF PATH MINIMUM ALTITUDE.
!       IKHMAX   PATH BOUNDARY INDEX OF PATH MAXIMUM ALTITUDE.
!       IKOUT    NUMBER OF PATH BOUNDARIES K DATA IS OUTPUT.
!       NTKDIS   RECORD NUMBER FOR K-DISTRIBUTION TRANSMITTANCE FILE.
!       NRKDIS   RECORD NUMBER FOR K-DISTRIBUTION RADIANCE FILE.
!       MAPPTH   MAPPING FROM PATH SEGMENT MIDPOINT TO VERTICAL LAYER.
!       IPTHHT   ALTITUDES (HEIGHTS) AT PATH BOUNDARIES [M].
!       LOWALT   VERTICAL LAYER BOUNDARY INDEX AT OR JUST BELOW PTHALT.
!       FACALT   ALTITUDE INTERPOLATION FRACTION FOR PTHALT
!       PATH_T   TEMPERATURE AT PATH BOUNDARIES [K].
!       PATH_P   PRESSURE AT PATH BOUNDARIES [ATM].
!       PTHRH    RELATIVE HUMIDITY AT PATH BOUNDARIES [K].
!       LSSGEO   LOGICAL FLAG, .TRUE. FOR SOLAR PATHS.
!       LTANMX   LOGICAL FLAG, .TRUE. IF PATH HAS A TANGENT MAXIMUM.
      DOUBLE PRECISION PTHCOS,PTHZEN,PTHECA,PTHALT,PTH_MS,PTHSEG,PTHRNG
      INTEGER JMAX,IKHMIN,IKHMAX,IKOUT,NTKDIS,NRKDIS,MAPPTH,            &
     &  IPTHHT,LOWALT
      REAL FACALT,PATH_T,PATH_P,PTHRH
      LOGICAL LSSGEO,LTANMX
      COMMON/PATH/PTHCOS(0:LAYTWO),PTHZEN(0:LAYTWO),PTHECA(0:LAYTWO),   &
     &  PTHALT(0:LAYTWO,1:MLOS),PTH_MS(0:LAYDIM),PTHSEG(LAYTWO),        &
     &  PTHRNG(0:LAYTWO,1:MLOS),JMAX,IKHMIN(MLOS),IKHMAX(MLOS),         &
     &  IKOUT(MLOS),MAPPTH(LAYTWO,1:MLOS),IPTHHT(0:LAYTWO),NTKDIS,      &
     &  NRKDIS,LOWALT(0:LAYTWO,1:MLOS),FACALT(0:LAYTWO,1:MLOS),         &
     &  PATH_T(0:LAYTWO,1:MLOS),PATH_P(0:LAYTWO,1:MLOS),                &
     &  PTHRH(0:LAYTWO,1:MLOS),LSSGEO,LTANMX

!     /MSRD/
!       CSSCAT   COSINE OF THE SCATTERING ANGLE.
!                (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       SLEGEN   Nth LEGENDRE POLYNOMIAL EVALUATED AT THE COSINE OF THE
!                SCATTERING ANGLE TIMES (2N+1)/4pi (N=0 TO NSTR-1).
!       CSZEN0   LAYER BOUNDARY COSINE OF SOLAR/LUNAR ZENITH.
!       CSZEN    LAYER AVERAGE COSINE OF SOLAR/LUNAR ZENITH.
!       CSZENX   AVERAGE SOLAR/LUNAR COSINE ZENITH EXITING
!                (AWAY FROM EARTH) THE CURRENT LAYER.
!       BBGRND   THERMAL EMISSION (FLUX) AT THE GROUND [W CM-2 / CM-1].
!       BBNDRY   LAYER BOUNDARY THERMAL EMISSION (FLUX) [W CM-2 / CM-1].
!       TCONT    LAYER CONTINUUM OPTICAL DEPTH.
!       TAUT     LAYER TOTAL VERTICAL EXTINCTION OPTICAL DEPTH.
!       GTSCAT   SUM OVER SCATTERING SOURCES OF SCATTERING OPTICAL DEPTH
!                AND PHASE FUNCTION LEGENDRE COEFFICIENT PRODUCTS.
!       COSBAR   LAYER EFFECTIVE SCATTERING ASYMMETRY FACTOR.
!       DEPRAT   FRACTIONAL DECREASE IN WEAK-LINE OPTICAL DEPTH TO SUN.
!       S0DEP    OPTICAL DEPTH FROM LAYER BOUNDARY TO SUN.
!       S0TRN    TRANSMITTED SOLAR IRRADIANCES [W CM-2 / CM-1]
!       UPF      LAYER BOUNDARY UPWARD THERMAL FLUX [W CM-2 / CM-1].
!       DNF      LAYER BOUNDARY DOWNWARD THERMAL FLUX [W CM-2 / CM-1].
!       UPFS     LAYER BOUNDARY UPWARD SOLAR FLUX [W CM-2 / CM-1].
!       DNFS     LAYER BOUNDARY DOWNWARD SOLAR FLUX [W CM-2 / CM-1].
!       CO_LIN   TRUE IF LOS AND SOLAR PATHS ARE NEARLY IDENTICAL.
      REAL CSSCAT,SLEGEN,CSZEN0,CSZEN,CSZENX,TCONT,TAUT,GTSCAT,COSBAR,  &
     &  BBGRND,BBNDRY,S0DEP,S0TRN,DEPRAT,UPF,DNF,UPFS,DNFS
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &  ,SURFT,SURFS
#endif
!************************** END VINCENT ROSS **************************
      LOGICAL CO_LIN
      COMMON/MSRD/CSSCAT(MLOS),SLEGEN(0:MAZ,MLOS),CSZEN0(LAYDIM),       &
     &  CSZEN(LAYDIM),CSZENX(LAYDIM),TCONT(LAYDIM),TAUT(MXKSUB,LAYDIM), &
     &  GTSCAT(0:MXCMU,1:LAYDIM),COSBAR(LAYDIM),BBGRND,BBNDRY(LAYDIM),  &
     &  S0DEP(MXKSUB,LAYTWO),S0TRN(MXKSUB,LAYTWO),DEPRAT(MXKSUB,LAYDIM),&
     &  UPF(MXKSUB,LAYDIM),DNF(MXKSUB,LAYDIM),UPFS(MXKSUB,LAYDIM),      &
     &  DNFS(MXKSUB,LAYDIM),CO_LIN(MLOS)
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &  ,SURFT(MXKSUB,MLOS),SURFS(MXKSUB,MLOS)
#endif
!************************** END VINCENT ROSS **************************

!     /SEG5DT/
!       SPCHI    LINE-OF-SIGHT SPECTRAL DATA @ HIGHER 5 CM-1 GRID POINT.
!       SPCMHI   VERTICAL PATH SPECTRAL DATA @ HIGHER 5 CM-1 GRID POINT.
!       SPCLO    LINE-OF-SIGHT SPECTRAL DATA @ LOWER 5 CM-1 GRID POINT.
!       SPCMLO   VERTICAL PATH SPECTRAL DATA @ LOWER 5 CM-1 GRID POINT.
!            1   SEGMENT SCATTERING OD WEIGHTED ASYMMETRY FACTOR
!            2   SEGMENT AEROSOL SCATTERING OPTICAL DEPTH
!            3   TOTAL O2 CONTINUUM TRANSMITTANCE.
!            4   N2 CONTINUUM TRANSMITTANCE.
!            5   TOTAL H2O CONTINUUM TRANSMITTANCE.
!            6   RAYLEIGH MOLECULAR SCATTERED TRANSMITTANCE.
!            7   TRANSMITTANCE FROM AEROSOL EXTINCTION.
!            8   TOTAL OZONE CONTINUUM TRANSMITTANCE.
!            9   ALL CONTINUUM TRANSMITTANCES EXCEPT O2 AND HNO3.
!           10   TRANSMITTANCE FROM AEROSOL ABSORPTION.
!           11   HNO3 TRANSMITTANCE.
!           12   MOLECULAR CONTINUUM OPTICAL DEPTH
!           13   SEGMENT AEROSOL EXTINCTION OPTICAL DEPTH
!           14   COMBINED SPECIES INCREMENTAL CONTINUUM OPTICAL DEPTH
!           15   RAYLEIGH MOLECULAR SCATTERING OPTICAL DEPTH
!           16   CIRRUS CLOUD TRANSMITTANCE (ICLD=20 ONLY)
!           17   UV/VIS NO2 TRANSMISSION
!           18   UV/VIS SO2 TRANSMISSION
!           19   SEGMENT WATER DROPLET SCATTERING OPTICAL DEPTH
!           20   SEGMENT ICE PARTICLE SCATTERING OPTICAL DEPTH
!           21   SEGMENT BOUNDARY LAYER AEROSOL SCATTERING OPTICAL DEPTH
!           22   SEGMENT TROPOSPHERIC AEROSOL SCATTERING OPTICAL DEPTH
!           23   SEGMENT STRATOSPHERIC AEROSOL SCATTERING OPTICAL DEPTH
!           24   SEGMENT MESOSPHERIC+ AEROSOL SCATTERING OPTICAL DEPTH
!           25   SEGMENT NOVAM AEROSOL SCATTERING OPTICAL DEPTH
!           26   SEGMENT NOVAM AEROSOL ASYMMETRY FACTOR
!           27   SEGMENT STD OR SUB-VIS CIRRUS SCATTERING OPTICAL DEPTH
!           28   SEGMENT CLOUD EXTINCTION OPTICAL DEPTH
!           29   SEGMENT CLOUD SCATTERING OD WEIGHTED ASYMMETRY FACTOR
!           30   SEGMENT RAIN EXTINCTION OPTICAL DEPTH
!           31   SEGMENT RAIN SCATTERING OPTICAL DEPTH
!           32   SEGMENT RAIN ASYMMETRY FACTOR
!           33   "14" WITHOUT RAIN, CLOUD AND AEROSOL.
!      NSEG5-2   VIS/NIR CH4 OPTICAL DEPTH
!      NSEG5-1   H2-H2 DIMER OPTICAL DEPTH
!        NSEG5   H2-HE DIMER OPTICAL DEPTH
!       SSAPH    LOS SAP SCATTERING OPTICAL DEPTH @ HIGHER 5 CM-1 POINT.
!       SSAPHM   MS SAP SCATTERING OPTICAL DEPTH @ HIGHER 5 CM-1 POINT.
!       SSAPL    LOS SAP SCATTERING OPTICAL DEPTH @ LOWER 5 CM-1 POINT.
!       SSAPLM   MS SAP SCATTERING OPTICAL DEPTH @ LOWER 5 CM-1 POINT.
!       TXLEG    SPECTRALLY INTERPOLATED LEGENDRE COEFFICIENTS FOR THE
!                SCATTERING PHASE FUNCTION (OPTICAL DEPTH WEIGHTED SUM).
      REAL SPCHI,SPCMHI,SPCLO,SPCMLO,SSAPH,SSAPHM,SSAPL,SSAPLM,TXLEG
      COMMON/SEG5DT/SPCHI(NSEG5,LAYTWO,MLOS,3),SPCMHI(NSEG5,LAYDIM,3),  &
     &  SPCLO(NSEG5,LAYTWO,MLOS,3),SPCMLO(NSEG5,LAYDIM,3),              &
     &  SSAPH(LAYTWO,MLOS,3),SSAPHM(LAYDIM,3),SSAPL(LAYTWO,MLOS,3),     &
     &  SSAPLM(LAYDIM,3),TXLEG(2:MXCMU,1:LAYDIM,0:1)
      SAVE/SEG5DT/

!     /MPROF/
!       ZM       PROFILE LEVEL ALTITUDES [KM].
!       PM       PROFILE LEVEL PRESSURES [MBAR].
!       TM       PROFILE LEVEL TEMPERATURES [K].
!       RFNDX    PROFILE LEVEL REFRACTIVITIES.
!       LRHSET   FLAG, .TRUE. IF RELATIVE HUMIDITY IS NOT TO BE SCALED.
      DOUBLE PRECISION ZM
      REAL PM,TM,RFNDX
      LOGICAL LRHSET
      COMMON/MPROF/ZM(LAYDIM),PM(LAYDIM),TM(LAYDIM),                    &
     &  RFNDX(LAYDIM),LRHSET(LAYDIM)

!     /CORKDT/
!       WTKSUB   SPECTRAL BIN SUB-INTERVAL FRACTIONAL WIDTHS.
!       WTKSAV   SAVED SPECTRAL BIN SUB-INTERVAL FRACTIONAL WIDTHS.
!       DEPLAY   INCREMENTAL OPTICAL DEPTHS.
!       TRNLAY   INCREMENTAL TRANSMITTANCES.
!       TRNCUM   CUMULATIVE TRANSMITTANCES.
!       K2TAIL   POINTER FROM K BIN TO LINE TAIL SUB-BIN
!                (=0 IF MULTIPLE LINE TAIL SUB-BINS CONTRIBUTE).
!       CONTWT   WEIGHTS FOR PARTITIONING LINE TAILS INTO K'S
!                (ONLY USED IF K2TAIL IS 0).
      REAL WTKSUB(MXKSUB),WTKSAV(NTLSUB),DEPLAY(MXKSUB),                &
     &  TRNLAY(MXKSUB),TRNCUM(MXKSUB),CONTWT(NTLSUB,MXKSUB)
      INTEGER K2TAIL(MXKSUB)
      COMMON/CORKDT/K2TAIL,WTKSUB,WTKSAV,DEPLAY,TRNLAY,TRNCUM,CONTWT
      SAVE /CORKDT/

!       SUBINT   SPECTRAL BIN "K" SUB-INTERVAL FRACTIONAL WIDTHS.
!       UPFLX    LAYER BOUNDARY UPWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       DNFLX    LAYER BOUNDARY DOWNWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       UPFLXS   LAYER BOUNDARY UPWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       DNFLXS   LAYER BOUNDARY DOWNWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       NTFLX    LAYER BOUNDARY NET (THERMAL PLUS SCATTERED SOLAR PLUS
!                DIRECT SOLAR) UPWARD SPECTRAL FLUX [W CM-2 / CM-1].
      REAL SUBINT,UPFLX,DNFLX,UPFLXS,DNFLXS,NTFLX
      COMMON/NETFLX/SUBINT(MXKSUB),UPFLX(LAYDIM),DNFLX(LAYDIM),         &
     &  UPFLXS(LAYDIM),DNFLXS(LAYDIM),NTFLX(LAYDIM)

!     /WTFLX/
!       UPDIFF  BOUNDARY UPWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDIFF  BOUNDARY DOWNWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDRCT  BOUNDARY DIRECT SOLAR SPECTRAL FLUX [W CM-2 / CM-1].
!       SMUPDF  LAYER BOUNDARY UPWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDF  LAYER BOUNDARY DOWNWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDR  LAYER BOUNDARY DIRECT SOLAR IN-BAND FLUX [W CM-2].
!       NFLUX   SPECTRAL BIN COUNTER FOR FLUX TABLE.
!       NTERMS  NUMBER OF TERMS IN FLUX SPECTRAL SUM.
      DOUBLE PRECISION UPDIFF,DNDIFF,DNDRCT,SMUPDF,SMDNDF,SMDNDR
      INTEGER NFLUX,NTERMS
      COMMON/WTFLX/UPDIFF(1:LAYDIM,-1:MWGT),DNDIFF(1:LAYDIM,-1:MWGT),   &
     &  DNDRCT(1:LAYDIM,-1:MWGT),SMUPDF(LAYDIM),SMDNDF(LAYDIM),         &
     &  SMDNDR(LAYDIM),NFLUX,NTERMS

!     /DISRT/
!       UMU      MONOTONICALLY INCREASING LIST OF DISTINCT USER-PATH
!                COSINE POLAR ANGLES.
!       PHI      MONOTONICALLY INCREASING LIST OF DISTINCT RELATIVE
!                SOLAR AZIMUTH ANGLES [0 TO 180 DEG].
!       NSTR     NUMBER OF DISCRETE ORDINATE STREAMS.
!       NAZ      NUMBER OF DISORT AZIMUTH COMPONENTS.
!       N2GAUS   ORDER OF DOUBLE-GAUSS QUADRATURES.
!       NUMU     NUMBER OF DISTINCT USER LINE-OF-SIGHT POLAR ANGLES.
!       MAPUMU   MAPPING FROM LINE-OF-SIGHT INDEX TO UMU ARRAY ENTRY.
!       NPHI     NUMBER OF DISTINCT RELATIVE SOLAR AZIMUTH ANGLES.
!       MAPPHI   MAPPING FROM LINE-OF-SIGHT INDEX TO PHI ARRAY ENTRY.
!       DIS      LOGICAL FLAG, TRUE FOR DISORT MULTIPLE SCATTERING.
!       DISAZM   LOGICAL FLAG, TRUE FOR DISORT WITH AZIMUTH DEPENDENCE.
!       DISALB   LOGICAL FLAG, TRUE FOR DISORT SPHERICAL ALBEDO OPTION.
!       LDISCL   LOGICAL FLAG, TRUE FOR ISAACS SCALED TO DISORT.
      REAL UMU,PHI
      INTEGER NSTR,NAZ,N2GAUS,NUMU,MAPUMU,NPHI,MAPPHI
      LOGICAL DIS,DISAZM,DISALB,LDISCL
      COMMON/DISRT/UMU(MXUMU),PHI(MAXPHI),NSTR,NAZ,N2GAUS,NUMU,         &
     &  MAPUMU(MLOS),NPHI,MAPPHI(MLOS),DIS,DISAZM,DISALB,LDISCL
      SAVE /DISRT/

!     /CJM5/
!       AMOD3D   FLAG INDICATING OUTPUT DATABASE FILE TYPE:
      CHARACTER AMOD3D*1
      COMMON/CJM5/AMOD3D

!     /AER/ THERE ARE "MAER=17" PARTICULATE COMPONENTS:
!           1       AEROSOL 1 (NOMINALLY, BOUNDARY LAYER AEROSOL).
!           2       AEROSOL 2 (NOMINALLY, TROPOSPHERIC AEROSOL).
!           3       AEROSOL 3 (NOMINALLY, STRATOSPHERIC AEROSOL).
!           4       AEROSOL 4 (NOMINALLY, VOLCANIC AEROSOL).
!           5       CIRRUS CLOUD.
!           6       CLOUD 1 (NOMINALLY, WATER CLOUD).
!           7       CLOUD 2 (NOMINALLY, ICE CLOUD).
!           8-17    NOVAM (NAVY OCEANIC VERTICAL AEROSOL MODEL) LAYERS.
!       NAER     NUMBER OF ACTIVE AEROSOLS.
!       EXTV     SPECTRAL EXTINCTION (NORMALIZED TO 1 AT 550 NM).
!       ABSV     SPECTRAL ABSORPTION (1-ABSV/EXTV=SCATTERING ALBEDO).
!       ASYV     SPECTRAL LEGENDRE MOMENT (DIVIDED BY 2N+1).
!       FRAC5    5 CM-1 GRID SPECTRAL INTERPOLATION FRACTION.
!       ASYVLO   ASYMMETRY FACTOR FROM PREVIOUS SPECTRAL FREQUENCY.
      INTEGER NAER
      REAL EXTV,ABSV,ASYV,FRAC5,ASYVLO
      COMMON/AER/NAER,EXTV(MAER),ABSV(MAER),ASYV(MXCMU,MAER),           &
     &  FRAC5,ASYVLO(MAER)

!     /SAPDEP/
!       XSAP     LINE-OF-SIGHT PATH AEROSOL EXTINCTION OPTICAL DEPTHS.
!       XSAPM    VERTICAL MS PATH AEROSOL EXTINCTION OPTICAL DEPTHS.
!       ASAP     LINE-OF-SIGHT PATH AEROSOL ABSORPTION OPTICAL DEPTHS.
!       ASAPM    VERTICAL MS PATH AEROSOL ABSORPTION OPTICAL DEPTHS.
!       XSAPS    SOLAR PATH AEROSOL EXTINCTION OPTICAL DEPTHS FROM LOS.
!       XSAPSM   SOLAR PATH AEROSOL EXTINCTION OPTICAL DEPTHS FOR MS.
!       ASAPS    SOLAR PATH AEROSOL ABSORPTION OPTICAL DEPTHS FROM LOS.
!       ASAPSM   SOLAR PATH AEROSOL ABSORPTION OPTICAL DEPTHS FOR MS.
      REAL XSAP,XSAPM,ASAP,ASAPM,XSAPS,XSAPSM,ASAPS,ASAPSM
      COMMON/SAPDEP/                                                    &
     &  XSAP(1:MWVSAP,0:LAYTWO,0:MLOS),XSAPM(1:MWVSAP,0:LAYDIM),        &
     &  ASAP(1:MWVSAP,0:LAYTWO,0:MLOS),ASAPM(1:MWVSAP,0:LAYDIM),        &
     &  XSAPS(MWVSAP,LAYTWO,MLOS),XSAPSM(MWVSAP,LAYDIM),                &
     &  ASAPS(MWVSAP,LAYTWO,MLOS),ASAPSM(MWVSAP,LAYDIM)

!     /LSTART/
!       TOLABS   OUTPUT WARNING THRESHOLD FOR EXCESS ABSORPTION.
!       LLORMN   OUTPUT WARNING FLAG FOR SMALL LORENTZ HALF WIDTH.
!       LLORMX   OUTPUT WARNING FLAG FOR LARGE LORENTZ HALF WIDTH.
!       LDOPMN   OUTPUT WARNING FLAG FOR SMALL DOPPLER HALF WIDTH.
!       LDOPMX   OUTPUT WARNING FLAG FOR LARGE DOPPLER HALF WIDTH.
!       LLINMN   OUTPUT WARNING FLAG FOR SMALL EFFECTIVE LINE NUMBER.
!       LSSA     OUTPUT WARNING FLAG FOR SCATTERING ALBEDO NEAR 1.
!       LAEREX   OUTPUT WARNING FLAG FOR ROUTINE AEREXT.
!       LBMCRK   OUTPUT WARNING FLAG FOR ROUTINE BMCRKS.
!       LFLUXS   OUTPUT WARNING FLAG FOR ROUTINE FLUXES.
!       LSSRAD   OUTPUT WARNING FLAG FOR ROUTINE SSRAD.
!       LTRLAY   OUTPUT WARNING FLAG FOR ROUTINE TRLAY.
!       LNVERS   OUTPUT WARNING FLAG FOR ROUTINE DENFAC.
!       LGEOM    OUTPUT WARNING FLAG FOR INDEX OF REFRACTION GRADIENT.
!       LO3TRN   OUTPUT WARNING FLAG FOR OZONE CURTIS-GODSON PROBLEM.
      REAL TOLABS
      LOGICAL LLORMN,LLORMX,LDOPMN,LDOPMX,LLINMN,LSSA,                  &
     &  LAEREX,LBMCRK,LFLUXS,LSSRAD,LTRLAY,LNVERS,LGEOM,LO3TRN
      COMMON/LSTART/TOLABS,LLORMN,LLORMX,LDOPMN,LDOPMX,LLINMN,LSSA,     &
     &  LAEREX,LBMCRK,LFLUXS,LSSRAD,LTRLAY,LNVERS,LGEOM,LO3TRN
      SAVE /LSTART/

!     /K_FRMT/
!       TFRMT    FORMAT FOR OUTPUT OF K-DEPENDENT TRANSMITTANCES.
!       RFRMT    FORMAT FOR OUTPUT OF K-DEPENDENT RADIANCES.
!       HTFRMT   FORMAT FOR OUTPUT OF K-DEPENDENT TRANSMITTANCES HEADER.
!       HRFRMT   FORMAT FOR OUTPUT OF K-DEPENDENT RADIANCES HEADER.
      CHARACTER TFRMT*33,RFRMT*38,HTFRMT*36,HRFRMT*34
      COMMON/K_FRMT/TFRMT,RFRMT,HTFRMT,HRFRMT
      SAVE /K_FRMT/

!     /LOOP_0/
!       O3MAX    TOLERANCE FOR 3-PARAMETER CURTIS-GODSON MONOTONICITY.
!       WDKDIS   BAND MODEL WIDTH [CM-1].
!       V0KDIS   CALCULATION INITIAL FREQUENCY.
!       NMWAVE   WAVELENGTH BIN OF PREVIOUS DATA [NM].
!       NTHEAD   HEADER RECORD FOR K-DEPENDENT TRANSMITTANCE FILE.
!       NRHEAD   HEADER RECORD FOR K-DEPENDENT RADIANCE FILE.
!       N4BYTE   NUMBER OF 4 BYTE VARIABLES PER RECORD.
!       NTREC    NUMBER OF RECORDS PER SPECTRAL POINT IN TRANSM FILE.
!       NRREC    NUMBER OF RECORDS PER SPECTRAL POINT IN RADIANCE FILE.
!       NRANGE   NUMBER OF OUTPUT PATH RANGES.
!       KPRINT   LOGICAL FLAG, DICTATING K-DEPENDENT DATA OUTPUT.
      REAL O3MAX,WDKDIS,V0KDIS
      INTEGER NMWAVE,NTHEAD,NRHEAD,N4BYTE,NTREC,NRREC,NRANGE
      LOGICAL KPRINT
      COMMON/LOOP_0/O3MAX,WDKDIS,V0KDIS,                                &
     &  NMWAVE,NTHEAD,NRHEAD,N4BYTE,NTREC,NRREC,NRANGE,KPRINT
      SAVE /LOOP_0/

!     /ANGSRF/
!       CVWSRF  COSINE OF THE VIEW ZENITH ANGLE FROM THE SURFACE.
!       CSNSRF  COSINE OF THE SOLAR (LUNAR) ZENITH AT SURFACE.
!       AZMSRF  RELATIVE AZIMUTH ANGLE (SUN - SENSOR AT SURFACE) [RAD].
!       UMU1    COSINE OF THE PATH NADIR ANGLE.
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       UMU0    COSINE OF THE SOLAR ZENITH ANGLE.
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       PHI1    RELATIVE AZIMUTH ANGLE (SUN - LOS PATH AT SENSOR) [DEG].
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       CMU     COSINE OF THE NADIR ANGLES USED IN DISORT.
      REAL CVWSRF,CSNSRF,AZMSRF,UMU1,UMU0,PHI1,CMU
      COMMON/ANGSRF/CVWSRF(MLOS),CSNSRF(MLOS),AZMSRF(MLOS),UMU1(MLOS),  &
     &  UMU0,PHI1(MLOS),CMU(MI)

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      EXTERNAL DEVCBD

!     FUNCTIONS:
      REAL BBFN

!     LOCAL VARIABLES:
!       IPATH    PATH TYPE LABEL (1 FOR SENSOR TO SUN, 2 FOR SCATTERING
!                POINT TO SUN, AND 3 FOR SENSOR TO SCATTERING POINT).
!       PFMOL0   MOLECULAR PHASE FUNCTION ISOTROPIC SCATTERING TERM.
!       PFMOL2   MOLECULAR PHASE FUNCTION ANISOTROPIC SCATTERING TERM.
!       P2RAY    SECOND LEGENDRE EXPANSION COEFFICIENT OVER 5 (= 2N+1).
!       ISTR     LOOP INDEX FOR MULTIPLE SCATTERING STREAMS.
!       INTRVL   LOOP INDEX FOR CORRELATED-K SUB-INTERVALS.
!       JNTRVL   NUMBER OF K-DISTRIBUTION INTERVALS FOR CURRENT FREQ.
!       ITLSUB   LOOP INDEX FOR LINE TAIL SUB-INTERVALS.
!       ILOS     LINE-OF-SIGHT LOOP INDEX.
!       TX15SV   PREVIOUS (LOWER) LAYER RAYLEIGH OPTICAL DEPTH.
!       XPART    PARTICULATE LAYER EXTINCTION OPTICAL DEPTH.
!       XPART0   PREVIOUS (LOWER) LAYER XPART VALUE.
!       GREY     GREY-BODY EMISSION [W SR-1 CM-2 / CM-1].
!       SURFAC   DIRECT SOLAR REFLECTION SURFACE CONTRIBUTION [SR-1].
!       SSAP     SCATTERING OPTICAL DEPTH OF SPECTRAL AEROSOL PROFILE.
!       UNIF     UNIFORMLY MIXED GASES TRANSMITTANCE.
!       TRACE    TRACE GASES TRANSMITTANCE.
!       TRANXY   COMBINED X AND Y SPECIES TRANSMITTANCE.
!       T_CH4    METHANE SHORTER WAVE TRANSMITTANCE.
!       LBMCEN   FLAG, TRUE IF S/d & 1/d DATA FOR CURRENT FREQUENCY BIN.
!       LBMFLG   FLAG, TRUE IF CENTER OR TAIL DATA FOR CURRENT FREQ BIN.
      INTEGER K,IPATH,ISEG,ISEGP1,N,INTRVL,NP1,JNTRVL,NBACKL,NBACKH,    &
     &  ILOS,ITLSUB,ISTR,IEXT
      REAL STORE,THMLAY,SOLLAY,WTTRAN,TRNOLD,TRNNEW,TX9LAY,TX9CUM,      &
     &  TMOL,FACTOR,PFMOL0,PFMOL2,P2RAY,TX14SV,TX15SV,XPART,XPART0,     &
     &  GREY,SURFAC,SSAP,O3TRAN,UNIF,TRACE,TRANXY,DTAU,T_CH4
      DOUBLE PRECISION SMTRNL,SMTHML,SMSOLL
      LOGICAL LBMCEN,LBMFLG

!     LOCAL ARRAYS:
!       RADCUM   CUMULATIVE PATH RADIANCE K-DATA [W SR-1 CM-2 / CM-1].
!       ALBBOT   MEDIUM SPHERICAL ALBEDO FROM BOTTOM.
!       TDFSUN   SUN TO GROUND DIFFUSE TRANSMITTANCE.
!       TDFOBS   OBSERVER TO GROUND "EMBEDDED" DIFFUSE TRANSMITTANCE.
!       THMSRC   DISORT THERMAL EMISSION LAYER SOURCE FUNCTION.
!       SOLSRC   DISORT SOLAR LAYER SOURCE FUNCTION.
      REAL RADCUM(MXKSUB),ALBBOT(MXKSUB),TDFSUN(MXKSUB),                &
     &  TDFOBS(MLOS,MXKSUB),THMSRC(MXKSUB,LAYDIM,MLOS),                 &
     &  SOLSRC(MXKSUB,LAYDIM,MLOS)

!*************VINCENT ROSS ADDED FOR SOURCE FUNCTION IMPROVEMENT*********
#ifdef DISORT_BOUND_SRC
!       S1       SOLAR SOURCE AT FRONT OF SEGMENT
!       S2       SOLAR SOURCE AT BACK OF SEGMENT
!       T1       THERMAL SOURCE AT FRONT OF SEGMENT
!       T2       THERMAL SOURCE AT BACK OF SEGMENT
!       DTRAN    SEGMENT TRANSMITTANCE
!       OD       SEGMENT OPTICAL DEPTH
!       SLOPE    SOLAR SOURCE FUNCTION SLOPE ALONG SEGMENT (IN-TAU)
!       TSLOP    THERMAL SOURCE FUNCTION SLOPE ALONG SEGMENT (IN-TAU)       
        DOUBLE PRECISION S1,S2,T1,T2,OD,SLOPE,TSLOP,DTRAN
        INTEGER I
#endif
!*************END VINCENT ROSS ADDITION**********************************

!hui
      LOGICAL ADINTP
      REAL INTPVL
!hui

!     DEFINE THE LAYER INDEPENDENT 5 CM-1 DATA:
      IF(LVBND5)CALL FRQ5DT(.FALSE.,VBAND5)

!     RAYLEIGH SCATTERING PHASE FUNCTION SPECTRAL COEFFICIENTS:
      CALL MOLSCT(VCEN,PFMOL0,PFMOL2,P2RAY)

!     MULTIPLE SCATTER VERTICAL PATH:
      BBNDRY(1)=PI*BBFN(TM(1),VCEN)
      BBGRND=PI*BBFN(AATEMP,VCEN)
      DNDRCT(1,-1)=0.D0

!     FOR EACH WAVENUMBER, BMOD0 PERFORMS INITIALIZATIONS FOR BMOD:
      IF(MODTRN)CALL BMOD0(IBINPT,VCEN,.TRUE.,LBMCEN,LBMFLG)

!     INITIALIZE PARAMETERS:
      IPATH=1
      TRNOLD=1.
      O3TRAN=1.

!     SKIP CORRELATED-K IF NO BAND MODEL LINE CENTER ABSORPTION:
      IF(KNTRVL.EQ.1)THEN

!         NO BAND MODEL DATA:  NO K-DISTRIBUTION USED.
          JNTRVL=1
          SUBINT(1)=1.
          WTKSUB(1)=1.
      ELSEIF(LBMCEN)THEN

!         BAND MODEL LINE CENTER DATA:  USE FULL K-DISTRIBUTION.
          JNTRVL=KNTRVL
          DO ITLSUB=1,NTLSUB
              SUBINT(ITLSUB)=WTKSAV(ITLSUB)
              WTKSUB(ITLSUB)=WTKSAV(ITLSUB)
          ENDDO
      ELSEIF(LBMFLG)THEN

!         BAND MODEL LINE TAIL DATA ONLY:  USE TAIL K-DISTRIBUTION.
          JNTRVL=NTLSUB
          DO ITLSUB=1,NTLSUB
              SUBINT(ITLSUB)=RTLSUB
              WTKSUB(ITLSUB)=RTLSUB
          ENDDO
      ELSE

!         NO BAND MODEL DATA:  NO K-DISTRIBUTION USED.
          JNTRVL=1
          SUBINT(1)=1.
          WTKSUB(1)=1.
      ENDIF

!     BEGINNING OF LAYER LOOP:
      DO ISEG=1,NSEG(MLOSP1)

!         LOAD APPROPRIATE ABSORBER AMOUNTS INTO WTOTAL(K)
          IF(IEMSCT.EQ.1)GOTO 20

!         SOLAR SCATTER: PROCESS SUN-TO-SENSOR PATH.
          IF(IPATH.EQ.1)THEN

!             SUN-TO-GROUND PATH:
              IF(WSPTHM(36,1).GE.0.)THEN

!                 DEFINE ALTITUDE DEPENDENT 5 CM-1 DATA:
                  IF (LVBND5 .and. ADINTP) THEN
                       CALL FRQ5DT(.FALSE.,VBAND5-INTPVL)
                       CALL SEG5MS(VBAND5-INTPVL,ISEG,1,P2RAY,          &
     &                    WSPTHM(0,1),XSAPSM(1,1),ASAPSM(1,1))
                       CALL FRQ5DT(.FALSE.,VBAND5)
                  ENDIF
                  IF(LVBND5)CALL SEG5MS(VBAND5,ISEG,1,P2RAY,            &
     &              WSPTHM(0,1),XSAPSM(1,1),ASAPSM(1,1))
                  GOTO 30
              ENDIF

!             SENSOR IS IN SHADE IF WSPTHM IS NEGATIVE:
              CALL SHADE(IPH,MLOSP1,ISEG,1,JNTRVL,VCEN,PFMOL0,PFMOL2,   &
     &          TSNOBS(1),TSNREF(1),SUMSSS(1),RADCUM)
          ENDIF
   10     CONTINUE

!         SUN-TO-SCATTER_POINT PATH FOR VERTICAL LINE-OF-SIGHT:
          IPATH=2
          ISEGP1=ISEG+1
          IF(WSPTHM(36,ISEGP1).GE.0.)THEN

!             DEFINE ALTITUDE DEPENDENT 5 CM-1 DATA:
              IF (LVBND5 .and. ADINTP) THEN
                       CALL FRQ5DT(.FALSE.,VBAND5-INTPVL)
                       CALL SEG5MS(VBAND5,ISEG,2,P2RAY,                 &
     &                      WSPTHM(0,ISEGP1),XSAPSM(1,ISEGP1),          &
     &                      ASAPSM(1,ISEGP1))
                       CALL FRQ5DT(.FALSE.,VBAND5)
              ENDIF
              IF(LVBND5)CALL SEG5MS(VBAND5,ISEG,2,P2RAY,                &
     &          WSPTHM(0,ISEGP1),XSAPSM(1,ISEGP1),ASAPSM(1,ISEGP1))
              GOTO 30
          ENDIF

!         SCATTER_POINT IS IN SHADE IF WSPTHM IS NEGATIVE:
          CALL SHADE(IPH,MLOSP1,ISEG,2,JNTRVL,VCEN,PFMOL0,PFMOL2,       &
     &      TSNOBS(1),TSNREF(1),SUMSSS(1),RADCUM)
   20     CONTINUE

!         DEFINE VERTICAL PATH ALTITUDE DEPENDENT 5 CM-1 DATA:
          IPATH=3
          IF (LVBND5 .and. ADINTP) THEN
             CALL FRQ5DT(.FALSE.,VBAND5-INTPVL)
             CALL SEG5MS(VBAND5,ISEG,3,P2RAY,                           &
     &            WPTHMS(0,ISEG),XSAPM(1,ISEG),ASAPM(1,ISEG))
             CALL FRQ5DT(.FALSE.,VBAND5)
          ENDIF
          IF(LVBND5)CALL SEG5MS(VBAND5,ISEG,3,P2RAY,                    &
     &      WPTHMS(0,ISEG),XSAPM(1,ISEG),ASAPM(1,ISEG))

!         DEFINE TX ARRAY:
   30     CONTINUE

!         INTERPOLATE COARSE SPECTRAL RESOLUTION DATA:
          IF(ABS(FRAC5).LT..001)THEN

!             GRID POINT: NO SPECTRAL INTERPOLATION:
              DO K=1,16
                  TX(K)=SPCMHI(K,ISEG,IPATH)
              ENDDO
              DO K=17,NSEG5
                  TX(47+K)=SPCMHI(K,ISEG,IPATH)
              ENDDO

!             VIS/NIR CH4:
              T_CH4=EXP(-SPCMHI(NSEG5-2,ISEG,IPATH))

!             H2-H2 AND H2-HE DIMERS:
              TX(MEXTX-1)=EXP(-SPCMHI(NSEG5-1,ISEG,IPATH))
              TX(MEXTX)=EXP(-SPCMHI(NSEG5,ISEG,IPATH))

!             SAP AEROSOLS:
              SSAP=SSAPHM(ISEG,IPATH)
              IF(IPATH.EQ.3)THEN
                  DO ISTR=2,NSTR
                      GTSCAT(ISTR,ISEG)=TXLEG(ISTR,ISEG,1)
                  ENDDO
              ENDIF
          ELSE

!             PERFORM SPECTRAL INTERPOLATION:
              DO K=1,16
                  STORE=SPCMHI(K,ISEG,IPATH)
                  TX(K)=STORE+FRAC5*(SPCMLO(K,ISEG,IPATH)-STORE)
              ENDDO
              DO K=17,NSEG5
                  STORE=SPCMHI(K,ISEG,IPATH)
                  TX(47+K)=STORE+FRAC5*(SPCMLO(K,ISEG,IPATH)-STORE)
              ENDDO

!             VIS/NIR CH4:
              STORE=SPCMHI(NSEG5-2,ISEG,IPATH)
              T_CH4                                                     &
     &          =EXP(-(STORE+FRAC5*(SPCMLO(NSEG5-2,ISEG,IPATH)-STORE)))

!             H2-H2 AND H2-HE DIMERS:
              STORE=SPCMHI(NSEG5-1,ISEG,IPATH)
              TX(MEXTX-1)                                               &
     &          =EXP(-(STORE+FRAC5*(SPCMLO(NSEG5-1,ISEG,IPATH)-STORE)))
              STORE=SPCMHI(NSEG5,ISEG,IPATH)
              TX(MEXTX)                                                 &
     &          =EXP(-(STORE+FRAC5*(SPCMLO(NSEG5,ISEG,IPATH)-STORE)))

!             SAP AEROSOLS:
              SSAP=SSAPHM(ISEG,IPATH)
              SSAP=SSAP+FRAC5*(SSAPLM(ISEG,IPATH)-SSAP)
              IF(IPATH.EQ.3)THEN
                  DO ISTR=2,NSTR
                      STORE=TXLEG(ISTR,ISEG,1)
                      GTSCAT(ISTR,ISEG)                                 &
     &                  =STORE+FRAC5*(TXLEG(ISTR,ISEG,0)-STORE)
                  ENDDO
              ENDIF
          ENDIF
          IF(KNTRVL.LE.1)THEN

!             NO CORRELATED-K:
              IF(MODTRN)CALL BMOD                                       &
     &          (MLOSP1,ISEG,NSEG(MLOSP1),IPATH,IBINPT,LBMCEN,LBMFLG)

!             COMBINE TRANSMITTANCES IF NO CORRELATED-K:
              UNIF=TX(36)*TX(44)*TX(46)*TX(47)*TX(50)*T_CH4
              TRACE=TX(52)*TX(54)*TX(55)*TX(56)*TX(11)
              IF(IPATH.EQ.3)THEN
                  IF(TRNOLD.LE.0.)THEN

!                     TRANSMITTANCE RATIO ILL-DEFINED; SET TO ZERO.
                      TRNLAY(1)=0.
                      DEPLAY(1)=BIGEXP
                  ELSE

!                     EXCLUDE H2-H2 & H2-HE DIMERS FROM XY TRANSM:
                      TRANXY=TX(MEXT+1)
                      DO IEXT=MEXT+2,MEXTX-2
                          TRANXY=TRANXY*TX(IEXT)
                      ENDDO
                      DO IEXT=MEXTX+1,MEXTX+NMOLY
                          TRANXY=TRANXY*TX(IEXT)
                      ENDDO
                      DEPLAY(1)=0.
                      TRNLAY(1)=1.
                      TRNNEW=TX(17)*UNIF*TX(31)*TRACE*TRANXY

!                     IF A PATH TRANSMITTANCE THROUGH "ISEG" SEGMENTS IS
!                     EXCEEDINGLY SMALL OR THE GROUND-TO-LEVEL VERTICAL
!                     TRANSMITTANCE IS RELATIVELY SMALL AND BEGUN TO
!                     INCREASE, SET THE TRANSMITTANCE TO EXACTLY ZERO SO
!                     THAT THE MOLECULAR OPTICAL DEPTH OF THE CURRENT
!                     AND SUBSEQUENT LAYERS IS ASSIGNED "BIGEXP".
                      IF((TRNOLD.LT.TRNNEW .AND. TRNNEW.LT.1.E-5)       &
     &                  .OR. TRNNEW.LT.1.E-30)TRNNEW=0.
                      IF(TRNNEW.LT.TRNOLD)THEN

!                         DETERMINE DECREASE IN TRANSMITTANCE:
                          TRNLAY(1)=TRNNEW/TRNOLD
                          IF(TRNLAY(1).GT.1.E-30)THEN
                              DEPLAY(1)=-LOG(TRNLAY(1))
                          ELSE
                              DEPLAY(1)=BIGEXP
                          ENDIF
                          TRNOLD=TRNNEW
                      ENDIF
                  ENDIF

!                 CHECK OZONE CURVE-OF-GROWTH:
                  IF(TX(31).LT.O3TRAN)THEN

!                     ONLY UPDATE O3TRAN IF NEW VALUE IS LOWER:
                      O3TRAN=TX(31)
                  ELSEIF(TX(31)-O3TRAN.GT.O3MAX  .AND. LO3TRN)THEN

!                     3-PARAMETER CURTIS-GODSON HAS FAILED FOR O3:
                      O3MAX=TX(31)-O3TRAN
                      WRITE(IPR,'(A,F9.2,2(A,/21X),3(A,F10.7),/21X,A)') &
     &                  ' Warning from LOOP:  At',VCEN,' CM-1, the'//   &
     &                  ' 3-parameter Curtis-Godson formulation is',    &
     &                  ' not producing a monotonic curve-of-growth. '  &
     &                  //' The O3',' transmittance increased',         &
     &                  O3MAX,' from',O3TRAN,' to',TX(31),              &
     &                  'Run the Correlated-k algorithm to avoid this'//&
     &                  ' problem.  This warning will not be repeated.'
                      LO3TRN=.FALSE.
                  ENDIF
                  DEPLAY(1)=DEPLAY(1)+TX(14)
                  XPART=TX(75)+TX(77)+TX(13)
              ELSEIF(IEMSCT.EQ.2)THEN

!                 INCLUDE H2-H2 & H2-HE DIMERS IN XY TRANSMITTANCE:
                  TRANXY=TX(MEXT+1)
                  DO IEXT=MEXT+2,MEXTX+NMOLY
                      TRANXY=TRANXY*TX(IEXT)
                  ENDDO

!                 CALCULATE TMOL, MOLECULAR TRANSMITTANCES TO THE SUN.
!                 VALUES OF TMOL < 1.E-8 ARE INACCURATE AND SET TO ZERO.
                  TMOL=TX(17)*UNIF*TX(31)*TRACE*TRANXY
                  IF(TMOL.LT.1.E-8)TMOL=0.
                  CALL SSRAD(IPH,MLOSP1,ISEG,IPATH,VCEN,                &
     &              S0,PFMOL0,PFMOL2,TMOL,SSAP,TX(1),                   &
     &              TSNOBS(1),TSNREF(1),SUMSSS(1))
                  GOTO(10,20),IPATH
              ENDIF
          ELSEIF(IPATH.LT.3)THEN

!             CK SOLAR PATH:    *** Unnecessary with DISORT? ***
!             CALL CKMSS(JNTRVL,ISEG+IPATH-1)
!             CALL SSCORK(.FALSE.,IPH,MLOSP1,ISEG,IPATH,JNTRVL,VCEN,S0, &
!    &          PFMOL0,PFMOL2,SSAP,TX(1),TSNOBS(1),SUMSSS(1),RADCUM)
              GOTO(10,20),IPATH
          ELSE

!             CK OPTICAL VERTICAL MULTIPLE SCATTERING PATH
              CALL CKMS(JNTRVL,ISEG)
          ENDIF

!         INITIALIZE TOTAL TRANSMITTANCE:
          TX(9)=0.

!         SET UP FOR MULTIPLE SCATTERING VERTICAL PATH CALCULATION
          ISEGP1=ISEG+1
          BBNDRY(ISEGP1)=PI*BBFN(TM(ISEGP1),VCEN)
          DNDRCT(ISEGP1,-1)=0.D0
          GTSCAT(0,ISEG)=TX(2)+TX(66)+TX(67)+TX(15)+TX(74)+TX(78)
          GTSCAT(1,ISEG)=TX(1)+TX(76)+TX(78)*TX(79)
          IF(GTSCAT(0,ISEG).GT.0.)THEN
              COSBAR(ISEG)=GTSCAT(1,ISEG)/GTSCAT(0,ISEG)
          ELSE
              COSBAR(ISEG)=0.
              IF(GTSCAT(0,ISEG).LT.0.)GTSCAT(0,ISEG)=0.
          ENDIF
          IF(KNTRVL.EQ.1)THEN

!             IF MOLECULAR TRANSMITTANCE FROM GROUND IS ZERO, THE
!             INCREMENTAL OPTICAL DEPTH IS NOT WELL-DEFINED.  IN
!             THIS CASE, THE LAYER OPTICAL DEPTH IS DEFINED BY
!             REQUIRING THE RATIO OF THE PREVIOUS TO CURRENT LAYER
!             OPTICAL DEPTHS TO EQUAL THE RATIO OF THE CONTINUUM
!             OPTICAL DEPTH CONTRIBUTIONS.
              IF(ISEG.EQ.1 .OR. DEPLAY(1).LT.BIGEXP)THEN
                  TAUT(1,ISEG)=DEPLAY(1)
              ELSE

!                 IF A CLOUD LAYER IS EMBEDDED IN THE ATMOSPHERE,
!                 THE RATIO OF CONTINUUM OPTICAL DEPTHS FROM
!                 NEIGHBORING LAYERS CAN BE VERY LARGE - A
!                 PROBLEM FOR DISORT.  TO PROTECT AGAINST THIS, A
!                 LAYER OPTICAL DEPTH MAXIMUM OF BIGEXP IS USED.
                  TAUT(1,ISEG)=XPART                                    &
     &              +MIN(BIGEXP,(TAUT(1,ISEG-1)-XPART0)*TX(15)/TX15SV)
              ENDIF
              TX15SV=TX(15)
              XPART0=XPART
          ELSE
              DO INTRVL=1,JNTRVL
                  TAUT(INTRVL,ISEG)=DEPLAY(INTRVL)
              ENDDO
          ENDIF

!         NUMERICAL INSTABILITIES CAN CAUSE GTSCAT(0,*)
!         TO EXCEED TAUT; PROTECT AGAINST THIS ANOMALY.
          IF(GTSCAT(0,ISEG).GT.TAUT(1,ISEG))THEN
              GTSCAT(0,ISEG)=TAUT(1,ISEG)
              IF(GTSCAT(1,ISEG).GT.GTSCAT(0,ISEG))THEN
                  GTSCAT(1,ISEG)=GTSCAT(0,ISEG)
                  COSBAR(ISEG)=1.
              ENDIF
          ENDIF

!         INITIALIZE NET FLUX ARRAY
          UPFLX(ISEG)=0.
          DNFLX(ISEG)=0.
          UPFLXS(ISEG)=0.
          DNFLXS(ISEG)=0.
          NTFLX(ISEG)=0.

!     END LAYER LOOP:
      ENDDO

!     MULTIPLE SCATTERING PATH:  CALCULATE SOLAR AND THERMAL FLUXES.
      UPFLX(ML)=0.
      DNFLX(ML)=0.
      UPFLXS(ML)=0.
      DNFLXS(ML)=0.
      NTFLX(ML)=0.
      CALL MSRAD(VCEN,S0,JNTRVL,NLOS,ALBBOT,TDFSUN,TDFOBS,THMSRC,SOLSRC)
      IF(NOPRNT.NE.9)THEN

!         HAVE DISORT SCALING SPECTRAL GRID POINTS:
          IF(DODGRD)THEN
              CALL SCNFLX(VCEN)
          ELSE
              CALL SPCFLX(NO_WRT)
          ENDIF

!         COOLING RATES:
!         [MULTIPLE SCATTERING REQUIRES 4 LEVELS (ML.GE.4)]:
          IF(ML.GE.4)CALL COOL(VCEN)
      ENDIF

!     LOOP OVER LINES-OF-SIGHT:
      DO ILOS=1,NLOS

!         FOR EACH WAVENUMBER, BMOD0 PERFORMS INITIALIZATIONS FOR BMOD:
          IF(MODTRN)CALL BMOD0(IBINPT,VCEN,.FALSE.,LBMCEN,LBMFLG)

!         SPECTRAL FLUX OUTPUT AT SENSOR:
          IF(NOPRNT.LE.-1 .AND. .NOT.NO_WRT)THEN
              N=LOWALT(0,ILOS)
              NP1=N+1
              FACTOR=FACALT(0,ILOS)
              IF(BINOUT)THEN
                  CALL BNWT7(VCEN,PTHALT(0,ILOS),                       &
     &              NTFLX(N)+FACTOR*(NTFLX(NP1)-NTFLX(N)),              &
     &              UPFLX(N)+FACTOR*(UPFLX(NP1)-UPFLX(N)),              &
     &              DNFLX(N)+FACTOR*(DNFLX(NP1)-DNFLX(N)),              &
     &              UPFLXS(N)+FACTOR*(UPFLXS(NP1)-UPFLXS(N)),           &
     &              DNFLXS(N)+FACTOR*(DNFLXS(NP1)-DNFLXS(N)))
              ELSEIF(NLOS.EQ.1)THEN
                  WRITE(IPR1,'(/F8.2,F7.3,A,1P,2(3E11.4,22X))')         &
     &              VCEN,PTHALT(0,ILOS),' 1.000000          ',          &
     &              NTFLX(N)+FACTOR*(NTFLX(NP1)-NTFLX(N)),              &
     &              UPFLX(N)+FACTOR*(UPFLX(NP1)-UPFLX(N)),              &
     &              DNFLX(N)+FACTOR*(DNFLX(NP1)-DNFLX(N)),              &
     &              UPFLXS(N)+FACTOR*(UPFLXS(NP1)-UPFLXS(N)),           &
     &              DNFLXS(N)+FACTOR*(DNFLXS(NP1)-DNFLXS(N))
              ELSEIF(ILOS.EQ.1)THEN
                  WRITE(IPR1,'(/F8.2,I4,F7.3,A,1P,2(3E11.4,22X))')      &
     &              VCEN,ILOS,PTHALT(0,ILOS),' 1.000000          ',     &
     &              NTFLX(N)+FACTOR*(NTFLX(NP1)-NTFLX(N)),              &
     &              UPFLX(N)+FACTOR*(UPFLX(NP1)-UPFLX(N)),              &
     &              DNFLX(N)+FACTOR*(DNFLX(NP1)-DNFLX(N)),              &
     &              UPFLXS(N)+FACTOR*(UPFLXS(NP1)-UPFLXS(N)),           &
     &              DNFLXS(N)+FACTOR*(DNFLXS(NP1)-DNFLXS(N))
              ELSE
                  WRITE(IPR1,'(/I12,F7.3,A,1P,2(3E11.4,22X))')          &
     &              ILOS,PTHALT(0,ILOS),' 1.000000          ',          &
     &              NTFLX(N)+FACTOR*(NTFLX(NP1)-NTFLX(N)),              &
     &              UPFLX(N)+FACTOR*(UPFLX(NP1)-UPFLX(N)),              &
     &              DNFLX(N)+FACTOR*(DNFLX(NP1)-DNFLX(N)),              &
     &              UPFLXS(N)+FACTOR*(UPFLXS(NP1)-UPFLXS(N)),           &
     &              DNFLXS(N)+FACTOR*(DNFLXS(NP1)-DNFLXS(N))
              ENDIF
          ENDIF

!         INITIALIZATIONS:
          IPATH=1
          TRNOLD=1.
          O3TRAN=1.
          TX9CUM=1.
          THMCUM(ILOS)=0.
          SUMMS(ILOS)=0.

          DO INTRVL=1,JNTRVL
              TRNCUM(INTRVL)=1.
              RADCUM(INTRVL)=0.
          ENDDO

!         K-DISTRIBUTION DEPENDENT OUTPUT HEADER:
          IF(KPRINT .AND. .NOT.NO_WRT)THEN
              IF(BINOUT)THEN
                  NTKDIS=NTKDIS+1
                  WRITE(JTKDIS,REC=NTKDIS)VCEN,JNTRVL,PTHALT(0,ILOS),   &
     &              (SUBINT(INTRVL),INTRVL=1,JNTRVL)
                  NRKDIS=NRKDIS+1
                  WRITE(JRKDIS,REC=NRKDIS)VCEN,JNTRVL,PTHALT(0,ILOS),   &
     &              (SUBINT(INTRVL),INTRVL=1,JNTRVL)
              ELSE
                  WRITE(HTFRMT(28:29),'(I2)')JNTRVL
                  WRITE(ITKDIS,HTFRMT)VCEN,JNTRVL,PTHALT(0,ILOS),       &
     &              'WEIGHTS:',(SUBINT(INTRVL),INTRVL=1,JNTRVL)
                  WRITE(HRFRMT(25:26),'(I2)')JNTRVL
                  WRITE(IRKDIS,HRFRMT)VCEN,JNTRVL,PTHALT(0,ILOS),       &
     &              'WEIGHTS:',(SUBINT(INTRVL),INTRVL=1,JNTRVL)
              ENDIF
          ENDIF

!         BEGINNING OF LAYER LOOP:
          DO ISEG=1,NSEG(ILOS)

!             PASS APPROPRIATE ABSORBER AMOUNTS:
              IF(IEMSCT.EQ.1)GOTO 50

!             SUN-TO-OBSERVER PATH:
              IF(IPATH.EQ.1)THEN
                  IF(WSPTH(36,1,ILOS).GE.0.)THEN

!                     DEFINE ALTITUDE DEPENDENT 5 CM-1 DATA:
                      IF(LVBND5 .and. ADINTP) THEN
                        CALL FRQ5DT(.FALSE.,VBAND5-INTPVL)
                        CALL SEG5(VBAND5-INTPVL,ISEG,1,                 &
     &                   NSEG(ILOS),ILOS,WSPTH(0,1,ILOS),               &
     &                   XSAPS(1,1,ILOS),ASAPS(1,1,ILOS),.FALSE.)
                        CALL FRQ5DT(.FALSE.,VBAND5)
                      ENDIF
                      IF(LVBND5)CALL SEG5(VBAND5,ISEG,1,                &
     &                  NSEG(ILOS),ILOS,WSPTH(0,1,ILOS),                &
     &                  XSAPS(1,1,ILOS),ASAPS(1,1,ILOS),.FALSE.)
                      GOTO 60
                  ENDIF

!                 SCATTERING POINT IN SHADE IF WSPTH(36,1,ILOS) IS NEG:
                  CALL SHADE(IPH,ILOS,ISEG,1,JNTRVL,VCEN,PFMOL0,PFMOL2, &
     &              TSNOBS(ILOS),TSNREF(ILOS),SUMSSS(ILOS),RADCUM)
              ENDIF
   40         CONTINUE

!             SUN-TO-SCATTERING_POINT PATH [WHEN CORRELATED-K IS NOT
!             USED (JNTRVL=1) PATH INCLUDES SENSOR-TO-SCATTER_POINT]:
              IPATH=2
              ISEGP1=ISEG+1
              IF(WSPTH(36,ISEGP1,ILOS).GE.0.)THEN

!                 DEFINE ALTITUDE DEPENDENT 5 CM-1 DATA:
                  IF(LVBND5 .and. ADINTP) THEN
                     CALL FRQ5DT(.FALSE.,VBAND5-INTPVL)
                     CALL SEG5(VBAND5-INTPVL,ISEG,2, NSEG(ILOS),        &
     &                  ILOS,WSPTH(0,ISEGP1,ILOS),XSAPS(1,ISEGP1,ILOS), &      
     &                  ASAPS(1,ISEGP1,ILOS),.FALSE.)
                     CALL FRQ5DT(.FALSE.,VBAND5)
                  ENDIF
                  IF(LVBND5)CALL SEG5(VBAND5,ISEG,2,                    &
     &              NSEG(ILOS),ILOS,WSPTH(0,ISEGP1,ILOS),               &
     &              XSAPS(1,ISEGP1,ILOS),ASAPS(1,ISEGP1,ILOS),.FALSE.)
                  GOTO 60
              ENDIF

!             SCATTERING POINT IN SHADE IF WSPTH(36,ISEGP1,ILOS) IS NEG:
              CALL SHADE(IPH,ILOS,ISEG,2,JNTRVL,VCEN,PFMOL0,PFMOL2,     &
     &          TSNOBS(ILOS),TSNREF(ILOS),SUMSSS(ILOS),RADCUM)

!             DEFINE OPTICAL PATH ALTITUDE DEPENDENT 5 CM-1 DATA:
   50         CONTINUE
              IPATH=3
              IF(LVBND5 .and. ADINTP) THEN
                 CALL FRQ5DT(.FALSE.,VBAND5-INTPVL)
                 CALL SEG5(VBAND5-INTPVL,ISEG,3,                        &
     &                NSEG(ILOS),ILOS,WPTH(0,ISEG,ILOS),                &
     &                XSAP(1,ISEG,ILOS),ASAP(1,ISEG,ILOS),.FALSE.)
                 CALL FRQ5DT(.FALSE.,VBAND5)
              ENDIF
              IF(LVBND5)CALL SEG5(VBAND5,ISEG,3,                        &
     &          NSEG(ILOS),ILOS,WPTH(0,ISEG,ILOS),                      &
     &          XSAP(1,ISEG,ILOS),ASAP(1,ISEG,ILOS),.FALSE.)

!             DEFINE TX ARRAY
!              1  AEROSOL SCATTERING DEPTH WEIGHTED ASYMMETRY PARAMETER.
!              2  INCREMENTAL AEROSOL SCATTERING OPTICAL DEPTH.
!              3  TOTAL O2 CONTINUUM TRANSMITTANCE.
!              4  N2 CONTINUUM TRANSMITTANCE.
!              5  TOTAL H2O CONTINUUM TRANSMITTANCE.
!              6  RAYLEIGH MOLECULAR SCATTERED TRANSMITTANCE.
!              7  AEROSOL ABSORPTION + SCATTERING TRANSMITTANCE.
!              8  TOTAL OZONE CONTINUUM TRANSMITTANCE.
!              9  PRODUCT OF CONTINUUM TRANSMITTANCES EXCEPT O2 & HNO3.
!             10  AEROSOL TRANSMITTANCE FROM ABSORPTION.
!             11  HNO3 TRANSMITTANCE.
!             12  MOLECULAR CONTINUUM OPTICAL DEPTH.
!             13  INCREMENTAL AEROSOL EXTINCTION OPTICAL DEPTH.
!             14  TOTAL CONTINUUM OPTICAL DEPTH.
!             15  LAYER RAYLEIGH MOLECULAR SCATTERING OPTICAL DEPTH.
!             16  CIRRUS + WATER CLOUD TRANSMITTANCE.
!             64  UV/VIS NO2 TRANSMITTANCE.
!             65  UV/VIS SO2 TRANSMITTANCE.
!             66  INCREMENTAL WATER DROPLET SCATTERING OPTICAL DEPTH.
!             67  INCREMENTAL ICE PARTICLE SCATTERING OPTICAL DEPTH.
!             74  INCREMENTAL STD/SUB-VIS CIRRUS SCATTER OPTICAL DEPTH.
!             75  INCREMENTAL WATER+ICE CLOUD EXTINCTION OPTICAL DEPTH.
!             76  CLOUD SCATTERING DEPTH WEIGHTED ASYMMETRY PARAMETER.
!             77  INCREMENTAL RAIN EXTINCTION OPTICAL DEPTH.
!             78  INCREMENTAL RAIN SCATTERING OPTICAL DEPTH.
!             79  INCREMENTAL RAIN ASYMMETRY PARAMETER.
!             --  MOLECULAR LINE CENTER TRANSMITTANCE  --
!             17=H2O  36=CO2  31=O3   47=N2O  44=CO   46=CH4
!             50=O2   54=NO   56=SO2  55=NO2  52=NH3  11=HNO3
   60         CONTINUE

!             INTERPOLATE COARSE SPECTRAL RESOLUTION DATA:
              IF(ABS(FRAC5).LT..001)THEN

!                 GRID POINT: NO SPECTRAL INTERPOLATION:
                  DO K=1,16
                      TX(K)=SPCHI(K,ISEG,ILOS,IPATH)
                  ENDDO
                  DO K=17,NSEG5
                      TX(47+K)=SPCHI(K,ISEG,ILOS,IPATH)
                  ENDDO

!                 VIS/NIR CH4:
                  T_CH4=EXP(-SPCHI(NSEG5-2,ISEG,ILOS,IPATH))

!                 H2-H2 AND H2-HE DIMERS:
                  TX(MEXTX-1)=EXP(-SPCHI(NSEG5-1,ISEG,ILOS,IPATH))
                  TX(MEXTX)=EXP(-SPCHI(NSEG5,ISEG,ILOS,IPATH))

!                 SAP AEROSOLS:
                  SSAP=SSAPH(ISEG,ILOS,IPATH)
              ELSE

!                 PERFORM SPECTRAL INTERPOLATION:
                  DO K=1,16
                      STORE=SPCHI(K,ISEG,ILOS,IPATH)
                      TX(K)=STORE+FRAC5*(SPCLO(K,ISEG,ILOS,IPATH)-STORE)
                  ENDDO
                  DO K=17,NSEG5
                      STORE=SPCHI(K,ISEG,ILOS,IPATH)
                      TX(47+K)                                          &
     &                  =STORE+FRAC5*(SPCLO(K,ISEG,ILOS,IPATH)-STORE)
                  ENDDO

!                 VIS/NIR CH4:
                  STORE=SPCHI(NSEG5-2,ISEG,ILOS,IPATH)
                  T_CH4=EXP(-(STORE                                     &
     &              +FRAC5*(SPCLO(NSEG5-2,ISEG,ILOS,IPATH)-STORE)))

!                 H2-H2 AND H2-HE DIMERS:
                  STORE=SPCHI(NSEG5-1,ISEG,ILOS,IPATH)
                  TX(MEXTX-1)=EXP(-(STORE                               &
     &              +FRAC5*(SPCLO(NSEG5-1,ISEG,ILOS,IPATH)-STORE)))
                  STORE=SPCHI(NSEG5,ISEG,ILOS,IPATH)
                  TX(MEXTX)=EXP(-(STORE                                 &
     &              +FRAC5*(SPCLO(NSEG5,ISEG,ILOS,IPATH)-STORE)))

!                 SAP AEROSOLS:
                  SSAP=SSAPH(ISEG,ILOS,IPATH)
                  SSAP=SSAP+FRAC5*(SSAPL(ISEG,ILOS,IPATH)-SSAP)
              ENDIF
              IF(KNTRVL.LE.1)THEN

!                 NO CORRELATED-K:
                  IF(MODTRN)CALL BMOD(ILOS,ISEG,NSEG(ILOS),             &
     &              IPATH,IBINPT,LBMCEN,LBMFLG)

!                 COMBINE TRANSMITTANCES IF NO CORRELATED-K:
                  UNIF=TX(36)*TX(44)*TX(46)*TX(47)*TX(50)*T_CH4
                  TRACE=TX(52)*TX(54)*TX(55)*TX(56)*TX(11)
                  IF(IPATH.EQ.3)THEN

!                     EXCLUDE H2-H2 & H2-HE DIMERS FROM XY TRANSM:
                      TRANXY=TX(MEXT+1)
                      DO IEXT=MEXT+2,MEXTX-2
                          TRANXY=TRANXY*TX(IEXT)
                      ENDDO
                      DO IEXT=MEXTX+1,MEXTX+NMOLY
                          TRANXY=TRANXY*TX(IEXT)
                      ENDDO
                      IF(TRNOLD.LE.0.)THEN

!                         TRANSMITTANCE RATIO ILL-DEFINED AND SET IT 0:
                          TRNLAY(1)=0.
                          DEPLAY(1)=BIGEXP
                      ELSE
                          DEPLAY(1)=0.
                          TRNLAY(1)=1.
                          TRNNEW=TX(17)*UNIF*TX(31)*TRACE*TRANXY

!                         IF A PATH TRANSMITTANCE THROUGH "ISEG" LAYERS
!                         IS EXCEEDINGLY SMALL OR THE GROUND-TO-LEVEL
!                         VERTICAL TRANSMITTANCE IS RELATIVELY SMALL
!                         AND BEGUN TO INCREASE, SET THE TRANSMITTANCE
!                         TO EXACTLY ZERO SO THAT THE MOLECULAR OPTICAL
!                         DEPTH OF THE CURRENT AND SUBSEQUENT LAYERS
!                         IS ASSIGNED "BIGEXP".
                          IF(TRNNEW.LT.1.E-30)TRNNEW=0.
                          IF(TRNNEW.LT.TRNOLD)THEN

!                             DETERMINE DECREASE IN TRANSMITTANCE:
                              TRNLAY(1)=TRNNEW/TRNOLD
                              DEPLAY(1)=BIGEXP
                              IF(TRNLAY(1).GT.1.E-30)                   &
     &                          DEPLAY(1)=-LOG(TRNLAY(1))
                              TRNOLD=TRNNEW
                          ENDIF
                      ENDIF

!                     CHECK OZONE CURVE-OF-GROWTH:
                      IF(TX(31).LT.O3TRAN)THEN

!                         ONLY UPDATE O3TRAN IF NEW VALUE IS LOWER:
                          O3TRAN=TX(31)
                      ELSEIF(TX(31)-O3TRAN.GT.O3MAX .AND. LO3TRN)THEN

!                         3-PARAMETER CURTIS-GODSON FAILED FOR OZONE:
                          O3MAX=TX(31)-O3TRAN
                          WRITE(IPR,                                    &
     &                      '(1X,A,F9.2,2(A,/21X),3(A,F10.7),/21X,A)')  &
     &                      'Warning from LOOP:  At spectral frequency',&
     &                      VCEN,' CM-1, the 3-parameter Curtis-Godson',&
     &                      'formulation is not producing a monotonic ' &
     &                      //'curve-of-growth.','The O3 transmittance' &
     &                      //' increased',O3MAX,' from',O3TRAN,' to',  &
     &                      TX(31),'Run Correlated-k to avoid this prob'&
     &                      //'lem.  This warning will not be repeated.'
                          LO3TRN=.FALSE.
                      ENDIF
                      DEPLAY(1)=DEPLAY(1)+TX(14)
                      XPART=TX(75)+TX(77)+TX(13)
                      TX9LAY=EXP(-TX(14))
                      TX9CUM=TX9CUM*TX9LAY
                      TX(9)=TX9CUM*TRNNEW
                      TRNLAY(1)=TRNLAY(1)*TX9LAY
                      IF(IEMSCT.EQ.2)CALL SSRAD(IPH,ILOS,ISEG,IPATH,    &
     &                  VCEN,S0,PFMOL0,PFMOL2,TRNNEW,SSAP,TX(1),        &
     &                  TSNOBS(ILOS),TSNREF(ILOS),SUMSSS(ILOS))
                  ELSEIF(IEMSCT.EQ.2)THEN

!                     INCLUDE H2-H2 & H2-HE DIMERS IN XY TRANSMITTANCE:
                      TRANXY=TX(MEXT+1)
                      DO IEXT=MEXT+2,MEXTX+NMOLY
                          TRANXY=TRANXY*TX(IEXT)
                      ENDDO

!                     CALCULATE TMOL, THE MOLECULAR TRANSMITTANCES
!                     TO THE SUN.  VALUES OF TMOL LESS THAN 1.E-8
!                     ARE INACCURATE AND ARE SET TO ZERO.
                      TMOL=TX(17)*UNIF*TX(31)*TRACE*TRANXY
                      IF(TMOL.LT.1.E-8)TMOL=0.
                      CALL SSRAD(IPH,ILOS,ISEG,IPATH,VCEN,              &
     &                  S0,PFMOL0,PFMOL2,TMOL,SSAP,TX(1),               &
     &                  TSNOBS(ILOS),TSNREF(ILOS),SUMSSS(ILOS))
                      GOTO(40,50),IPATH
                  ENDIF
              ELSEIF(IPATH.LT.3)THEN

!                 CK SOLAR PATH:
                  IF(CO_LIN(ILOS))THEN

!                     SOLAR AND LOS PATHS ARE ESSENTIALLY IDENTICAL.
!                     DEFINE SOLAR PATH DATA FROM LOS PATH DATA:
                      CALL SSCORK(.TRUE.,IPH,ILOS,ISEG,IPATH,           &
     &                  JNTRVL,VCEN,S0,PFMOL0,PFMOL2,SSAP,              &
     &                  TX(1),TSNOBS(ILOS),SUMSSS(ILOS),RADCUM)
                  ELSE
                      CALL CKLOSS(JNTRVL,ISEG+IPATH-1,ILOS)
                      CALL SSCORK(.FALSE.,IPH,ILOS,ISEG,IPATH,          &
     &                  JNTRVL,VCEN,S0,PFMOL0,PFMOL2,SSAP,              &
     &                  TX(1),TSNOBS(ILOS),SUMSSS(ILOS),RADCUM)
                  ENDIF
                  GOTO(40,50),IPATH
              ELSE

!                 CK OPTICAL (LINE-OF-SIGHT) PATH:
                  IF(AMOD3D.EQ.'T')THEN

!                     EXCLUDE AEROSOL/CLOUD/RAIN FROM TX(14) FOR MOD3D:
                      TX14SV=TX(14)
                      TX(14)=TX(80)
                      CALL CKLOS(JNTRVL,ISEG,ILOS)
                      TX(14)=TX14SV
                      CALL M3D(JNTRVL,ISEG,NSEG(ILOS),                  &
     &                  SUBINT,WPTH(0,ISEG,ILOS))
                  ELSE

!                     LINE-OF-SIGHT PATH WITHOUT MOD3D:
                      CALL CKLOS(JNTRVL,ISEG,ILOS)
                  ENDIF
                  IF(IEMSCT.EQ.2)CALL SSCORK(CO_LIN(ILOS),IPH,ILOS,     &
     &              ISEG,IPATH,JNTRVL,VCEN,S0,PFMOL0,PFMOL2,SSAP,       &
     &              TX(1),TSNOBS(ILOS),SUMSSS(ILOS),RADCUM)
              ENDIF

!             INITIALIZE TOTAL TRANSMITTANCE:
              TX(9)=0.

!             DISORT MULTIPLE SCATTERING LINE-OF-SIGHT PATH:
              N=MAPPTH(ISEG,ILOS)
              SMTRNL=0.D0
              SMTHML=0.D0
              SMSOLL=0.D0

!             k-DISTRIBUTION LOOP:
              DO INTRVL=1,JNTRVL
!*************VINCENT ROSS CHANGED FOR SOURCE FUNCTION IMPROVEMENT*****************
#ifdef DISORT_BOUND_SRC
!VR               Single precision TRNLAY produces numerical inacuracies
                  OD = DEPLAY(INTRVL)
                  DTRAN = EXP(-OD)
                  DTAU=1.- DTRAN

!                 FRONT OF SEGMENT 
!                 INTERPOLATE BETWEEN LAYERS IF NECESSARY                  
                  FACTOR=FACALT(ISEG-1,ILOS)
                  NBACKL=LOWALT(ISEG-1,ILOS)
                  NBACKH=NBACKL+1
                  IF(FACTOR.LE.0) THEN
                      S1 = SOLSRC(INTRVL,NBACKL,ILOS)
                      T1 = THMSRC(INTRVL,NBACKL,ILOS)
                  ELSE
                      S1 = SOLSRC(INTRVL,NBACKL,ILOS)+
     &                  FACTOR*(SOLSRC(INTRVL,NBACKH,ILOS)-
     &                  SOLSRC(INTRVL,NBACKL,ILOS))
                      T1 = THMSRC(INTRVL,NBACKL,ILOS)+
     &                  FACTOR*(THMSRC(INTRVL,NBACKH,ILOS)-
     &                  THMSRC(INTRVL,NBACKL,ILOS))
                  ENDIF
                  
!                 BACK OF SEGMENT 
!                 INTERPOLATE BETWEEN LAYERS IF NECESSARY                  
                  FACTOR=FACALT(ISEG,ILOS)
                  NBACKL=LOWALT(ISEG,ILOS)
                  NBACKH=NBACKL+1
                  IF(FACTOR.LE.0) THEN
                      S2 = SOLSRC(INTRVL,NBACKL,ILOS)
                      T2 = THMSRC(INTRVL,NBACKL,ILOS)
                  ELSE
                      S2 = SOLSRC(INTRVL,NBACKL,ILOS)+
     &                  FACTOR*(SOLSRC(INTRVL,NBACKH,ILOS)-
     &                  SOLSRC(INTRVL,NBACKL,ILOS))
                      T2 = THMSRC(INTRVL,NBACKL,ILOS)+
     &                  FACTOR*(THMSRC(INTRVL,NBACKH,ILOS)-
     &                  THMSRC(INTRVL,NBACKL,ILOS))
                  ENDIF
                  
                  IF(OD.GT.0) THEN
                      SLOPE=(S2-S1)/OD
                      TSLOP=(T2-T1)/OD
                  ELSE
                      SLOPE=0
                      TSLOP=0
                  ENDIF

                  THMLAY=T1*DTAU-TSLOP*(DTRAN*(OD+1))+TSLOP
                  SOLLAY=S1*DTAU-SLOPE*(DTRAN*(OD+1))+SLOPE
#else
                  DTAU=1-TRNLAY(INTRVL)

!                 DISORT THERMAL AND SOLAR SOURCE TERMS HAVE BEEN
!                 STORED IN THE UPF AND UPFS ARRAYS, RESPECTIVELY.
                  THMLAY=DTAU*THMSRC(INTRVL,N,ILOS)
                  SOLLAY=DTAU*SOLSRC(INTRVL,N,ILOS)
#endif
!*************END VINCENT ROSS CHANGES*********************************************
                  WTTRAN=SUBINT(INTRVL)*TRNCUM(INTRVL)
                  THMCUM(ILOS)=THMCUM(ILOS)+WTTRAN*THMLAY
                  SUMMS(ILOS)=SUMMS(ILOS)+WTTRAN*SOLLAY
                  RADCUM(INTRVL)                                        &
     &              =RADCUM(INTRVL)+TRNCUM(INTRVL)*(THMLAY+SOLLAY)
                  TRNCUM(INTRVL)=TRNCUM(INTRVL)*TRNLAY(INTRVL)
                  TX(9)=TX(9)+SUBINT(INTRVL)*TRNCUM(INTRVL)
                  SMTRNL=SMTRNL+DBLE(SUBINT(INTRVL)*TRNLAY(INTRVL))
                  SMTHML=SMTHML+DBLE(SUBINT(INTRVL)*THMLAY)
                  SMSOLL=SMSOLL+DBLE(SUBINT(INTRVL)*SOLLAY)
              ENDDO
              IF(NOPRNT.LE.-1)THEN

!                 INTERPOLATE FLUXES IF PATH SEGMENT DOES
!                 NOT TERMINATE AT A LAYER BOUNDARY.
                  NBACKL=LOWALT(ISEG,ILOS)
                  FACTOR=FACALT(ISEG,ILOS)
                  IF(FACTOR.LE.0. .AND. .NOT.NO_WRT)THEN
                      IF(BINOUT)THEN
                          CALL BNWT13(VCEN,PTHALT(ISEG,ILOS),TX(9),     &
     &                      SMTRNL,NTFLX(NBACKL),UPFLX(NBACKL),         &
     &                      DNFLX(NBACKL),SMTHML,THMCUM(ILOS),          &
     &                      UPFLXS(NBACKL),DNFLXS(NBACKL),              &
     &                      SMSOLL,SUMMS(ILOS))
                      ELSEIF(NLOS.EQ.1)THEN
                          WRITE(IPR1,'(F8.2,F7.3,2F9.6,1X,1P,9E11.4)')  &
     &                      VCEN,PTHALT(ISEG,ILOS),TX(9),SMTRNL,        &
     &                      NTFLX(NBACKL),UPFLX(NBACKL),DNFLX(NBACKL),  &
     &                      SMTHML,THMCUM(ILOS),UPFLXS(NBACKL),         &
     &                      DNFLXS(NBACKL),SMSOLL,SUMMS(ILOS)
                      ELSEIF(ILOS.EQ.1)THEN
                          WRITE(IPR1,                                   &
     &                      '(F8.2,I4,F7.3,2F9.6,1X,1P,9E11.4)')        &
     &                      VCEN,ILOS,PTHALT(ISEG,ILOS),TX(9),SMTRNL,   &
     &                      NTFLX(NBACKL),UPFLX(NBACKL),DNFLX(NBACKL),  &
     &                      SMTHML,THMCUM(ILOS),UPFLXS(NBACKL),         &
     &                      DNFLXS(NBACKL),SMSOLL,SUMMS(ILOS)
                      ELSE
                          WRITE(IPR1,'(I12,F7.3,2F9.6,1X,1P,9E11.4)')   &
     &                      ILOS,PTHALT(ISEG,ILOS),TX(9),SMTRNL,        &
     &                      NTFLX(NBACKL),UPFLX(NBACKL),DNFLX(NBACKL),  &
     &                      SMTHML,THMCUM(ILOS),UPFLXS(NBACKL),         &
     &                      DNFLXS(NBACKL),SMSOLL,SUMMS(ILOS)
                      ENDIF
                  ELSE
                      NBACKH=NBACKL+1
                      IF(BINOUT)THEN
                          CALL BNWT13(VCEN,PTHALT(ISEG,ILOS),TX(9),     &
     &                      SMTRNL,NTFLX(NBACKL)+                       &
     &                        FACTOR*(NTFLX(NBACKH)-NTFLX(NBACKL)),     &
     &                      UPFLX(NBACKL)+                              &
     &                        FACTOR*(UPFLX(NBACKH)-UPFLX(NBACKL)),     &
     &                      DNFLX(NBACKL)+                              &
     &                        FACTOR*(DNFLX(NBACKH)-DNFLX(NBACKL)),     &
     &                      SMTHML,THMCUM(ILOS),UPFLXS(NBACKL)+         &
     &                        FACTOR*(UPFLXS(NBACKH)-UPFLXS(NBACKL)),   &
     &                      DNFLXS(NBACKL)+                             &
     &                        FACTOR*(DNFLXS(NBACKH)-DNFLXS(NBACKL)),   &
     &                      SMSOLL,SUMMS(ILOS))
                      ELSEIF(NLOS.EQ.1)THEN
                          WRITE(IPR1,'(F8.2,F7.3,2F9.6,1X,1P,9E11.4)')  &
     &                      VCEN,PTHALT(ISEG,ILOS),TX(9),               &
     &                      SMTRNL,NTFLX(NBACKL)+                       &
     &                        FACTOR*(NTFLX(NBACKH)-NTFLX(NBACKL)),     &
     &                      UPFLX(NBACKL)+                              &
     &                        FACTOR*(UPFLX(NBACKH)-UPFLX(NBACKL)),     &
     &                      DNFLX(NBACKL)+                              &
     &                        FACTOR*(DNFLX(NBACKH)-DNFLX(NBACKL)),     &
     &                      SMTHML,THMCUM(ILOS),UPFLXS(NBACKL)+         &
     &                        FACTOR*(UPFLXS(NBACKH)-UPFLXS(NBACKL)),   &
     &                      DNFLXS(NBACKL)+                             &
     &                        FACTOR*(DNFLXS(NBACKH)-DNFLXS(NBACKL)),   &
     &                      SMSOLL,SUMMS(ILOS)
                      ELSEIF(ILOS.EQ.1)THEN
                          WRITE(IPR1,'(F8.2,I4,F7.3,2F9.6,1X,1P,        &
     &                      9E11.4)')VCEN,ILOS,PTHALT(ISEG,ILOS),TX(9), &
     &                      SMTRNL,NTFLX(NBACKL)+                       &
     &                        FACTOR*(NTFLX(NBACKH)-NTFLX(NBACKL)),     &
     &                      UPFLX(NBACKL)+                              &
     &                        FACTOR*(UPFLX(NBACKH)-UPFLX(NBACKL)),     &
     &                      DNFLX(NBACKL)+                              &
     &                        FACTOR*(DNFLX(NBACKH)-DNFLX(NBACKL)),     &
     &                      SMTHML,THMCUM(ILOS),UPFLXS(NBACKL)+         &
     &                        FACTOR*(UPFLXS(NBACKH)-UPFLXS(NBACKL)),   &
     &                      DNFLXS(NBACKL)+                             &
     &                        FACTOR*(DNFLXS(NBACKH)-DNFLXS(NBACKL)),   &
     &                      SMSOLL,SUMMS(ILOS)
                      ELSE
                          WRITE(IPR1,'(I12,F7.3,2F9.6,1X,1P,9E11.4)')   &
     &                      ILOS,PTHALT(ISEG,ILOS),TX(9),               &
     &                      SMTRNL,NTFLX(NBACKL)+                       &
     &                        FACTOR*(NTFLX(NBACKH)-NTFLX(NBACKL)),     &
     &                      UPFLX(NBACKL)+                              &
     &                        FACTOR*(UPFLX(NBACKH)-UPFLX(NBACKL)),     &
     &                      DNFLX(NBACKL)+                              &
     &                        FACTOR*(DNFLX(NBACKH)-DNFLX(NBACKL)),     &
     &                      SMTHML,THMCUM(ILOS),UPFLXS(NBACKL)+         &
     &                        FACTOR*(UPFLXS(NBACKH)-UPFLXS(NBACKL)),   &
     &                      DNFLXS(NBACKL)+                             &
     &                        FACTOR*(DNFLXS(NBACKH)-DNFLXS(NBACKL)),   &
     &                      SMSOLL,SUMMS(ILOS)
                      ENDIF
                  ENDIF
              ENDIF

!             K-DISTRIBUTION DEPENDENT OUTPUT:
              IF(KPRINT .AND. .NOT.NO_WRT .AND.                         &
     &          (ISEG.LE.IKOUT(ILOS) .OR. ISEG.EQ.NSEG(ILOS)))THEN
                  IF(BINOUT)THEN
                      NTKDIS=NTKDIS+1
                      WRITE(JTKDIS,REC=NTKDIS)                          &
     &                  PTHALT(ISEG,ILOS),PTHRNG(ISEG,ILOS),TX(9),      &
     &                  (TRNCUM(INTRVL),INTRVL=1,JNTRVL)
                      NRKDIS=NRKDIS+1
                      WRITE(JRKDIS,REC=NRKDIS)PTHALT(ISEG,ILOS),        &
     &                  PTHRNG(ISEG,ILOS),THMCUM(ILOS)+SUMMS(ILOS)      &
     &                  +SUMSSS(ILOS),(RADCUM(INTRVL),INTRVL=1,JNTRVL)
                  ELSE
                      WRITE(ITKDIS,TFRMT)                               &
     &                  PTHALT(ISEG,ILOS),PTHRNG(ISEG,ILOS),TX(9),      &
     &                  (TRNCUM(INTRVL),INTRVL=1,JNTRVL)
                      WRITE(IRKDIS,RFRMT)                               &
     &                  PTHALT(ISEG,ILOS),PTHRNG(ISEG,ILOS),            &
     &                  THMCUM(ILOS)+SUMMS(ILOS)+SUMSSS(ILOS),          &
     &                  (RADCUM(INTRVL),INTRVL=1,JNTRVL)
                  ENDIF
              ENDIF

!             IF TOTAL TRANSMISSION HAS DROPPED TO ZERO AND LVBND5 IS
!             FALSE, EXIT LAYER LOOP UNLESS THE CORRELATED-K APPROACH
!             IS BEING USED AND WEIGHTING FUNCTIONS ARE BEING PRINTED.
              IF(TX(9).LE.0. .AND. .NOT.LVBND5 .AND. AMOD3D.EQ.' '      &
     &          .AND. (KNTRVL.EQ.1 .OR. NOPRNT.LE.-1))GOTO 70
          ENDDO

!         LAYER LOOP EXIT
   70     CONTINUE

!         SAVE LINE-OF-SIGHT TRANSMITTANCE:
          TRNLOS(ILOS)=TX(9)

!         LINE-OF-SIGHT PATH:
          IF(IEMSCT.EQ.2 .AND. KNTRVL.GT.1)THEN
              ISEG=NSEG(ILOS)+1
              S0TRN(1,ISEG)=S0TRN(1,ISEG)*TRNCUM(1)
              TSNREF(ILOS)=SUBINT(1)*S0TRN(1,ISEG)

!             IF THE GROUND SCATTERING POINT IS IN SHADOW, THE GROUND
!             REFLECTED SOLAR IRRADIANCE, TSNREF, IS ZERO.
              IF(TSNREF(ILOS).GT.0.)THEN
                  DO INTRVL=2,JNTRVL
                      S0TRN(INTRVL,ISEG)                                &
     &                  =S0TRN(INTRVL,ISEG)*TRNCUM(INTRVL)
                      TSNREF(ILOS)                                      &
     &                  =TSNREF(ILOS)+SUBINT(INTRVL)*S0TRN(INTRVL,ISEG)
                  ENDDO
              ELSE
                  DO INTRVL=2,JNTRVL
                      S0TRN(INTRVL,ISEG)=0.
                  ENDDO
              ENDIF
          ENDIF

!         CALCULATE THE THERMAL AND SOLAR DOWNWARD SURFACE FLUX
!         TRANSMITTED FROM THE GROUND TO THE SENSOR (H1)
!         (ASSUME ISOTROPIC SURFACE ILLUMINATION FROM DIFFUSE FLUX).
          FDNTRT(ILOS)=0.
          FDNRT(ILOS)=0.
          DO INTRVL=1,JNTRVL
              FACTOR=SUBINT(INTRVL)*TRNCUM(INTRVL)
***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
              FDNTRT(ILOS)=FDNTRT(ILOS)+FACTOR*SURFT(INTRVL,ILOS)
              FDNRT(ILOS)=FDNRT(ILOS)+FACTOR*SURFS(INTRVL,ILOS)
#else
              FDNTRT(ILOS)=FDNTRT(ILOS)+FACTOR*DNF(INTRVL,1)
              FDNRT(ILOS)=FDNRT(ILOS)+FACTOR*DNFS(INTRVL,1)
#endif
!************************** END VINCENT ROSS **************************              
          ENDDO
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
          FDNRT(ILOS)=FDNTRT(ILOS)+FDNRT(ILOS)
#else
          FDNTRT(ILOS)=FDNTRT(ILOS)*TPHDIR(ILOS)/PI
          FDNRT(ILOS)=FDNTRT(ILOS)+FDNRT(ILOS)*TPHDIR(ILOS)/PI
#endif
!************************** END VINCENT ROSS **************************

!         OUTPUT ATMOSPHERIC CORRECTION DATA TO *.acd FILE:
!         (FOR UPWARD VIEWING PATHS, TDFOBS IS SET TO -1.)
          IF(DISALB .AND. TDFOBS(ILOS,1).GE.0.)THEN
              ISEG=NSEG(ILOS)+1
              BTERM=0.
              DO INTRVL=1,JNTRVL
                  CALL WRTALB(VCEN,ILOS,INTRVL,SUBINT(INTRVL),          &
     &              TDFSUN(INTRVL),S0TRN(INTRVL,ISEG)/S0,               &
     &              TDFOBS(ILOS,INTRVL),TRNCUM(INTRVL),ALBBOT(INTRVL))
                  BTERM=BTERM+SUBINT(INTRVL)*TRNCUM(INTRVL)*            &
     &              (S0*TDFSUN(INTRVL)+S0TRN(INTRVL,ISEG))              &
     &              /(1-AASALB*ALBBOT(INTRVL))
              ENDDO
              BTERM=CSNSRF(ILOS)*TPHDIR(ILOS)*BTERM/PI
          ENDIF

!         OUTPUT SURFACE TERMS TO *.r_k FILE:
!         ***  not yet compatible with MLOS option  ***
          IF(KPRINT .AND. .NOT.NO_WRT)THEN
              IF(TPTEMP(ILOS).GT.0. .AND. TPHDIR(ILOS).LT.1.)THEN

!                 THERMAL EMISSION AT BOUNDARY:
                  GREY=BBFN(TPTEMP(ILOS),VCEN)*(1-TPHDIR(ILOS))
              ELSE

!                 NO THERMAL EMISSION AT BOUNDARY:
                  GREY=0.
              ENDIF
              IF(BINOUT)THEN

!                 UPDATE K-DEPENDENT DATA BINARY FILE HEADER:
                  NRKDIS=NRKDIS+1
                  WRITE(JTKDIS,REC=NTHEAD)                              &
     &              N4BYTE,NTREC,NRANGE,NTKDIS,WDKDIS,V0KDIS,.TRUE.
                  WRITE(JRKDIS,REC=NRHEAD)                              &
     &              N4BYTE,NRREC,NRANGE,NRKDIS,WDKDIS,V0KDIS,.TRUE.
                  IF(.NOT.GROUND(ILOS))THEN

!                     SURFACE EMISSION WITH NO REFLECTION.
                      WRITE(JRKDIS,REC=NRKDIS)PTHALT(NSEG(ILOS),ILOS),  &
     &                  PTHRNG(NSEG(ILOS),ILOS),GREY*TRNLOS(ILOS),      &
     &                  (GREY*TRNCUM(INTRVL),INTRVL=1,JNTRVL)
                  ELSEIF(IEMSCT.EQ.1)THEN

!                     SURFACE EMISSION + DIFFUSE THERMAL REFLECTION.
                      WRITE(JRKDIS,REC=NRKDIS)PTHALT(NSEG(ILOS),ILOS),  &
     &                  PTHRNG(NSEG(ILOS),ILOS),GREY*TRNLOS(ILOS)       &
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &                  +FDNTRT(ILOS),(TRNCUM(INTRVL)*SURFT(INTRVL,ILOS)
     &                  +GREY,INTRVL=1,JNTRVL)
#else
     &                  +FDNTRT(ILOS),(TRNCUM(INTRVL)*(TPHDIR(ILOS)     &
     &                  *DNF(INTRVL,1)/PI+GREY),INTRVL=1,JNTRVL)
#endif
!************************** END VINCENT ROSS ************************** 
                  ELSE

!                     SURFACE EMISSION + SOLAR & THERMAL REFLECTION.
                      IF(TSNREF(ILOS).GT.0.)THEN

!                         DIRECT SOLAR REFLECTION SURFACE TERM.
                          SURFAC=TPBRDF(ILOS)*CSNSRF(ILOS)/PI
                      ELSE

!                         NO DIRECT SOLAR REFLECTION SURFACE TERM.
                          SURFAC=0.
                      ENDIF
                      WRITE(JRKDIS,REC=NRKDIS)PTHALT(NSEG(ILOS),ILOS),  &
     &                  PTHRNG(NSEG(ILOS),ILOS),GREY*TRNLOS(ILOS)       &
     &                  +SURFAC*TSNREF(ILOS)+FDNRT(ILOS),               &
     &                  (GREY*TRNCUM(INTRVL)+SURFAC*S0TRN(INTRVL,ISEG)  &
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &                  + (SURFT(INTRVL,ILOS)+SURFS(INTRVL,ILOS))
     &                  *TRNCUM(INTRVL),INTRVL=1,JNTRVL)
#else
     &                  +(DNF(INTRVL,1)+DNFS(INTRVL,1))                 &
     &                  *TRNCUM(INTRVL)*TPHDIR(ILOS)/PI,INTRVL=1,JNTRVL)
#endif
!************************** END VINCENT ROSS **************************
                  ENDIF
              ELSE
                  RFRMT(2:2)='/'
                  IF(.NOT.GROUND(ILOS))THEN

!                     SURFACE EMISSION WITH NO REFLECTION.
                      WRITE(IRKDIS,RFRMT)PTHALT(NSEG(ILOS),ILOS),       &
     &                  PTHRNG(NSEG(ILOS),ILOS),GREY*TRNLOS(ILOS),      &
     &                  (GREY*TRNCUM(INTRVL),INTRVL=1,JNTRVL)
                  ELSEIF(IEMSCT.EQ.1)THEN

!                     SURFACE EMISSION + DIFFUSE THERMAL REFLECTION.
                      WRITE(IRKDIS,RFRMT)PTHALT(NSEG(ILOS),ILOS),       &
     &                  PTHRNG(NSEG(ILOS),ILOS),GREY*TRNLOS(ILOS)       &
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &                  +FDNTRT(ILOS),(TRNCUM(INTRVL)*SURFT(INTRVL,ILOS)
     &                  +GREY,INTRVL=1,JNTRVL)
#else
     &                  +FDNTRT(ILOS),(TRNCUM(INTRVL)*(TPHDIR(ILOS)     &
     &                  *DNF(INTRVL,1)/PI+GREY),INTRVL=1,JNTRVL)
#endif
!************************** END VINCENT ROSS ************************** 
                  ELSE

!                     SURFACE EMISSION + SOLAR & THERMAL REFLECTION.
                      IF(TSNREF(ILOS).GT.0.)THEN

!                         DIRECT SOLAR REFLECTION SURFACE TERM.
                          SURFAC=TPBRDF(ILOS)*CSNSRF(ILOS)/PI
                      ELSE

!                         NO DIRECT SOLAR REFLECTION SURFACE TERM.
                          SURFAC=0.
                      ENDIF
                      WRITE(IRKDIS,RFRMT)PTHALT(NSEG(ILOS),ILOS),       &
     &                  PTHRNG(NSEG(ILOS),ILOS),GREY*TRNLOS(ILOS)       &
     &                  +SURFAC*TSNREF(ILOS)+FDNRT(ILOS),               &
     &                  (GREY*TRNCUM(INTRVL)+SURFAC*S0TRN(INTRVL,ISEG)  &
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &                  + (SURFT(INTRVL,ILOS)+SURFS(INTRVL,ILOS))
     &                  *TRNCUM(INTRVL),INTRVL=1,JNTRVL)
#else
     &                  +(DNF(INTRVL,1)+DNFS(INTRVL,1))                 &
     &                  *TRNCUM(INTRVL)*TPHDIR(ILOS)/PI,INTRVL=1,JNTRVL)
#endif
!************************** END VINCENT ROSS **************************
                  ENDIF
                  RFRMT(2:2)=' '
              ENDIF
          ENDIF

!     END LOOP OVER LINES-OF-SIGHT:
      ENDDO

!     RETURN TO TRANS:
      RETURN
      END
