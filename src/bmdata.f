      SUBROUTINE BMDATA(NLOS,IBINPT)

!     BMDATA (CALLED BY TRANS) MAKES THE INITIAL BAND MODEL TAPE READ
!     AND CALCULATES WAVENUMBER-INDEPENDENT PARAMETERS FOR USE BY BMOD
      IMPLICIT NONE

!     INPUT ARGUMENTS:
!       NLOS     NUMBER OF LINE-OF-SIGHT PATHS.
!       IBINPT   BIN NUMBER OF CURRENT SPECTRAL POINT.
!                (CENTER FREQUENCY = IBINPT * BNDWID + OSHIFT).
      INTEGER NLOS,IBINPT

!     PARAMETER MEXT DENOTES THE NUMBER OF MODTRAN "SPECIES".
!     THIS INCLUDES THE 12 ORIGINAL BAND MODEL PARAMETER MOLECULES
!     PLUS A HOST OF OTHER ABSORPTION AND/OR SCATTERING SOURCES.
      INCLUDE 'PARAMS.h'

!     COMMONS:
      INCLUDE 'SEGDAT.h'
      INCLUDE 'YPROP.h'
      INCLUDE 'IFIL.h'
      INCLUDE 'WSOL.h'
      INCLUDE 'BMHEAD.h'
      INCLUDE 'BMDAT.h'
      INCLUDE 'BMPATH.h'
      INCLUDE 'BMPTHS.h'

!     /BMDCMX/
      INTEGER BINXTL,MOLXTL,ALFXTL
      REAL SDX1TL,SDX2TL
      COMMON/BMDCMX/BINXTL,MOLXTL,ALFXTL,SDX1TL(NTEMPX),SDX2TL(NTEMPX)

!     /BMDATY/
!       BINYCN   Y-MOLECULE LINE CENTER SPECTRAL BIN NUMBER.
!       SDYCN    Y-MOLECULE ABSORPTION COEFFICIENTS [CM-1 / ATM].
!       ALFYCN   Y-MOLECULE FOREIGN-BROADENED LORENTZ HALF WIDTH [CM-1].
!       ODYCN    Y-MOLECULE RECIPROCAL LINE SPACING PARAMETER [CM].
!       BINYTL   Y-MOLECULE LINE TAIL SPECTRAL BIN NUMBER.
!       SDY0TL   Y-MOLECULE PADE NUMERATOR ZERO-ORDER TERM [CM-1 / ATM].
!       SDY1TL   Y-MOLECULE PADE NUMERATOR 1ST-ORDER TERM [CM-1 / ATM].
!       SDY2TL   Y-MOLECULE PADE NUMERATOR 2ND-ORDER TERM [CM-1 / ATM].
!       SDY3TL   Y-MOLECULE PADE DENOMINATOR 1ST-ORDER TERM.
!       SDY4TL   Y-MOLECULE PADE DENOMINATOR 2ND-ORDER TERM.
      INTEGER BINYCN,ALFYCN,BINYTL
      REAL SDYCN,ODYCN,SDY0TL,SDY1TL,SDY2TL,SDY3TL,SDY4TL
      COMMON/BMDATY/BINYCN(MMOLY),SDYCN(MTEMP,MMOLY),ALFYCN(MMOLY),     &
     &  ODYCN(MTEMP,MMOLY),BINYTL(MMOLY),SDY0TL(MTEMP,MPRES,MMOLY),     &
     &         SDY1TL(MTEMP,MPRES,MMOLY),SDY2TL(MTEMP,MPRES,MMOLY),     &
     &         SDY3TL(MTEMP,MPRES,MMOLY),SDY4TL(MTEMP,MPRES,MMOLY)

!     /CARD1/
!       MODEL    MODEL ATMOSPHERE INDEX.
!       ITYPE    SLANT PATH TYPE.
!       IEMSCT   RADIATIVE TRANSFER MODE.
!                  0 FOR TRANSMITTANCE
!                  1 FOR THERMAL EMISSION ONLY
!                  2 FOR THERMAL EMISSION PLUS SOLAR SCATTER
!                  3 FOR TRANSMITTED SOLAR IRRADIANCE
!                  4 FOR SOLAR SCATTER ONLY
!       M1       MODEL ATMOSPHERE FOR PRESSURE & TEMPERATURE PROFILES.
!       M2       MODEL ATMOSPHERE FOR H2O PROFILE.
!       M3       MODEL ATMOSPHERE FOR O3 PROFILE.
!       I_RD2C   READ CARD 2C, 2C1, ... IF EQUAL 1; SKIP IF EQUAL TO 0.
!       NOPRNT   PRINT FLAG.
!       MODTRN   MODTRAN BAND MODEL FLAG.
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT,MODTRN

!     /CNTRL/
!       NSEG     NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
!       THERML   FLAG TO CALCULATE THERMAL SCATTER.
      INTEGER NSEG,ML,MLFLX,IMULT
      LOGICAL THERML
      COMMON/CNTRL/NSEG(0:MLOSP1),ML,MLFLX,IMULT,THERML

!     /CJM5/
!       AMOD3D   FLAG INDICATING OUTPUT DATABASE FILE TYPE:
      CHARACTER AMOD3D*1
      COMMON/CJM5/AMOD3D

!     /PATH/
!       PTHCOS   COSINE OF PATH ZENITH AT PATH BOUNDARIES.
!       PTHZEN   PATH ZENITH AT PATH BOUNDARIES [DEG].
!       PTHECA   SENSOR TO PATH EARTH CENTER ANGLE [DEG].
!       PTHALT   ALTITUDES AT PATH BOUNDARIES [KM].
!       PTH_MS   ALTITUDES AT PATH BOUNDARIES FOR THE MS PATH.
!       PTHSEG   PATH SEGMENT LENGTH [KM].
!       PTHRNG   SENSOR TO PATH BOUNDARY RANGE [KM].
!       JMAX     NUMBER OF DISTINCT LOS PATH SEGMENT ENDPOINT ALTITUDES.
!       IKHMIN   PATH BOUNDARY INDEX OF PATH MINIMUM ALTITUDE.
!       IKHMAX   PATH BOUNDARY INDEX OF PATH MAXIMUM ALTITUDE.
!       IKOUT    NUMBER OF PATH BOUNDARIES K DATA IS OUTPUT.
!       NTKDIS   RECORD NUMBER FOR K-DISTRIBUTION TRANSMITTANCE FILE.
!       NRKDIS   RECORD NUMBER FOR K-DISTRIBUTION RADIANCE FILE.
!       MAPPTH   MAPPING FROM PATH SEGMENT MIDPOINT TO VERTICAL LAYER.
!       IPTHHT   ALTITUDES (HEIGHTS) AT PATH BOUNDARIES [M].
!       LOWALT   VERTICAL LAYER BOUNDARY INDEX AT OR JUST BELOW PTHALT.
!       FACALT   ALTITUDE INTERPOLATION FRACTION FOR PTHALT
!       PATH_T   TEMPERATURE AT PATH BOUNDARIES [K].
!       PATH_P   PRESSURE AT PATH BOUNDARIES [ATM].
!       PTHRH    RELATIVE HUMIDITY AT PATH BOUNDARIES [K].
!       LSSGEO   LOGICAL FLAG, .TRUE. FOR SOLAR PATHS.
!       LTANMX   LOGICAL FLAG, .TRUE. IF PATH HAS A TANGENT MAXIMUM.
      DOUBLE PRECISION PTHCOS,PTHZEN,PTHECA,PTHALT,PTH_MS,PTHSEG,PTHRNG
      INTEGER JMAX,IKHMIN,IKHMAX,IKOUT,NTKDIS,NRKDIS,MAPPTH,            &
     &  IPTHHT,LOWALT
      REAL FACALT,PATH_T,PATH_P,PTHRH
      LOGICAL LSSGEO,LTANMX
      COMMON/PATH/PTHCOS(0:LAYTWO),PTHZEN(0:LAYTWO),PTHECA(0:LAYTWO),   &
     &  PTHALT(0:LAYTWO,1:MLOS),PTH_MS(0:LAYDIM),PTHSEG(LAYTWO),        &
     &  PTHRNG(0:LAYTWO,1:MLOS),JMAX,IKHMIN(MLOS),IKHMAX(MLOS),         &
     &  IKOUT(MLOS),MAPPTH(LAYTWO,1:MLOS),IPTHHT(0:LAYTWO),NTKDIS,      &
     &  NRKDIS,LOWALT(0:LAYTWO,1:MLOS),FACALT(0:LAYTWO,1:MLOS),         &
     &  PATH_T(0:LAYTWO,1:MLOS),PATH_P(0:LAYTWO,1:MLOS),                &
     &  PTHRH(0:LAYTWO,1:MLOS),LSSGEO,LTANMX

!     /MC_MOL/
!       JT_MC    BAND MODEL TEMP INTERPOLATION INDEX AT LOS LEVELS.
!       FT_MC    BAND MODEL TEMP INTERPOLATION FRACTION AT LOS LEVELS.
!       KT_MC    CROSS-SECTION TEMP INTERPOLATION INDEX AT LOS LEVELS.
!       GT_MC    X-SECTION TEMP INTERPOLATION FRACTION AT LOS LEVELS.
!       P2_MC    PRESSURE^2 INTERPOLATION FRACTION AT PATH BOUNDARIES.
      INTEGER JT_MC,KT_MC
      REAL FT_MC,GT_MC,P2_MC
      COMMON/MC_MOL/JT_MC(0:LAYTWO),FT_MC(0:LAYTWO),                    &
     &              KT_MC(0:LAYTWO),GT_MC(0:LAYTWO),P2_MC(0:LAYTWO)

!     LOCAL FUNCTIONS:
!       GTSTRT   RETURNS RECORD NUMBER FOR START OF IBINPT DATA.
      INTEGER GTSTRT

!     LOCAL VARIABLES:
!       IALFS    SELF BROADENED HALF-WIDTH (CURRENTLY NOT USED) [CM-1].
!       IALFYS   SELF BROADENED HALF-WIDTH (CURRENTLY NOT USED) [CM-1].
!       ILOS     LOOP INDEX FOR OBSERVER ZENITH ANGLES.
!       IOS      IOSTAT OUTPUT.
      INTEGER INTBIN,ITEMP,ISEG,IPRES,IMOLT,IALFS,IALFYS,IMOLY,ILOS,IOS
      REAL TT,P1SQ,PDENOM

!     DATA:
!       TCROSS   ABSORPTION CROSS-SECTION TEMPERATURE GRID.
      REAL TCROSS(NTEMPX)
      DATA TCROSS/180.,205.,230.,255.,280.,305./

!     REWIND THE FORMATTED BAND MODEL DATA FILE, UNIT ITBX.
      REWIND(ITBX)

!     PERFORM THE STANDARD LOWTRAN CALCULATION IF NO BAND MODEL DATA
!     EXISTS FOR THE CHOSEN FREQUENCY RANGE.
      IF(IBINPT.GT.MBINBM)THEN
         WRITE(IPR,'(//2A)')' (THE BAND MODEL TAPE DOES NOT',           &
     &        ' HAVE DATA IN THE REQUESTED WAVENUMBER RANGE.)'
         RETURN
      ENDIF

!     FIND 1ST RECORD (IP) IN BAND MODEL FILES FOR FREQUENCY BIN IBINPT.
      IPCN=GTSTRT(IBINPT,ITBCN,LRECCN)
      IPTL=GTSTRT(IBINPT,ITBTL,LRECTL)

!     READ THE FIRST RECORDS
      READ(ITBCN,REC=IPCN)IBINCN,IMOLCN,(SDZCN(ITEMP),ITEMP=1,NTEMP),   &
     &                    IALFCN,IALFS,(ODZCN(ITEMP),ITEMP=1,NTEMP)
      READ(ITBTL,REC=IPTL)IBINTL,IMOLTL,                                &
     &  ((SDZ0TL(ITEMP,IPRES),ITEMP=1,NTEMP),IPRES=1,NPRESS),           &
     &  ((SDZ1TL(ITEMP,IPRES),ITEMP=1,NTEMP),IPRES=1,NPRESS),           &
     &  ((SDZ2TL(ITEMP,IPRES),ITEMP=1,NTEMP),IPRES=1,NPRESS),           &
     &  ((SDZ3TL(ITEMP,IPRES),ITEMP=1,NTEMP),IPRES=1,NPRESS),           &
     &  ((SDZ4TL(ITEMP,IPRES),ITEMP=1,NTEMP),IPRES=1,NPRESS)

!     READ THE BAND MODEL PARAMETERS (ABSORPTION CROSS-SECTIONS ONLY)
!     AND POSITION AT THE PROPER PLACE OF EACH FILE OF EACH X-SPECIES.
   10 CONTINUE
      READ(ITBX,*,IOSTAT=IOS)BINXTL,MOLXTL,                             &
     &                       (SDX1TL(ITEMP),ITEMP=1,NTEMPX)
      IF(IOS.EQ.0)THEN
          READ(ITBX,*)ALFXTL,(SDX2TL(ITEMP),ITEMP=1,NTEMPX)
          IF(IBINPT.GT.BINXTL)GOTO 10
      ENDIF

!     LOOP OVER Y-MOLECULES WITH CENTER AND TAIL PARAMETERS.
!     FIRST READ THE CENTER FILE (SECOND INDEX 2), WHOSE FIRST
!     THREE LINES ARE HEADER.  THE TAIL FILE (SECOND INDEX 1) ALSO
!     HAS THREE LINES OF HEADER. THE FILES HAVE DIFFERENT FORMATS.
!     MOLECULAR WEIGHT ADDED TO FIRST LINE OF THE HEADER (6/1/2003)
!     (NOTE THAT "ITEMP" IS READ IN AS A DUMMY INTEGER).
      DO IMOLY=1,NMOLYS
          REWIND(ITBY(IMOLY,1))
          READ(ITBY(IMOLY,1),*)
          READ(ITBY(IMOLY,1),*)
          READ(ITBY(IMOLY,1),*)
          REWIND(ITBY(IMOLY,2))
          READ(ITBY(IMOLY,2),*)
          READ(ITBY(IMOLY,2),*)
          READ(ITBY(IMOLY,2),*)
   20     CONTINUE
          READ(ITBY(IMOLY,2),*,IOSTAT=IOS)INTBIN,ITEMP,                 &
     &      (SDYCN(ITEMP,IMOLY),ITEMP=1,NTEMP),ALFYCN(IMOLY),IALFYS,    &
     &      (ODYCN(ITEMP,IMOLY),ITEMP=1,NTEMP)
          IF(IOS.EQ.0)THEN
              IF(IBINPT.GT.INTBIN)GOTO 20
              BINYCN(IMOLY)=INTBIN
          ENDIF
   30     CONTINUE
          READ(ITBY(IMOLY,1),*,IOSTAT=IOS)INTBIN,ITEMP,                 &
     &      ((SDY0TL(ITEMP,IPRES,IMOLY),ITEMP=1,NTEMP),IPRES=1,NPRESS), &
     &      ((SDY1TL(ITEMP,IPRES,IMOLY),ITEMP=1,NTEMP),IPRES=1,NPRESS), &
     &      ((SDY2TL(ITEMP,IPRES,IMOLY),ITEMP=1,NTEMP),IPRES=1,NPRESS), &
     &      ((SDY3TL(ITEMP,IPRES,IMOLY),ITEMP=1,NTEMP),IPRES=1,NPRESS), &
     &      ((SDY4TL(ITEMP,IPRES,IMOLY),ITEMP=1,NTEMP),IPRES=1,NPRESS)
          IF(IOS.EQ.0)THEN
              IF(IBINPT.GT.INTBIN)GOTO 30
              BINYTL(IMOLY)=INTBIN
          ENDIF
      ENDDO

!     LOOP OVER Y-MOLECULES WITH CROSS-SECTIONS IN EXTERNAL FILES.
      DO IMOLY=NMOLYS+1,NMOLY
          REWIND(ITBY(IMOLY,1))
   40     CONTINUE
          READ(ITBY(IMOLY,1),*,IOSTAT=IOS)                              &
     &      BINYTL(IMOLY),(SDY1TL(ITEMP,1,IMOLY),ITEMP=1,NTEMPX)
          IF(IOS.EQ.0 .AND. IBINPT.GT.BINYTL(IMOLY))GOTO 40
      ENDDO

!     SET TEMPERATURE INTERPOLATION INDICES FOR EACH SEGMENT:
      IF(NPRESS.EQ.2)THEN
          P1SQ=PBAND(1)**2
          PDENOM=P1SQ-PBAND(2)**2
      ELSEIF(NPRESS.GT.2)THEN
          STOP 'NPRESS EXCEEDS 2'
      ENDIF

!     LOOP OVER LINE-OF-SIGHT PATHS:
      DO ILOS=1,NLOS
          DO ISEG=1,NSEG(ILOS)
              TT=TSEG(ISEG,ILOS)
              CALL INTERP(JTLOS(ISEG,ILOS),                             &
     &                    FTLOS(ISEG,ILOS),TT,NTEMP,TBAND)
              CALL INTERP(KTLOS(ISEG,ILOS),                             &
     &                    GTLOS(ISEG,ILOS),TT,NTEMPX,TCROSS)

!             SET LINE-OF-SIGHT SCALING PARAMETERS:
!               T5LOS   LAYER TEMPERATURE OVER 273.15K RAISED TO 0.5
!               PTLOS   LAYER TEMPERATURE OVER 273.15K RAISED TO -0.75
!                       TIMES THE LAYER PRESSURE IN ATMOSPHERES.
!               P2LOS   P-SQUARED INTERPOLATION FACTOR:
!                       (P1.0**2-PLAYER**2)/(P1.0**2-P0.1**2)
              TT=SQRT(TT/TZERO)
              T5LOS(ISEG,ILOS)=TT
              PTLOS(ISEG,ILOS)=PATM(ISEG,ILOS)/(SQRT(TT)*TT)
              IF(NPRESS.LE.1 .OR. PATM(ISEG,ILOS).GT.PBAND(1))THEN
                  P2LOS(ISEG,ILOS)=0.
              ELSEIF(NPRESS.EQ.2)THEN
                  P2LOS(ISEG,ILOS)=(P1SQ-PATM(ISEG,ILOS)**2)/PDENOM
              ENDIF
          ENDDO
      ENDDO

!     LOOP OVER VERTICAL MULTIPLE SCATTERING PATH SEGMENTS:
      DO ISEG=1,NSEG(MLOSP1)
          TT=TSEGMS(ISEG)
          CALL INTERP(JTMS(ISEG),FTMS(ISEG),TT,NTEMP,TBAND)
          CALL INTERP(KTMS(ISEG),GTMS(ISEG),TT,NTEMPX,TCROSS)

!         SET VERTICAL MULITPLE SCATTERING PATH SCALING PARAMETERS:
          TT=SQRT(TT/TZERO)
          T5MS(ISEG)=TT
          PTMS(ISEG)=PATMMS(ISEG)/(SQRT(TT)*TT)
          IF(NPRESS.LE.1 .OR. PATMMS(ISEG).GT.PBAND(1))THEN
              P2MS(ISEG)=0.
          ELSEIF(NPRESS.EQ.2)THEN
              P2MS(ISEG)=(P1SQ-PATMMS(ISEG)**2)/PDENOM
          ENDIF
      ENDDO

!     IF NO SOLAR SCATTER (SINGLE OR MULTIPLE), RETURN
      IF(IEMSCT.NE.2)RETURN

!     SET UP INTERPOLATIONS FOR SUN TO LOS PATHS:
      DO ILOS=1,NLOS
          DO ISEG=1,NSEG(ILOS)+1

!             SKIP SET UP IF THE SUN IS IN THE SHADE.
              IF(WSPTH(36,ISEG,ILOS).GE.0.)THEN
                  DO IMOLT=1,NMOLT
                      TT=TSSEG(IMOLT,ISEG,ILOS)

!                     SET UP INTERPOLATIONS FOR SOLAR PATHS FROM LOS'S:
                      IF((IMOLT.GT.NMOLXT .AND. IMOLT.LE.NMOLXT+NMOLYS) &
     &                  .OR. IMOLT.LE.NMOL)THEN

!                         BAND MODEL SPECIES:
                          CALL INTERP(JTLOSS(IMOLT,ISEG,ILOS),          &
     &                      FTLOSS(IMOLT,ISEG,ILOS),TT,NTEMP,TBAND)
                          TT=SQRT(TT/TZERO)
                          T5LOSS(IMOLT,ISEG,ILOS)=TT
                          PTLOSS(IMOLT,ISEG,ILOS)                       &
     &                      =PSATM(IMOLT,ISEG,ILOS)/(SQRT(TT)*TT)
                          IF(NPRESS.LE.1 .OR.                           &
     &                      PSATM(IMOLT,ISEG,ILOS).GT.PBAND(1))THEN
                              P2LOSS(IMOLT,ISEG,ILOS)=0.
                          ELSEIF(NPRESS.EQ.2)THEN
                              P2LOSS(IMOLT,ISEG,ILOS)                   &
     &                          =(P1SQ-PSATM(IMOLT,ISEG,ILOS)**2)/PDENOM
                          ENDIF
                      ELSE

!                         CROSS-SECTION SPECIES:
                          CALL INTERP(KTLOSS(IMOLT,ISEG,ILOS),          &
     &                      GTLOSS(IMOLT,ISEG,ILOS),TT,NTEMPX,TCROSS)
                      ENDIF
                  ENDDO
              ENDIF
          ENDDO
      ENDDO

!     SET UP INTERPOLATIONS FOR SOLAR PATHS TO VERTICAL MS PATH LEVELS:
      DO ISEG=1,NSEG(MLOSP1)+1

!         SKIP SET UP IF THE SUN IS IN THE SHADE.
          IF(WSPTHM(36,ISEG).GE.0.)THEN
              DO IMOLT=1,NMOLT
                  TT=TSSEGM(IMOLT,ISEG)

!                 SET UP INTERPOLATIONS FOR SOLAR PATHS FROM MS PATH:
                  IF((IMOLT.GT.NMOLXT .AND. IMOLT.LE.NMOLXT+NMOLYS)     &
     &              .OR. IMOLT.LE.NMOL)THEN

!                     BAND MODEL SPECIES:
                      CALL INTERP(JTMSS(IMOLT,ISEG),                    &
     &                            FTMSS(IMOLT,ISEG),TT,NTEMP,TBAND)
                      TT=SQRT(TT/TZERO)
                      T5MSS(IMOLT,ISEG)=TT
                      PTMSS(IMOLT,ISEG)=PSATMM(IMOLT,ISEG)/(SQRT(TT)*TT)
                      IF(NPRESS.LE.1 .OR.                               &
     &                  PSATMM(IMOLT,ISEG).GT.PBAND(1))THEN
                          P2MSS(IMOLT,ISEG)=0.
                      ELSEIF(NPRESS.EQ.2)THEN
                          P2MSS(IMOLT,ISEG)                             &
     &                      =(P1SQ-PSATMM(IMOLT,ISEG)**2)/PDENOM
                      ENDIF
                  ELSE

!                     CROSS-SECTION SPECIES:
                      CALL INTERP(KTMSS(IMOLT,ISEG),                    &
     &                            GTMSS(IMOLT,ISEG),TT,NTEMPX,TCROSS)
                  ENDIF
              ENDDO
          ENDIF
      ENDDO

!     SET UP LINE-OF-SIGHT BOUNDARY INTERPOLATIONS FOR MCSCENE DATABASE.
      IF(AMOD3D.NE.'M')RETURN
      DO ISEG=0,NSEG(1)
          TT=PATH_T(ISEG,1)
          CALL INTERP(JT_MC(ISEG),FT_MC(ISEG),TT,NTEMP,TBAND)
          CALL INTERP(KT_MC(ISEG),GT_MC(ISEG),TT,NTEMPX,TCROSS)
          IF(NPRESS.LE.1 .OR. PATH_P(ISEG,1).GT.PBAND(1))THEN
              P2_MC(ISEG)=0.
          ELSEIF(NPRESS.EQ.2)THEN
              P2_MC(ISEG)=(P1SQ-PATH_P(ISEG,1)**2)/PDENOM
          ENDIF
      ENDDO

!     RETURN TO TRANS:
      RETURN
      END

      SUBROUTINE INTERP(IND_UP,FRAC,VALUE,NARRAY,ARRAY)

!     INTERP determines an array interpolation upper index and fraction.
!     Thus, unless VALUE < ARRAY(1) or VALUE > ARRAY(NARRAY), then

!     VALUE = ARRAY(IND_UP) + FRAC * [ ARRAY(IND_UP-1) - ARRAY(IND_UP) ]
      IMPLICIT NONE

!     INPUT ARGUMENTS:
!       VALUE    INTERPOLATION TARGET VALUE.
!       NARRAY   NUMBER OF ARRAY ELEMENTS.
!       ARRAY    MONOTONICALLY INCREASING ARRAY OF VALUES.
      REAL VALUE,ARRAY(*)
      INTEGER NARRAY

!     OUTPUT ARGUMENTS:
!       IND_UP   INTERPOLATION UPPER INDEX.
!       FRAC     INTERPOLATION FRACTION (0 FOR UPPER INDEX VALUE).
      INTEGER IND_UP
      REAL FRAC

!     CHECK LIMITS:
      IF(VALUE.LE.ARRAY(1))THEN
          IND_UP=2
          FRAC=1.
      ELSEIF(VALUE.GE.ARRAY(NARRAY))THEN
          IND_UP=NARRAY
          FRAC=0.
      ELSE

!         FIND INTERPOLATION VALUES:
          DO IND_UP=2,NARRAY-1
              IF(VALUE.LE.ARRAY(IND_UP))THEN
                  FRAC=(ARRAY(IND_UP)-VALUE)                            &
     &                /(ARRAY(IND_UP)-ARRAY(IND_UP-1))
                  RETURN
              ENDIF
          ENDDO
          FRAC=(ARRAY(IND_UP)-VALUE)/(ARRAY(IND_UP)-ARRAY(IND_UP-1))
      ENDIF
      RETURN
      END
