      LOGICAL FUNCTION H1_VEC(IMULT,IPRMSV,H1SAV,H2SAV,H1ALT,H2ALT,     &
     &  OBSZEN,BETA,BCKZEN,REARTH,TRUEAZ,H1LATX,H1LONX,H1AZMX)

!     H1_VEC DETERMINES THE LATITUDE, LONGITUDE AND TRUE PATH AZIMUTH
!     H1ALT FOR THE MULTIPLE LINE-OF-SIGHT OPTION.  A VALUE OF FALSE
!     IS RETURNED IF UNIQUE LATITUDE AND LONGITUDE DO NOT EXIST.
      IMPLICIT NONE

!     INPUT ARGUMENTS:
!       IMULT    MULTIPLE SCATTERING FLAG (1=AT SENSOR, -1=AT TARGET).
!       IPRMSV   SAVED VALUE OF IPARM INPUT.
!       H1SAV    SAVED VALUE OF INPUT H1ALT FOR CURRENT LOS [KM].
!       H2SAV    SAVED VALUE OF INPUT H2ALT FOR CURRENT LOS [KM].
!       H1ALT    SENSOR ALTITUDE AFTER CALL TO ROUTINE GEO [KM].
!       H2ALT    TARGET ALTITUDE AFTER CALL TO ROUTINE GEO [KM].
!       OBSZEN   OBSERVER ZENITH ANGLE FROM H1ALT TO H2ALT [DEG].
!       BETA     EARTH CENTER ANGLE BETWEEN H1ALT AND H2ALT [DEG].
!       BCKZEN   ZENITH ANGLE FOR PATH FROM H2ALT BACK TO H1ALT [DEG].
!       REARTH   EARTH RADIUS [KM].
!       TRUEAZ   PATH TRUE AZIMUTH AT H1SAV (IPRMSV<3) OR
!                AT H2SAV (IPRMSV>9) [DEG EAST OF NORTH].
      INTEGER IMULT,IPRMSV
      DOUBLE PRECISION H1SAV,H2SAV,H1ALT,H2ALT,OBSZEN,BETA,BCKZEN,      &
     &  REARTH,TRUEAZ

!     OUTPUT ARGUMENTS:
!       H1LATX   LATITUDE AT H1ALT [DEG NORTH OF EQUATOR].
!       H1LONX   LONGITUDE AT H1ALT [DEG WEST OF GREENWICH].
!       H1AZMX   TRUE PATH AZIMUTH ANGLE AT H1ALT [DEG EAST OF NORTH].
      DOUBLE PRECISION H1LATX,H1LONX,H1AZMX

!     COMMONS:
      INCLUDE 'IFIL.h'

!     /LATLON/
!       H1LAT    ORIGINAL OBSERVER LATITUDE [DEG NORTH OF EQUATOR].
!       H1LON    ORIGINAL OBSERVER LONGITUDE [DEG WEST OF GREENWICH].
!       H2LAT    ORIGINAL TARGET LATITUDE [DEG NORTH OF EQUATOR].
!       H2LON    ORIGINAL TARGET LONGITUDE [DEG WEST OF GREENWICH].
      DOUBLE PRECISION H1LAT,H1LON,H2LAT,H2LON
      COMMON/LATLON/H1LAT,H1LON,H2LAT,H2LON

!     /DCNSTN/
!       DRIGHT   SMALLEST DOUBLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
!       DPDEG    NUMBER OF DEGREES IN ONE RADIAN IN DOUBLE PRECISION
      DOUBLE PRECISION DRIGHT,DPDEG
      COMMON/DCNSTN/DRIGHT,DPDEG

!     LOCAL VARIABLES:
!       ECA_H1   EARTH CENTER ANGLE FROM H1SAV TO H1ALT [DEG].
!       ECA_H2   EARTH CENTER ANGLE FROM H1ALT TO H2SAV [DEG].
!       H1LATS   LATITUDE AT H1SAV [DEG NORTH OF EQUATOR].
!       H1LONS   LONGITUDE AT H1SAV [DEG WEST OF GREENWICH].
!       H2LATS   LATITUDE AT H2SAV [DEG NORTH OF EQUATOR].
!       H2LONS   LONGITUDE AT H2SAV [DEG WEST OF GREENWICH].
!       NSOLN    NUMBER OF POSSIBLE VALUES FOR H2LATS & H2LONS.
      DOUBLE PRECISION ECA_H1,ECA_H2,H1LATS,H1LONS,H2LATS,H2LONS
      INTEGER NSOLN

!     FUNCTIONS:
!       LOCAT2   RETURNS TRUE IF UNIQUE INITIAL LAT/LONG CAN BE FOUND
!                GIVEN A FINAL LAT/LONG, AN INITIAL TRUE AZIMUTH, AND
!                AN EARTH CENTERED ANGLE.
      LOGICAL LOCAT2

!     INITIAL ROUTINE RESULT TO SUCCESS:
      H1_VEC=.TRUE.

!     SENSOR OR TARGET BASED MULTIPLE SCATTER?
      IF(IMULT.EQ.1)THEN

!         LAT/LONG AT H1SAV ARE FIXED:  WAS ORIGINAL H1ALT REDUCED?
          IF(H1SAV.LE.H1ALT)THEN

!             SET LATITUDE AND LONGITUDE:
              H1LATX=H1LAT
              H1LONX=H1LON
              IF(IPRMSV.LE.2)THEN

!                 SENSOR BASED AZIMUTH:
                  H1AZMX=TRUEAZ
                  RETURN
              ENDIF

!             TARGET BASED AZIMUTH: DETERMINE H1SAV-TO-H2SAV ANGLE.
              ECA_H2=BETA

!             INCLUDE H2ALT-TO-H2SAV IN EARTH CENTER ANGLE:
              IF(H2SAV.GT.H2ALT)ECA_H2=ECA_H2+180-BCKZEN-DPDEG          &
     &          *ASIN(SIN(BCKZEN/DPDEG)*(H2ALT+REARTH)/(H2SAV+REARTH))

!             GIVEN THE H2SAV-TO-H1SAV TRUE AZIMUTH, TRY TO
!             DETERMINE THE LAT/LON AT H2SAV:
              IF(.NOT.LOCAT2(H1LAT,H1LON,TRUEAZ,ECA_H2,                 &
     &          H2LATS,H2LONS,NSOLN))GOTO 10

!             DETERMINE TRUE PATH AZIMUTH FROM H1ALT:
              CALL PSIECA(H1LATX,H1LONX,H2LATS,H2LONS,H1AZMX,ECA_H2)
              RETURN
          ENDIF

!         H1SAV-TO-H1ALT EARTH CENTER ANGLE:
          ECA_H1=180-OBSZEN-DPDEG                                       &
     &      *ASIN(SIN(OBSZEN/DPDEG)*(H1ALT+REARTH)/(H1SAV+REARTH))
          IF(IPRMSV.LE.2)THEN

!             SENSOR BASED AZIMUTH:  DETERMINE LAT/LON AT H1ALT.
              CALL LOCATE(H1LAT,H1LON,TRUEAZ,ECA_H1,H1LATX,H1LONX)

!             DETERMINE TRUE PATH AZIMUTH FROM H1ALT:
              CALL PSIECA(H1LATX,H1LONX,H1LAT,H1LON,H1AZMX,ECA_H1)
              IF(H1AZMX.GE.180.D0)THEN
                  H1AZMX=H1AZMX-180
              ELSE
                  H1AZMX=H1AZMX+180
              ENDIF
              RETURN
          ENDIF

!         TARGET BASED AZIMUTH: DETERMINE H1SAV-TO-H2SAV ANGLE.
          ECA_H2=BETA

!         INCLUDE H2ALT-TO-H2SAV IN EARTH CENTER ANGLE:
          IF(H2SAV.GT.H2ALT)ECA_H2=ECA_H2+180-BCKZEN-DPDEG              &
     &      *ASIN(SIN(BCKZEN/DPDEG)*(H2ALT+REARTH)/(H2SAV+REARTH))

!         GIVEN THE H2SAV-TO-H1SAV TRUE AZIMUTH, TRY TO
!         DETERMINE THE LAT/LON AT H2SAV:
          IF(LOCAT2(H1LAT,H1LON,TRUEAZ,ECA_H2+ECA_H1,                   &
     &      H2LATS,H2LONS,NSOLN))THEN

!             DETERMINE LAT/LONG AT H1ALT:
              CALL LOCATE(H2LATS,H2LONS,TRUEAZ,ECA_H2,H1LATX,H1LONX)

!             DETERMINE TRUE PATH AZIMUTH FROM H1ALT:
              CALL PSIECA(H1LATX,H1LONX,H2LATS,H2LONS,H1AZMX,ECA_H2)
              RETURN
          ENDIF
   10     CONTINUE
          H1_VEC=.FALSE.
          WRITE(IPR,'(/A,I2,A,F10.5,A,/(15X,A,2(F10.5,A)))')            &
     &      'H1_VEC Error:  There are',NSOLN,' LAT/LONG pairs'          &
     &      //' from which a path with EARTH CENTER ANGLE',ECA_H2,      &
     &      ' deg','in DIRECTION',TRUEAZ,' deg East of North will'      &
     &      //' terminate at LATITUDE',H1LAT,' deg','North of'          &
     &      //' Equator and LONGITUDE',H1LON,' deg West of Greenwich.'
          WRITE(IPR,'(2(/15X,A),I3,A)')'With a fixed sensor'//          &
     &      ' LAT/LONG (IMULT=+1), path direction ambiguity'//          &
     &      ' can be','eliminated by using IPARM =',IPRMSV-10,          &
     &      ', i.e. a sensor-based path direction input.'
          RETURN
      ENDIF

!     LAT/LONG AT H2SAV FIXED:  GET H1ALT-TO-H2SAV EARTH CENTER ANGLE.
      ECA_H2=BETA

!     INCLUDE H2ALT-TO-H2SAV IN EARTH CENTER ANGLE:
      IF(H2SAV.GT.H2ALT)ECA_H2=ECA_H2+180-BCKZEN-DPDEG                  &
     &  *ASIN(SIN(BCKZEN/DPDEG)*(H2ALT+REARTH)/(H2SAV+REARTH))

!     IS AZIMUTH TARGET BASED?
      IF(IPRMSV.GE.10)THEN

!         DETERMINE LAT/LON AT H1ALT:
          CALL LOCATE(H2LAT,H2LON,TRUEAZ,ECA_H2,H1LATX,H1LONX)

!         DETERMINE TRUE PATH AZIMUTH FROM H1ALT:
          CALL PSIECA(H1LATX,H1LONX,H2LAT,H2LON,H1AZMX,ECA_H2)
          RETURN
      ENDIF

!     SENSOR BASED AZIMUTH:  WAS H1ALT REDUCED?
      IF(H1SAV.LE.H1ALT)THEN

!         TRUE AZIMUTH IS VALUE AT H1ALT:
          H1AZMX=TRUEAZ

!         GIVEN TRUE AZIMUTH, TRY TO DETERMINE THE LAT/LON AT H1ALT:
          IF(.NOT.LOCAT2(H2LAT,H2LON,TRUEAZ,ECA_H2,                     &
     &      H1LATX,H1LONX,NSOLN))GOTO 20
          RETURN
      ENDIF

!     H1SAV-TO-H1ALT EARTH CENTER ANGLE:
      ECA_H1=180-OBSZEN-DPDEG                                           &
     &  *ASIN(SIN(OBSZEN/DPDEG)*(H1ALT+REARTH)/(H1SAV+REARTH))

!     GIVEN TRUE AZIMUTH, TRY TO DETERMINE THE LAT/LON AT H1SAV:
      IF(LOCAT2(H2LAT,H2LON,TRUEAZ,ECA_H1+ECA_H2,                       &
     &  H1LATS,H1LONS,NSOLN))THEN

!         DETERMINE LAT/LON AT H1ALT:
          CALL LOCATE(H1LATS,H1LONS,TRUEAZ,ECA_H1,H1LATX,H1LONX)

!         DETERMINE TRUE PATH AZIMUTH FROM H1ALT:
          CALL PSIECA(H1LATX,H1LONX,H2LAT,H2LON,H1AZMX,ECA_H2)
          RETURN
      ENDIF

!     ERROR MESSAGE:
   20 CONTINUE
      H1_VEC=.FALSE.
      WRITE(IPR,'(/A,I2,A,F10.5,A,/(15X,A,2(F10.5,A)))')'H1_VEC Error:' &
     &  //'  There are',NSOLN,' LAT/LONG pairs from which a path with'  &
     &  //' EARTH CENTER ANGLE',ECA_H2,' deg','in DIRECTION',TRUEAZ,    &
     &  ' deg East of North will terminate at LATITUDE',H2LAT,' deg',   &
     &  'North of Equator and LONGITUDE',H2LON,' deg West of Greenwich.'
      WRITE(IPR,'(2(/15X,A),I3,A)')'With a fixed target'//              &
     &  ' LAT/LONG (IMULT=-1), path direction ambiguity'//              &
     &  ' can be','eliminated by using IPARM =',IPRMSV+10,              &
     &  ', i.e. a target-based path direction input.'
      RETURN
      END
