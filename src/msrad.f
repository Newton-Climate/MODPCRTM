      SUBROUTINE MSRAD(VCEN,S0,JNTRVL,NLOS,                             &
     &  ALBBOT,TDFSUN,TDFOBS,THMSRC,SOLSRC)

! *** SHOULD UMU() ARGUMENT BE MAPUMU ? ***

!     ROUTINE MSRAD SETS UP OPTICAL PROPERTIES PROFILES FOR VERTICAL
!     PATH THEN CALLS DISORT WHICH RETURNS MS SOURCE FUNCTIONS.
      IMPLICIT NONE

!     PARAMETERS:
!       TAUTMN  OPTICAL DEPTH CUTOFF USED TO MERGE LAYERS.
!       DELTAM  DELTA M APPROXIMATION FLAG (SET DELTAM TO .FALSE. FOR
!               CALCULATIONS ANALOGOUS TO THOSE IN BMFLUX/FLXADD).
      INTEGER IBCND
      REAL TAUTMN,ACCUR,FISOT,TEMIS,PHI0
      LOGICAL USRTAU,USRANG,DELTAM,CORINT
      PARAMETER(IBCND=0,TAUTMN=.0001,ACCUR=0.,FISOT=0.,TEMIS=0.,PHI0=0.,&
     &  USRTAU=.FALSE.,USRANG=.TRUE.,DELTAM=.TRUE.,CORINT=.FALSE.)
      INCLUDE 'PARAMS.h'

!     INPUT ARGUMENTS:
!       VCEN     SPECTRAL BAND CENTRAL FREQUENCY [CM-1].
!       S0       TOP-OF-ATMOSPHERE SOLAR/LUNAR SPECTRAL
!                IRRADIANCE [W CM-2 / CM-1].
!       JNTRVL   NUMBER OF K-DISTRIBUTION INTERVALS FOR CURRENT FREQ.
!       NLOS     NUMBER OF LINES-OF-SIGHT PATHS.
      REAL VCEN,S0
      INTEGER JNTRVL,NLOS

!     OUTPUT ARGUMENTS:
!       ALBBOT   MEDIUM SPHERICAL ALBEDO FROM BOTTOM.
!       TDFSUN   SUN TO GROUND DIFFUSE TRANSMITTANCE.
!       TDFOBS   OBSERVER TO GROUND "EMBEDDED" DIFFUSE TRANSMITTANCE.
!       THMSRC   DISORT THERMAL EMISSION LAYER SOURCE FUNCTION.
!       SOLSRC   DISORT SOLAR LAYER SOURCE FUNCTION.
      REAL ALBBOT(MXKSUB),TDFSUN(MXKSUB),TDFOBS(MLOS,MXKSUB),           &
     &  THMSRC(MXKSUB,LAYDIM,MLOS),SOLSRC(MXKSUB,LAYDIM,MLOS)

!     COMMONS:

!       SUBINT   SPECTRAL BIN "K" SUB-INTERVAL FRACTIONAL WIDTHS.
!       UPFLX    LEVEL UPWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       DNFLX    LEVEL DOWNWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       UPFLXS   LEVEL UPWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       DNFLXS   LEVEL DOWNWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       NTFLX    LEVEL NET (THERMAL PLUS SCATTERED SOLAR PLUS
!                DIRECT SOLAR) UPWARD SPECTRAL FLUX [W CM-2 / CM-1].
      REAL SUBINT,UPFLX,DNFLX,UPFLXS,DNFLXS,NTFLX
      COMMON/NETFLX/SUBINT(MXKSUB),UPFLX(LAYDIM),DNFLX(LAYDIM),         &
     &  UPFLXS(LAYDIM),DNFLXS(LAYDIM),NTFLX(LAYDIM)

!     /CNTRL/
!       NSEG     NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
!       THERML   FLAG TO CALCULATE THERMAL SCATTER.
      INTEGER NSEG,ML,MLFLX,IMULT
      LOGICAL THERML
      COMMON/CNTRL/NSEG(0:MLOSP1),ML,MLFLX,IMULT,THERML

!     /WTFLX/
!       UPDIFF  BOUNDARY UPWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDIFF  BOUNDARY DOWNWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDRCT  BOUNDARY DIRECT SOLAR SPECTRAL FLUX [W CM-2 / CM-1].
!       SMUPDF  LEVEL UPWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDF  LEVEL DOWNWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDR  LEVEL DIRECT SOLAR IN-BAND FLUX [W CM-2].
!       NFLUX   SPECTRAL BIN COUNTER FOR FLUX TABLE.
!       NTERMS  NUMBER OF TERMS IN FLUX SPECTRAL SUM.
      DOUBLE PRECISION UPDIFF,DNDIFF,DNDRCT,SMUPDF,SMDNDF,SMDNDR
      INTEGER NFLUX,NTERMS
      COMMON/WTFLX/UPDIFF(1:LAYDIM,-1:MWGT),DNDIFF(1:LAYDIM,-1:MWGT),   &
     &  DNDRCT(1:LAYDIM,-1:MWGT),SMUPDF(LAYDIM),SMDNDF(LAYDIM),         &
     &  SMDNDR(LAYDIM),NFLUX,NTERMS

!     /MSRD/
!       CSSCAT   COSINE OF THE SCATTERING ANGLE.
!                (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       SLEGEN   Nth LEGENDRE POLYNOMIAL EVALUATED AT THE COSINE OF THE
!                SCATTERING ANGLE TIMES (2N+1)/4pi (N=0 TO NSTR-1).
!       CSZEN0   LAYER BOUNDARY COSINE OF SOLAR/LUNAR ZENITH.
!       CSZEN    LAYER AVERAGE COSINE OF SOLAR/LUNAR ZENITH.
!       CSZENX   AVERAGE SOLAR/LUNAR COSINE ZENITH EXITING
!                (AWAY FROM EARTH) THE CURRENT LAYER.
!       BBGRND   THERMAL EMISSION (FLUX) AT THE GROUND [W CM-2 / CM-1].
!       BBNDRY   LAYER BOUNDARY THERMAL EMISSION (FLUX) [W CM-2 / CM-1].
!       TCONT    LAYER CONTINUUM OPTICAL DEPTH.
!       TAUT     LAYER TOTAL VERTICAL EXTINCTION OPTICAL DEPTH.
!       GTSCAT   SUM OVER SCATTERING SOURCES OF SCATTERING OPTICAL DEPTH
!                AND PHASE FUNCTION LEGENDRE COEFFICIENT PRODUCTS.
!       COSBAR   LAYER EFFECTIVE SCATTERING ASYMMETRY FACTOR.
!       DEPRAT   FRACTIONAL DECREASE IN WEAK-LINE OPTICAL DEPTH TO SUN.
!       S0DEP    OPTICAL DEPTH FROM LAYER BOUNDARY TO SUN.
!       S0TRN    TRANSMITTED SOLAR IRRADIANCES [W CM-2 / CM-1]
!       UPF      LAYER BOUNDARY UPWARD THERMAL FLUX [W CM-2 / CM-1].
!       DNF      LAYER BOUNDARY DOWNWARD THERMAL FLUX [W CM-2 / CM-1].
!       UPFS     LAYER BOUNDARY UPWARD SOLAR FLUX [W CM-2 / CM-1].
!       DNFS     LAYER BOUNDARY DOWNWARD SOLAR FLUX [W CM-2 / CM-1].
!       CO_LIN   TRUE IF LOS AND SOLAR PATHS ARE NEARLY IDENTICAL.
      REAL CSSCAT,SLEGEN,CSZEN0,CSZEN,CSZENX,TCONT,TAUT,GTSCAT,COSBAR,  &
     &  BBGRND,BBNDRY,S0DEP,S0TRN,DEPRAT,UPF,DNF,UPFS,DNFS
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &  ,SURFT,SURFS
#endif
!************************** END VINCENT ROSS **************************
      LOGICAL CO_LIN
      COMMON/MSRD/CSSCAT(MLOS),SLEGEN(0:MAZ,MLOS),CSZEN0(LAYDIM),       &
     &  CSZEN(LAYDIM),CSZENX(LAYDIM),TCONT(LAYDIM),TAUT(MXKSUB,LAYDIM), &
     &  GTSCAT(0:MXCMU,1:LAYDIM),COSBAR(LAYDIM),BBGRND,BBNDRY(LAYDIM),  &
     &  S0DEP(MXKSUB,LAYTWO),S0TRN(MXKSUB,LAYTWO),DEPRAT(MXKSUB,LAYDIM),&
     &  UPF(MXKSUB,LAYDIM),DNF(MXKSUB,LAYDIM),UPFS(MXKSUB,LAYDIM),      &
     &  DNFS(MXKSUB,LAYDIM),CO_LIN(MLOS)
!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
     &  ,SURFT(MXKSUB,MLOS),SURFS(MXKSUB,MLOS)
#endif
!************************** END VINCENT ROSS **************************

!     /ANGSRF/
!       CVWSRF  COSINE OF THE VIEW ZENITH ANGLE FROM THE SURFACE.
!       CSNSRF  COSINE OF THE SOLAR (LUNAR) ZENITH AT SURFACE.
!       AZMSRF  RELATIVE AZIMUTH ANGLE (SUN - SENSOR AT SURFACE) [RAD].
!       UMU1    COSINE OF THE PATH NADIR ANGLE.
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       UMU0    COSINE OF THE SOLAR ZENITH ANGLE.
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       PHI1    RELATIVE AZIMUTH ANGLE (SUN - LOS PATH AT SENSOR) [DEG].
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       CMU     COSINE OF THE NADIR ANGLES USED IN DISORT.
      REAL CVWSRF,CSNSRF,AZMSRF,UMU1,UMU0,PHI1,CMU
      COMMON/ANGSRF/CVWSRF(MLOS),CSNSRF(MLOS),AZMSRF(MLOS),UMU1(MLOS),  &
     &  UMU0,PHI1(MLOS),CMU(MI)

!     /CARD4/
!       IV1      LOWEST SPECTRAL FREQUENCY OUTPUT [CM-1].
!       IV2      HIGHEST SPECTRAL FREQUENCY OUTPUT [CM-1].
!       IDV      PRINTOUT SPECTRAL FREQUENCY STEP SIZE [CM-1].
!       IFWHM    TRIANGULAR SLIT FULL-WIDTH-HALF-MAXIMUM [CM-1].
!       VBAND    CURRENT COMPUTATION BAND FREQUENCY [CM-1].
!                (EQUALS BAND CENTER FOR 1, 5 & 15 CM-1 BAND MODELS;
!                EQUALS THE MINIMUM BAND VALUE FOR 0.1 CM-1 BAND MODEL)
!       IBINPT   BIN NUMBER OF CURRENT SPECTRAL POINT.
!                (CENTER FREQUENCY = IBINPT * BNDWID + OSHIFT).
!       IBINLO   BIN NUMBER OF (PADDED) SPECTRAL RANGE LOWER BOUND.
!       IBINHI   BIN NUMBER OF (PADDED) SPECTRAL RANGE UPPER BOUND.
!       IBINMN   BIN NUMBER OF MINIMUM COMPUTATION SPECTRAL POINT.
!       IBINMX   BIN NUMBER OF MAXIMUM COMPUTATION SPECTRAL POINT.
!       IBINDL   BIN NUMBER INCREMENT FOR SPECTRAL PRINTOUT.
!       IBINRS   BIN NUMBER INCREMENT EQUAL TO SPECTRAL RESOLUTION.
!       IBINOS   BIN NUMBER OFFSET BETWEEN CURRENT & OUTPUT SPC POINTS.
!       IBINWR   BIN NUMBER OF NEXT SPECTRAL DATA WRITE.
!       MBINPT   BIN NUMBER MAXIMUM FOR CURRENT BAND MODEL RESOLUTION.
!       IDBIN5   SPECTRAL BIN NUMBER STEP SIZE FOR 5 CM-1 GRID.
!       ISTEP5   INCREMENT FOR RETRIEVING 5 CM-1 RESOLUTION DATA [CM-1].
!       NSPCDT   NUMBER OF OUTPUT SPECTRAL DATA POINTS.
      DOUBLE PRECISION IDV
      REAL IV1,IV2,IFWHM,VBAND
      INTEGER IBINPT,IBINLO,IBINHI,IBINMN,IBINMX,IBINDL,                &
     &  IBINRS,IBINOS,IBINWR,MBINPT,IDBIN5,ISTEP5,NSPCDT
      COMMON/CARD4/IDV,IV1,IV2,IFWHM,VBAND,IBINPT,IBINLO,IBINHI,IBINMN, &
     &  IBINMX,IBINDL,IBINRS,IBINOS,IBINWR,MBINPT,IDBIN5,ISTEP5,NSPCDT

!     /MPROF/
!       ZM       PROFILE LEVEL ALTITUDES [KM].
!       PM       PROFILE LEVEL PRESSURES [MBAR].
!       TM       PROFILE LEVEL TEMPERATURES [K].
!       RFNDX    PROFILE LEVEL REFRACTIVITIES.
!       LRHSET   FLAG, .TRUE. IF RELATIVE HUMIDITY IS NOT TO BE SCALED.
      DOUBLE PRECISION ZM
      REAL PM,TM,RFNDX
      LOGICAL LRHSET
      COMMON/MPROF/ZM(LAYDIM),PM(LAYDIM),TM(LAYDIM),                    &
     &  RFNDX(LAYDIM),LRHSET(LAYDIM)

!     /SURFWV/
!       LAMBER  LOGICAL FLAG, .TRUE. FOR LAMBERTIAN SURFACE.
!       TPTEMP  TARGET-PIXEL SURFACE TEMPERATURES [K].
!       TPHDIR  TARGET-PIXEL HEMISPHERE DIRECTIONAL REFLECTANCE AT
!               VIEWING ANGLES.
!       TPBRDF  TARGET-PIXEL BIDIRECTIONAL REFLECTANCE DISTRIBUTION
!               FUNCTION AT VIEWING AND SUN ANGLES.
!       AATEMP  AREA-AVERAGED GROUND SURFACE TEMPERATURES [K].
!       AASALB  AREA-AVERAGED GROUND SURFACE ALBEDO.
!       AADREF  AREA-AVERAGED GROUND SURFACE DIRECTIONAL REFLECTIVITY
!               AT THE SOLAR ZENITH ANGLE.
!       EMU     GROUND DIRECTIONAL EMISSIVITY AT VIEWING ANGLES.
!       BEM     GROUND DIRECTIONAL EMISSIVITY AT QUADRATURE ANGLES.
!       RMU     GROUND BRDF AZIMUTH COMPONENTS AT VIEWING ANGLES
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
!       BDR     GROUND BRDF AZIMUTH COMPONENTS AT QUADRATURE ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
      LOGICAL LAMBER
      REAL TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,EMU,BEM,RMU,BDR
      COMMON/SURFWV/LAMBER,TPTEMP(MLOS),TPHDIR(MLOS),TPBRDF(MLOS),      &
     &  AATEMP,AASALB,AADREF,EMU(MXUMU),BEM(MI),                        &
     &  RMU(1:MXUMU,0:MI,0:MAZ),BDR(1:MI,0:MI,0:MAZ)                    &

!     /DISRT/
!       UMU      MONOTONICALLY INCREASING LIST OF DISTINCT USER-PATH
!                COSINE POLAR ANGLES.
!       PHI      MONOTONICALLY INCREASING LIST OF DISTINCT RELATIVE
!                SOLAR AZIMUTH ANGLES [0 TO 180 DEG].
!       NSTR     NUMBER OF DISCRETE ORDINATE STREAMS.
!       NAZ      NUMBER OF DISORT AZIMUTH COMPONENTS.
!       N2GAUS   ORDER OF DOUBLE-GAUSS QUADRATURES.
!       NUMU     NUMBER OF DISTINCT USER LINE-OF-SIGHT POLAR ANGLES.
!       MAPUMU   MAPPING FROM LINE-OF-SIGHT INDEX TO UMU ARRAY ENTRY.
!       NPHI     NUMBER OF DISTINCT RELATIVE SOLAR AZIMUTH ANGLES.
!       MAPPHI   MAPPING FROM LINE-OF-SIGHT INDEX TO PHI ARRAY ENTRY.
!       DIS      LOGICAL FLAG, TRUE FOR DISORT MULTIPLE SCATTERING.
!       DISAZM   LOGICAL FLAG, TRUE FOR DISORT WITH AZIMUTH DEPENDENCE.
!       DISALB   LOGICAL FLAG, TRUE FOR DISORT SPHERICAL ALBEDO OPTION.
!       LDISCL   LOGICAL FLAG, TRUE FOR ISAACS SCALED TO DISORT.
      REAL UMU,PHI
      INTEGER NSTR,NAZ,N2GAUS,NUMU,MAPUMU,NPHI,MAPPHI
      LOGICAL DIS,DISAZM,DISALB,LDISCL
      COMMON/DISRT/UMU(MXUMU),PHI(MAXPHI),NSTR,NAZ,N2GAUS,NUMU,         &
     &  MAPUMU(MLOS),NPHI,MAPPHI(MLOS),DIS,DISAZM,DISALB,LDISCL
      SAVE /DISRT/

!     /PATH/
!       PTHCOS   COSINE OF PATH ZENITH AT PATH BOUNDARIES.
!       PTHZEN   PATH ZENITH AT PATH BOUNDARIES [DEG].
!       PTHECA   SENSOR TO PATH EARTH CENTER ANGLE [DEG].
!       PTHALT   ALTITUDES AT PATH BOUNDARIES [KM].
!       PTH_MS   ALTITUDES AT PATH BOUNDARIES FOR THE MS PATH.
!       PTHSEG   PATH SEGMENT LENGTH [KM].
!       PTHRNG   SENSOR TO PATH BOUNDARY RANGE [KM].
!       JMAX     NUMBER OF DISTINCT LOS PATH SEGMENT ENDPOINT ALTITUDES.
!       IKHMIN   PATH BOUNDARY INDEX OF PATH MINIMUM ALTITUDE.
!       IKHMAX   PATH BOUNDARY INDEX OF PATH MAXIMUM ALTITUDE.
!       IKOUT    NUMBER OF PATH BOUNDARIES K DATA IS OUTPUT.
!       NTKDIS   RECORD NUMBER FOR K-DISTRIBUTION TRANSMITTANCE FILE.
!       NRKDIS   RECORD NUMBER FOR K-DISTRIBUTION RADIANCE FILE.
!       MAPPTH   MAPPING FROM PATH SEGMENT MIDPOINT TO VERTICAL LAYER.
!       IPTHHT   ALTITUDES (HEIGHTS) AT PATH BOUNDARIES [M].
!       LOWALT   VERTICAL LAYER BOUNDARY INDEX AT OR JUST BELOW PTHALT.
!       FACALT   ALTITUDE INTERPOLATION FRACTION FOR PTHALT
!       PATH_T   TEMPERATURE AT PATH BOUNDARIES [K].
!       PATH_P   PRESSURE AT PATH BOUNDARIES [ATM].
!       PTHRH    RELATIVE HUMIDITY AT PATH BOUNDARIES [K].
!       LSSGEO   LOGICAL FLAG, .TRUE. FOR SOLAR PATHS.
!       LTANMX   LOGICAL FLAG, .TRUE. IF PATH HAS A TANGENT MAXIMUM.
      DOUBLE PRECISION PTHCOS,PTHZEN,PTHECA,PTHALT,PTH_MS,PTHSEG,PTHRNG
      INTEGER JMAX,IKHMIN,IKHMAX,IKOUT,NTKDIS,NRKDIS,MAPPTH,            &
     &  IPTHHT,LOWALT
      REAL FACALT,PATH_T,PATH_P,PTHRH
      LOGICAL LSSGEO,LTANMX
      COMMON/PATH/PTHCOS(0:LAYTWO),PTHZEN(0:LAYTWO),PTHECA(0:LAYTWO),   &
     &  PTHALT(0:LAYTWO,1:MLOS),PTH_MS(0:LAYDIM),PTHSEG(LAYTWO),        &
     &  PTHRNG(0:LAYTWO,1:MLOS),JMAX,IKHMIN(MLOS),IKHMAX(MLOS),         &
     &  IKOUT(MLOS),MAPPTH(LAYTWO,1:MLOS),IPTHHT(0:LAYTWO),NTKDIS,      &
     &  NRKDIS,LOWALT(0:LAYTWO,1:MLOS),FACALT(0:LAYTWO,1:MLOS),         &
     &  PATH_T(0:LAYTWO,1:MLOS),PATH_P(0:LAYTWO,1:MLOS),                &
     &  PTHRH(0:LAYTWO,1:MLOS),LSSGEO,LTANMX

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      EXTERNAL DEVCBD

!     LOCAL VARIABLES:
!       NTAU     ACTUAL NUMBER OF DISORT LEVELS.
!       NLYR     ACTUAL NUMBER OF DISORT LAYERS (=NTAU-1).
!       ISEG     MODTRAN LAYER INDEX (=1 AT SURFACE).
!       ISEGP1   ISEG PLUS 1.
!       ISEGX    MODTRAN LAYER INDEX USED TO SUM OVER MERGED LAYERS.
!       NMERGE   NUMBER OF MODTRAN LAYERS MERGED INTO A DISORT LAYER.
!       ISTR     INDEX USED TO LOOP OVER NUMBER OF STREAMS.
!       IHISAV   VALUE OF IHIFLX AT PREVIOUS (HIGHER) MODTRAN LAYER.
!       IHI      DISORT LAYER UPPER BOUNDARY INDEX.
!       ILO      DISORT LAYER LOWER BOUNDARY INDEX (=IHI+1).
!       ILOS     LOOP INDEX FOR LINE-OF-SIGHT PATHS.
!       IUMU     LOOP INDEX FOR DISTINCT POLAR ANGLES.
!       ONLYFL   .TRUE. FOR AZIMUTHALLY INDEPENDENT SOLAR DISORT.
!       LFBEAM   .TRUE. FOR SOLAR MULTIPLE SCATTERING.
!       PLANK    .TRUE. WHEN THERMAL SCATTER IS CALCULATED.
!       UP       OPTICAL DEPTH INTERPOLATED UPWARD DIFFUSE
!                THERMAL FLUX [W CM-2 / CM-1].
!       UPS      OPTICAL DEPTH INTERPOLATED UPWARD DIFFUSE
!                SOLAR FLUX [W CM-2 / CM-1].
!       DN       OPTICAL DEPTH INTERPOLATED DOWNWARD DIFFUSE
!                THERMAL FLUX [W CM-2 / CM-1].
!       DNS      OPTICAL DEPTH INTERPOLATED DOWNWARD DIFFUSE
!                SOLAR FLUX [W CM-2 / CM-1].
!       DIR      OPTICAL DEPTH INTERPOLATED DIRECT NORMAL
!                FLUX [W CM-2 / CM-1].
!       TRNSEG   LAYER SEGMENT TRANSMITTANCE.
      INTEGER NTAU,NLYR,ISEG,ISEGP1,ISEGX,NMERGE,N,ISTR,INTRVL,NEXT,    &
     &  IHISAV,IHI,ILO,ILOS,IUMU
      LOGICAL ONLYFL,LFBEAM,PLANK
      REAL FBEAM,TTEMP,WVNMLO,WVNMHI,WN0,TRNSEG,UP,UPS,DN,DNS,DIR

!     LOCAL ARRAYS:
!       IHIFLX   MODTRAN LEVEL TO COINCIDENT OR UPPER DISORT LEVEL MAP.
!       LC_OBS   DISORT LAYER INDEX CONTAINING OBSERVER [THE LOWEST
!                LAYER CONTAINING AN OBSERVER IS STORED AS LC_OBS(0)].
!       GSCTSM   GTSCAT SUMMED OVER MERGED LAYERS.
!       EM_SRC   THERMAL EMISSION SOURCE TERM [W CM-2 SR-1 / CM-1]
!       PMOM     PHASE FUNCTION LEGENDRE POLYNOMIAL EXPANSION COEFS.
!       FRCFLX   FLUX INTERPOLATION FRACTION.
!       BBODY    THIN LAYER THERMAL SOURCE [W CM-2 SR-1 / CM-1].
!       OBSTAU   TOP-OF-ATMOSPHERE TO OBSERVER VERTICAL OPTICAL DEPTH.
      INTEGER IHIFLX(LAYDIM),LC_OBS(0:MLOS)
      REAL GSCTSM(0:MAXCOE),DTAUC(LAYDIM),PMOM(0:MAXCOE,1:LAYDIM),      &
     &  EM_SRC(MXUMU,LAYDIM),SSALB(LAYDIM),UTAU(LAYDIM),RFLDIR(LAYDIM), &
     &  RFLDN(LAYDIM),RFLDNS(LAYDIM),FLDIR(LAYDIM),FLDN(LAYDIM),        &
     &  FLUP(LAYDIM),FLUPS(LAYDIM),UAVG(LAYDIM),DFDT(LAYDIM),           &
     &  TEMPER(0:LAYDIM),UU(MXUMU,LAYDIM,MAXPHI),OBSTAU(MLOS),          &
     &  FRCFLX(LAYDIM),BBODY(LAYDIM),S0CMS(MLOS,LAYDIM),RFLDUM(LAYDIM)

!     FUNCTIONS:
!       BBFN     BLACKBODY FUNCTION [W CM-2 SR-1 / CM-1].
      REAL BBFN

!     DATA:
!       PRNT    DISORT PRINT OPTIONS
      LOGICAL PRNT(7)
      CHARACTER HEADER*127
      SAVE PRNT,HEADER
      DATA PRNT/7*.FALSE./,HEADER/'DISORT2 INTEGRATED INTO MODTRAN5'/
      
!*************VINCENT ROSS ADDED FOR SOURCE FUNCTION IMPROVEMENT***************
#ifdef DISORT_BOUND_SRC
!       ODCUM   CUMULATIVE OPTICAL DEPTH ALONG DISORT SLANT PATH
!       TAUCAL  OPTICAL DEPTH FROM SEGMENT START WHERE
!               SOURCE IS CALCULATED
!       ODCAL   CUMULATIVE PATH OPTICAL DEPTH 
!               WHERE SOURCE IS CALCULATED
!       ODOLD   PREVIOUS LAYER (N-1) ODCAL
!       SNEW    NEW SOURCE FUNCTION (TEMPORARY SWAP VARIABLE)
!       SOLD    OLD SOURCE FUNCTION (TEMPORARY SWAP VARIABLE)
      DOUBLE PRECISION ODCUM,TAUCAL,OD,ODCAL,ODOLD,SNEW,SOLD,TSEG
      INTEGER NBACKL
      REAL FACTOR
      DOUBLE PRECISION DPEXNT
#endif
!*************END VINCENT ROSS ADDITION****************************************

!     SPECTRAL FREQUENCY DATA:
      WN0=VCEN
      WVNMLO=VCEN-IFWHM/2
      WVNMHI=VCEN+IFWHM/2
      IF(WVNMLO.LT.0.)THEN
          WN0=WVNMHI/2
          WVNMLO=0.
      ENDIF

!     ANGLES:
!     PHI(1)=PHI1(NLOS)

!     TOP-OF-ATMOSPHERE SOLAR IRRADIANCE AND VERTICAL FLUX:
      IF(UMU0.LE.1.E-5)THEN

!         SUN BELOW OR TOO CLOSE TO HORIZON:
          LFBEAM=.FALSE.
          FBEAM=0.
          DNDRCT(ML,NFLUX)=0.D0
      ELSE

!         SUN ABOVE THE HORIZON:
          LFBEAM=.TRUE.
          FBEAM=S0
          DNDRCT(ML,NFLUX)=DBLE(S0*UMU0)
      ENDIF

!     DEFINE TOP-OF-ATMOSPHERE:
      ISEG=ML
      UTAU(1)=0.
      TTEMP=TM(ML)
      TEMPER(0)=TM(ML)
      DNFLX(ML)=0.
      DNFLXS(ML)=0.
      DNDIFF(ML,NFLUX)=0.D0

!     SET SOLAR FLUX VALUES TO ZERO FOR DISAZM=.FALSE.:
      FLUPS(ML)=0.
      RFLDNS(ML)=0.
      RFLDIR(ML)=0.
      IF(.NOT.THERML)THEN
          FLUP(ML)=0.
          RFLDN(ML)=0.
      ENDIF

!     LAYER LOOP INITIALIZATIONS:
      NTAU=1
      NLYR=0
      IHIFLX(ML)=1
      FRCFLX(ML)=0.
      DO ISTR=0,NSTR
          GSCTSM(ISTR)=0.
      ENDDO
      NMERGE=0
      DO ILOS=0,NLOS
          LC_OBS(ILOS)=0
      ENDDO

!     BEGIN LAYER LOOP:
      DO N=1,NSEG(MLOSP1)
          ISEGP1=ISEG
          ISEG=ISEG-1
          
!*************VINCENT ROSS REMOVED FOR SOURCE FUNCTION IMPROVEMENT*****************          
#ifndef DISORT_BOUND_SRC
!         INITIALIZE BLACKBODY, THERMAL AND SOLAR SOURCE FUNCTIONS:
          BBODY(ISEG)=BBFN((TM(ISEGP1)+TM(ISEG))/2,VCEN)
#endif
!************************** END VINCENT ROSS **************************************

!         SET SOLAR FLUX VALUES TO ZERO FOR DISAZM=.FALSE.:
          FLUPS(N)=0.
          RFLDNS(N)=0.
          RFLDIR(N)=0.
          IF(.NOT.THERML)THEN
              FLUP(N)=0.
              RFLDN(N)=0.
          ENDIF

!         APPROXIMATE OBSERVER DISORT LAYER INDEX & OPTICAL DEPTH:
!         (FOR DIFFUSE TRANSMITTANCE ONLY; FIRST LINE-OF-SIGHT ONLY)
          DO ILOS=1,NLOS
              IF(LOWALT(0,ILOS).EQ.ISEG)THEN
                  LC_OBS(0)=NTAU
                  IF(DISALB .AND. LFBEAM                                &
     &                      .AND. UMU(MAPUMU(ILOS)).GT.0.)THEN
                      LC_OBS(ILOS)=NTAU
                      OBSTAU(ILOS)=UTAU(NTAU)+FRCFLX(ISEGP1)            &
     &                  +(1-FACALT(0,ILOS))*TAUT(1,ISEG)
                  ENDIF
              ENDIF
          ENDDO

!         MERGE LAYERS ONCE OPTICAL DEPTH EXCEEDS TAUTMN
!         OR NUMBER OF LAYERS REMAINING HAS DROPPED TO 4:
          FRCFLX(ISEG)=FRCFLX(ISEGP1)+TAUT(1,ISEG)

          DO ISTR=0,NSTR
              GSCTSM(ISTR)=GSCTSM(ISTR)+GTSCAT(ISTR,ISEG)
          ENDDO
          IF(FRCFLX(ISEG).GT.TAUTMN .OR. ISEG.LE.4)THEN

!             INCREMENT LAYER AND BOUNDARY INDICES:
              NLYR=NTAU
              NTAU=NTAU+1

!             LOWER BOUNDARY TEMPERATURE:
              TEMPER(NLYR)=TM(ISEG)

!             LAYER AND CUMULATIVE OPTICAL DEPTH:
              DTAUC(NLYR)=FRCFLX(ISEG)
              UTAU(NTAU)=UTAU(NLYR)+DTAUC(NLYR)

!             SINGLE SCATTERING ALBEDO & FLUX INTERPOLATION SET-UP:
              IF(DTAUC(NLYR).GT.0.)THEN
                  SSALB(NLYR)=GSCTSM(0)/DTAUC(NLYR)
                  DO ISEGX=ISEGP1,ISEG+NMERGE
                      IHIFLX(ISEGX)=NLYR
                      FRCFLX(ISEGX)=FRCFLX(ISEGX)/DTAUC(NLYR)
                  ENDDO
              ELSE
                  SSALB(NLYR)=0.
                  DO ISEGX=ISEGP1,ISEG+NMERGE
                      IHIFLX(ISEGX)=NLYR
                      FRCFLX(ISEGX)=0.
                  ENDDO
              ENDIF

!             LEGENDRE POLYNOMIAL MOMENTS:
              PMOM(0,NLYR)=1.
              IF(GSCTSM(0).GT.0.)THEN
                  DO ISTR=1,NSTR
                      PMOM(ISTR,NLYR)=GSCTSM(ISTR)/GSCTSM(0)
                  ENDDO
              ELSE
                  DO ISTR=1,NSTR
                      PMOM(ISTR,NLYR)=0.
                  ENDDO
              ENDIF

!             INITIALIZE FLUX INTERPOLATION VARIABLES & LAYER SUMS:
              IHIFLX(ISEG)=NTAU
              FRCFLX(ISEG)=0.
              DO ISTR=0,NSTR
                  GSCTSM(ISTR)=0.
              ENDDO
              NMERGE=0
          ELSE
              NMERGE=NMERGE+1
          ENDIF

!     END LAYER LOOP:
      ENDDO

!     LOOP OVER CORRELATED-K SUB-INTERVALS:
      INTRVL=1
      DO NEXT=2,JNTRVL

!         SOLAR MULTIPLE SCATTER?
          IF(LFBEAM)THEN

!             TURN THERMAL EMISSION OFF DURING SOLAR CALCULATIONS:
              PLANK=.FALSE.

!             IS AZIMUTH DEPENDENCE TO BE MODELED?
              IF(DISAZM)THEN

!                 RUN AZIMUTH-DEPENDENT DISORT SOLAR:
                  ONLYFL=.FALSE.
                  CALL DISORT(CORINT,DELTAM,ONLYFL,.TRUE.,ACCUR,PRNT,   &
     &              HEADER,NTAU,PLANK,USRANG,USRTAU,DISALB,FBEAM,       &
     &              UMU,UMU0,PHI0,DTAUC,FISOT,AASALB,AATEMP,IBCND,      &
     &              10,NLYR,NPHI,NSTR,NTAU,NUMU,SSALB,PHI,PMOM,UTAU,    &
     &              NLOS,MAPUMU,LC_OBS,OBSTAU,TEMIS,TTEMP,TEMPER,       &
     &              WVNMLO,WVNMHI,RFLDIR,RFLDNS,FLDIR,FLDN,FLUPS,       &
     &              UAVG,DFDT,UU,ALBBOT(INTRVL),TDFSUN(INTRVL),         &
     &              TDFOBS(1,INTRVL),WN0,S0CMS,DNFS(INTRVL,1))

!***************** VINCENT ROSS REMOVED FOR BRDF COUPLING *************
#ifndef BRDF_COUPLING
!                 DOWNWARD SOLAR DIFFUSE FROM RFLDNS WITH ONLYFL=FALSE.
                  DNFS(INTRVL,1)=RFLDNS(NTAU)
#endif
!************************** END VINCENT ROSS **************************

!                 COMPUTE AZIMUTHALLY-DEPENDENT S0CMS:
                  CALL SNCMS(NTAU,S0,NLOS,PMOM,                         &
     &              SSALB,DTAUC,UTAU,UU,S0CMS)
              ELSE

!                 RUN AZIMUTH-INDEPENDENT DISORT SOLAR:
                  ONLYFL=.TRUE.
                  CALL DISORT(CORINT,DELTAM,ONLYFL,.TRUE.,ACCUR,PRNT,   &
     &              HEADER,NTAU,PLANK,USRANG,USRTAU,DISALB,FBEAM,       &
     &              UMU,UMU0,PHI0,DTAUC,FISOT,AASALB,AATEMP,IBCND,      &
     &              10,NLYR,NPHI,NSTR,NTAU,NUMU,SSALB,PHI,PMOM,UTAU,    &
     &              NLOS,MAPUMU,LC_OBS,OBSTAU,TEMIS,TTEMP,TEMPER,       &
     &              WVNMLO,WVNMHI,RFLDIR,RFLDNS,FLDIR,FLDN,FLUPS,       &
     &              UAVG,DFDT,UU,ALBBOT(INTRVL),TDFSUN(INTRVL),         &
     &              TDFOBS(1,INTRVL),WN0,S0CMS,DNFS(INTRVL,1))
              ENDIF
!***************** VINCENT ROSS ADDED FOR BRDF COUPLING ***************
#ifdef BRDF_COUPLING
              DO ILOS=1,NLOS
!               STORE DIFFUSE REFLECTED INTENSITY AT SURFACE IN SURFS
                SURFS(INTRVL,ILOS) = UU(MAPUMU(ILOS),NTAU,1)
              ENDDO
#endif
!************************** END VINCENT ROSS **************************
              
          ENDIF

!         THERMAL MULTIPLE SCATTER?
          IF(THERML)THEN
              ONLYFL=.FALSE.
              PLANK=.TRUE.
              FBEAM=0.
              CALL DISORT(CORINT,DELTAM,ONLYFL,.TRUE.,ACCUR,PRNT,HEADER,&
     &          NTAU,PLANK,USRANG,USRTAU,.FALSE.,FBEAM,UMU,UMU0,PHI0,   &
     &          DTAUC,FISOT,AASALB,AATEMP,IBCND,10,NLYR,NPHI,NSTR,NTAU, &
     &          NUMU,SSALB,PHI,PMOM,UTAU,NLOS,MAPUMU,LC_OBS,OBSTAU,     &
     &          TEMIS,TTEMP,TEMPER,WVNMLO,WVNMHI,RFLDUM,RFLDN,FLDIR,    &
     &          FLDN,FLUP,UAVG,DFDT,UU,ALBBOT(INTRVL),TDFSUN(INTRVL),   &
     &          TDFOBS(1,INTRVL),WN0,S0CMS,DNFS(INTRVL,1))
              FBEAM=S0

!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
              DO ILOS=1,NLOS
!               STORE DIFFUSE REFLECTED INTENSITY AT SURFACE IN SURFT
                SURFT(INTRVL,ILOS) = UU(MAPUMU(ILOS),NTAU,1)
              ENDDO
#else
!             DOWNWARD THERMAL DIFFUSE FROM RFLDN SINCE ONLYFL=FALSE.
              DNF(INTRVL,1)=RFLDN(NTAU)
#endif
!************************** END VINCENT ROSS **************************


!             LOOP OVER POLAR ANGLES:
              DO IUMU=1,NUMU

!                 THERMAL SOURCE FUNCTIONS:
                  IF(UMU(IUMU).GT.0.)THEN

!                     DOWNLOOK: LAYER TOP MINUS ATTENUATED BOT RADIANCE.
                      IHI=1
!*************VINCENT ROSS CHANGED FOR SOURCE FUNCTION IMPROVEMENT*****************
#ifdef DISORT_BOUND_SRC
                      ODCUM=0
#endif
                      DO ILO=2,NTAU
#ifdef DISORT_BOUND_SRC
                      OD = DTAUC(IHI)/UMU(IUMU)
                      TSEG=EXP(-OD)

                      SNEW                                  
     &                  =(UU(IUMU,IHI,1)-UU(IUMU,ILO,1)*TSEG)         
     &                   /(1-TSEG)
     
!                     APPROXIMATE OPTICAL 'CENTER OF MASS' WHERE SNEW WAS CALCULATED
                      TAUCAL = (-TSEG*(OD+1.)+1.)/(-TSEG+1.)

	                ODCAL = ODCUM+TAUCAL

!                     ON SECOND PASS, EXTRAPOLATE TO FIRST BOUNDARY
                      IF(IHI.EQ.2)THEN
                          EM_SRC(IUMU,IHI-1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(-ODOLD)
                      ENDIF

!                     INTERPOLATE TO CURRENT BOUNDARY
	                IF(IHI.GT.1)THEN
                          EM_SRC(IUMU,IHI) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF

                      ODCUM=ODCUM+OD
                      
!                     ON LAST PASS, EXTRAPOLATE TO LAST BOUNDARY
	                IF(ILO.EQ.NTAU) THEN
                          EM_SRC(IUMU,IHI+1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF
                      
	                ODOLD=ODCAL
	                SOLD=SNEW
#else
                          TRNSEG=EXP(-DTAUC(IHI)/UMU(IUMU))
                          EM_SRC(IUMU,IHI)=(UU(IUMU,IHI,1)              &
     &                      -UU(IUMU,ILO,1)*TRNSEG)/(1-TRNSEG)
#endif
!*************END VINCENT ROSS ADDITON*********************************************
                          IHI=ILO

                      ENDDO
                  ELSE

!                     UPLOOK: LAYER BOT MINUS ATTENUATED TOP RADIANCE.
                      IHI=1
!*************VINCENT ROSS CHANGED FOR SOURCE FUNCTION IMPROVEMENT*****************
#ifdef DISORT_BOUND_SRC
                      ODCUM=0
#endif
                      DO ILO=2,NTAU
#ifdef DISORT_BOUND_SRC
                      OD = -DTAUC(IHI)/UMU(IUMU)
                      TSEG=EXP(-OD)

                      SNEW                                  
     &                  =(UU(IUMU,ILO,1)-UU(IUMU,IHI,1)*TSEG)         
     &                   /(1-TSEG)

!                     APPROXIMATE OPTICAL 'CENTER OF MASS' WHERE SNEW WAS CALCULATED
                      TAUCAL = (-TSEG*(OD+1)+1)/(-TSEG+1)

	                ODCAL = ODCUM+OD-TAUCAL
              
!                     ON SECOND PASS, EXTRAPOLATE TO FIRST BOUNDARY
                      IF(IHI.EQ.2)THEN
                          EM_SRC(IUMU,IHI-1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(-ODOLD)
                      ENDIF
                      
!                     INTERPOLATE TO CURRENT BOUNDARY
	                IF(IHI.GT.1)THEN
                          EM_SRC(IUMU,IHI) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF
	                
                      ODCUM=ODCUM+OD
                      
!                     ON LAST PASS, EXTRAPOLATE TO LAST BOUNDARY
	                IF(ILO.EQ.NTAU) THEN
                          EM_SRC(IUMU,IHI+1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF

	                ODOLD=ODCAL
	                SOLD=SNEW
#else
                          TRNSEG=EXP(DTAUC(IHI)/UMU(IUMU))
                          EM_SRC(IUMU,IHI)=(UU(IUMU,ILO,1)              &
     &                      -UU(IUMU,IHI,1)*TRNSEG)/(1-TRNSEG)
#endif
!*************END VINCENT ROSS ADDITON*********************************************
                          IHI=ILO
                          
                      ENDDO
                  ENDIF

!             END LOOP OVER POLAR ANGLES:
              ENDDO
          ENDIF

!         SUM TOP-OF-ATMOSPHERE FLUXES:
          UPFLX(ML)=UPFLX(ML)+SUBINT(INTRVL)*FLUP(1)
          UPFLXS(ML)=UPFLXS(ML)+SUBINT(INTRVL)*FLUPS(1)
          NTFLX(ML)=NTFLX(ML)                                           &
     &      +SUBINT(INTRVL)*(FLUP(1)+FLUPS(1)-RFLDIR(1))
          RFLDN(1)=0.

!         LAYER LOOP INITIALIZATIONS:
          ISEG=ML
          IHISAV=1
          NTAU=1
          NLYR=0
          DO ISTR=0,NSTR
              GSCTSM(ISTR)=0.
          ENDDO
          NMERGE=0
          DO N=1,NSEG(MLOSP1)

!             SUM FLUXES FROM PREVIOUS CORRELATED-K SUB-INTERVAL:
              ISEGP1=ISEG
              ISEG=ISEG-1

!             IHIFLX IS THE MAPPING FROM MODTRAN LEVEL TO EITHER THE
!             COINCIDENT OR HIGHER DISORT LEVEL.
              IHI=IHIFLX(ISEG)
              IF(FRCFLX(ISEG).EQ.0.)THEN

!                 DISORT AND MODTRAN BOUNDARY COINCIDE:
                  UPFLX(ISEG)=UPFLX(ISEG)+SUBINT(INTRVL)*FLUP(IHI)
                  UPFLXS(ISEG)=UPFLXS(ISEG)+SUBINT(INTRVL)*FLUPS(IHI)
                  DNFLX(ISEG)=DNFLX(ISEG)+SUBINT(INTRVL)*RFLDN(IHI)
                  DNFLXS(ISEG)=DNFLXS(ISEG)+SUBINT(INTRVL)*RFLDNS(IHI)
                  NTFLX(ISEG)=NTFLX(ISEG)+SUBINT(INTRVL)*(FLUP(IHI)     &
     &              -RFLDN(IHI)+FLUPS(IHI)-RFLDNS(IHI)-RFLDIR(IHI))
                  DNDRCT(ISEG,NFLUX)=DNDRCT(ISEG,NFLUX)                 &
     &              +DBLE(SUBINT(INTRVL)*RFLDIR(IHI))
              ELSE

!                 INTERPOLATE TO MODTRAN BOUNDARY:
                  ILO=IHI+1
                  UP=FLUP(IHI)+FRCFLX(ISEG)*(FLUP(ILO)-FLUP(IHI))
                  UPS=FLUPS(IHI)+FRCFLX(ISEG)*(FLUPS(ILO)-FLUPS(IHI))
                  DN=RFLDN(IHI)+FRCFLX(ISEG)*(RFLDN(ILO)-RFLDN(IHI))
                  DNS=RFLDNS(IHI)+FRCFLX(ISEG)*(RFLDNS(ILO)-RFLDNS(IHI))
                  DIR=RFLDIR(IHI)+FRCFLX(ISEG)*(RFLDIR(ILO)-RFLDIR(IHI))
                  UPFLX(ISEG)=UPFLX(ISEG)+SUBINT(INTRVL)*UP
                  UPFLXS(ISEG)=UPFLXS(ISEG)+SUBINT(INTRVL)*UPS
                  DNFLX(ISEG)=DNFLX(ISEG)+SUBINT(INTRVL)*DN
                  DNFLXS(ISEG)=DNFLXS(ISEG)+SUBINT(INTRVL)*DNS
                  NTFLX(ISEG)                                           &
     &              =NTFLX(ISEG)+SUBINT(INTRVL)*(UP-DN+UPS-DNS-DIR)
                  DNDRCT(ISEG,NFLUX)                                    &
     &              =DNDRCT(ISEG,NFLUX)+DBLE(SUBINT(INTRVL)*DIR)
              ENDIF

!             LOOP OVER LINES-OF-SIGHT:
              DO ILOS=1,NLOS
                  IUMU=MAPUMU(ILOS)

!                 STORE THERMAL & SOLAR LAYER SOURCE TERMS:
                  IF(.NOT.THERML)THEN

!                     NO THERMAL SOURCE INCLUDED:
                      THMSRC(INTRVL,ISEG,ILOS)=0.
!*************VINCENT ROSS CHANGED FOR SOURCE FUNCTION IMPROVEMENT*****************
#ifndef DISORT_BOUND_SRC
                  ELSEIF(TAUT(INTRVL,ISEG).LT..001 .OR.                 &
     &              EM_SRC(IUMU,IHISAV).LT..1*BBODY(ISEG))THEN

!                     CONSERVATIVE SCATTERING FOR OPTICALLY THIN LAYERS:
                      THMSRC(INTRVL,ISEG,ILOS)=BBODY(ISEG)
#endif
                  ELSE
                  
#ifdef DISORT_BOUND_SRC
!                     INTERPOLATE TO MODTRAN BOUNDARY IF NECESSARY
                      IF(FRCFLX(ISEG).EQ.0.)THEN
                          THMSRC(INTRVL,ISEG,ILOS)=EM_SRC(IUMU,IHI)
                      ELSE
                          ILO=IHI+1
                          THMSRC(INTRVL,ISEG,ILOS)=
     &                    EM_SRC(IUMU,IHI) + 
     &                    FRCFLX(ISEG)*(EM_SRC(IUMU,ILO)-
     &                    EM_SRC(IUMU,IHI))
                      ENDIF
#else
!                     DISORT DERIVED THERMAL SOURCE:
                      THMSRC(INTRVL,ISEG,ILOS)=EM_SRC(IUMU,IHISAV)
#endif
                  ENDIF

!                 OBSERVER DISORT LAYER INDEX AND OPTICAL DEPTH:
                  IF(LOWALT(0,ILOS).EQ.ISEG)THEN
                      LC_OBS(0)=NTAU
                      IF(DISALB .AND. LFBEAM .AND. UMU(IUMU).GT.0.)THEN
                          LC_OBS(ILOS)=NTAU
                          OBSTAU(ILOS)=UTAU(NTAU)+FRCFLX(ISEGP1)        &
     &                      +(1-FACALT(0,ILOS))*TAUT(1,ISEG)
                      ENDIF
                  ENDIF
                  IF(LFBEAM)THEN

!                     SOLAR SOURCE:
                      IF(DISAZM)THEN
#ifdef DISORT_BOUND_SRC
!                     INTERPOLATE TO MODTRAN BOUNDARY IF NECESSARY
                      IF(FRCFLX(ISEG).EQ.0.)THEN
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(ILOS,IHI)
                      ELSE
                          ILO=IHI+1
                          SOLSRC(INTRVL,ISEG,ILOS)=
     &                    S0CMS(IUMU,IHI) + 
     &                    FRCFLX(ISEG)*(S0CMS(IUMU,ILO)-
     &                    S0CMS(IUMU,IHI))
                      ENDIF
#else
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(ILOS,IHISAV)
#endif
                      ELSE
#ifdef DISORT_BOUND_SRC
!                     INTERPOLATE TO MODTRAN BOUNDARY IF NECESSARY
                      IF(FRCFLX(ISEG).EQ.0.)THEN
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(IUMU,IHI)
                      ELSE
                          ILO=IHI+1
                          SOLSRC(INTRVL,ISEG,ILOS)=
     &                    S0CMS(IUMU,IHI) + 
     &                    FRCFLX(ISEG)*(S0CMS(IUMU,ILO)-
     &                    S0CMS(IUMU,IHI))
                      ENDIF
#else
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(IUMU,IHISAV)
#endif
!*************END VINCENT ROSS CHANGES********************************************
                      ENDIF
                  ELSE

!                     NO SOLAR SOURCE:
                      SOLSRC(INTRVL,ISEG,ILOS)=0.
                  ENDIF

!             END LOOP OVER LINES-OF-SIGHT:
              ENDDO

!             SAVE DISORT LEVEL INDEX:
              IHISAV=IHI

!             MERGE LAYERS ONCE OPTICAL DEPTH EXCEEDS TAUTMN
!             OR NUMBER OF LAYERS REMAINING HAS DROPPED TO 4:
              FRCFLX(ISEG)=FRCFLX(ISEGP1)+TAUT(NEXT,ISEG)
              DO ISTR=0,NSTR
                  GSCTSM(ISTR)=GSCTSM(ISTR)+GTSCAT(ISTR,ISEG)
              ENDDO
              IF(FRCFLX(ISEG).GT.TAUTMN .OR. ISEG.LE.4)THEN

!                 INCREMENT LAYER AND BOUNDARY INDICES:
                  NLYR=NTAU
                  NTAU=NTAU+1

!                 LOWER BOUNDARY TEMPERATURE:
                  TEMPER(NLYR)=TM(ISEG)

!                 LAYER AND CUMULATIVE OPTICAL DEPTH:
                  DTAUC(NLYR)=FRCFLX(ISEG)
                  UTAU(NTAU)=UTAU(NLYR)+DTAUC(NLYR)

!                 SINGLE SCATTERING ALBEDO & FLUX INTERPOLATION SET-UP:
                  IF(DTAUC(NLYR).GT.0.)THEN
                      SSALB(NLYR)=GSCTSM(0)/DTAUC(NLYR)
                      DO ISEGX=ISEGP1,ISEG+NMERGE
                          IHIFLX(ISEGX)=NLYR
                          FRCFLX(ISEGX)=FRCFLX(ISEGX)/DTAUC(NLYR)
                      ENDDO
                  ELSE
                      SSALB(NLYR)=0.
                      DO ISEGX=ISEGP1,ISEG+NMERGE
                          IHIFLX(ISEGX)=NLYR
                          FRCFLX(ISEGX)=0.
                      ENDDO
                  ENDIF

!                 LEGENDRE POLYNOMIAL MOMENTS:
                  PMOM(0,NLYR)=1.
                  IF(GSCTSM(0).GT.0.)THEN
                      DO ISTR=1,NSTR
                          PMOM(ISTR,NLYR)=GSCTSM(ISTR)/GSCTSM(0)
                      ENDDO
                  ELSE
                      DO ISTR=1,NSTR
                          PMOM(ISTR,NLYR)=0.
                      ENDDO
                  ENDIF

!                 INITIALIZE FLUX INTERPOLATION VARIABLES & LAYER SUMS:
                  IHIFLX(ISEG)=NTAU
                  FRCFLX(ISEG)=0.
                  DO ISTR=0,NSTR
                      GSCTSM(ISTR)=0.
                  ENDDO
                  NMERGE=0
              ELSE
                  NMERGE=NMERGE+1
              ENDIF
          ENDDO

!         INCREMENT K-INTERVAL:
          INTRVL=NEXT
      ENDDO

!     LAST (OR ONLY) k-DISTRIBUTION VALUE IN SPECTRAL BAND.
      IF(LFBEAM)THEN

!         SOLAR MULTIPLE SCATTER: TURN THERMAL EMISSION OFF.
          PLANK=.FALSE.

!         IS AZIMUTH DEPENDENCE TO BE MODELED?
          IF(DISAZM)THEN

!             RUN AZIMUTH-DEPENDENT DISORT SOLAR:
              ONLYFL=.FALSE.
              CALL DISORT(CORINT,DELTAM,ONLYFL,.TRUE.,ACCUR,PRNT,HEADER,&
     &          NTAU,PLANK,USRANG,USRTAU,DISALB,FBEAM,UMU,UMU0,PHI0,    &
     &          DTAUC,FISOT,AASALB,AATEMP,IBCND,10,NLYR,NPHI,NSTR,NTAU, &
     &          NUMU,SSALB,PHI,PMOM,UTAU,NLOS,MAPUMU,LC_OBS,OBSTAU,     &
     &          TEMIS,TTEMP,TEMPER,WVNMLO,WVNMHI,RFLDIR,RFLDNS,FLDIR,   &
     &          FLDN,FLUPS,UAVG,DFDT,UU,ALBBOT(INTRVL),TDFSUN(INTRVL),  &
     &          TDFOBS(1,INTRVL),WN0,S0CMS,DNFS(INTRVL,1))

!***************** VINCENT ROSS REMOVED FOR BRDF COUPLING *************
#ifndef BRDF_COUPLING
!             DOWNWARD SOLAR DIFFUSE FROM RFLDNS WITH ONLYFL=FALSE.
              DNFS(INTRVL,1)=RFLDNS(NTAU)
#endif
!************************** END VINCENT ROSS **************************

!             COMPUTE AZIMUTHALLY-DEPENDENT S0CMS:
              CALL SNCMS(NTAU,S0,NLOS,PMOM,SSALB,DTAUC,UTAU,UU,S0CMS)
          ELSE

!             RUN AZIMUTH-INDEPENDENT DISORT SOLAR:
              ONLYFL=.TRUE.
              CALL DISORT(CORINT,DELTAM,ONLYFL,.TRUE.,ACCUR,PRNT,HEADER,&
     &          NTAU,PLANK,USRANG,USRTAU,DISALB,FBEAM,UMU,UMU0,PHI0,    &
     &          DTAUC,FISOT,AASALB,AATEMP,IBCND,10,NLYR,NPHI,NSTR,NTAU, &
     &          NUMU,SSALB,PHI,PMOM,UTAU,NLOS,MAPUMU,LC_OBS,OBSTAU,     &
     &          TEMIS,TTEMP,TEMPER,WVNMLO,WVNMHI,RFLDIR,RFLDNS,FLDIR,   &
     &          FLDN,FLUPS,UAVG,DFDT,UU,ALBBOT(INTRVL),TDFSUN(INTRVL),  &
     &          TDFOBS(1,INTRVL),WN0,S0CMS,DNFS(INTRVL,1))
          ENDIF
!***************** VINCENT ROSS ADDED FOR BRDF COUPLING ***************
#ifdef BRDF_COUPLING
              DO ILOS=1,NLOS
!               STORE DIFFUSE REFLECTED INTENSITY AT SURFACE IN SURFS
                SURFS(INTRVL,ILOS) = UU(MAPUMU(ILOS),NTAU,1)
              ENDDO
#endif
!************************** END VINCENT ROSS **************************
      ENDIF

!     THERMAL MULTIPLE SCATTER?
      IF(THERML)THEN
          ONLYFL=.FALSE.
          PLANK=.TRUE.
          FBEAM=0.
          CALL DISORT(CORINT,DELTAM,ONLYFL,.TRUE.,ACCUR,PRNT,HEADER,    &
     &      NTAU,PLANK,USRANG,USRTAU,.FALSE.,FBEAM,UMU,UMU0,PHI0,       &
     &      DTAUC,FISOT,AASALB,AATEMP,IBCND,10,NLYR,NPHI,NSTR,NTAU,     &
     &      NUMU,SSALB,PHI,PMOM,UTAU,NLOS,MAPUMU,LC_OBS,OBSTAU,         &
     &      TEMIS,TTEMP,TEMPER,WVNMLO,WVNMHI,RFLDUM,RFLDN,FLDIR,        &
     &      FLDN,FLUP,UAVG,DFDT,UU,ALBBOT(INTRVL),TDFSUN(INTRVL),       &
     &      TDFOBS(1,INTRVL),WN0,S0CMS,DNFS(INTRVL,1))
          FBEAM=S0

!***************** VINCENT ROSS CHANGED FOR BRDF COUPLING *************
#ifdef BRDF_COUPLING
              DO ILOS=1,NLOS
!               STORE DIFFUSE REFLECTED INTENSITY AT SURFACE IN SURFT
                SURFT(INTRVL,ILOS) = UU(MAPUMU(ILOS),NTAU,1)
              ENDDO
#else
!         DOWNWARD THERMAL DIFFUSE FROM RFLDN SINCE ONLYFL=FALSE.
          DNF(INTRVL,1)=RFLDN(NTAU)
#endif
!************************** END VINCENT ROSS **************************

!         LOOP OVER POLAR ANGLES:
          DO IUMU=1,NUMU

!             THERMAL SOURCE FUNCTIONS:
              IF(UMU(IUMU).GT.0.)THEN

!                 DOWNLOOK:  LAYER TOP MINUS ATTENUATED BOTTOM RADIANCE:
                  IHI=1
!*************VINCENT ROSS CHANGED FOR SOURCE FUNCTION IMPROVEMENT*****************
#ifdef DISORT_BOUND_SRC
                      ODCUM=0
#endif
                      DO ILO=2,NTAU
#ifdef DISORT_BOUND_SRC
                      OD = DTAUC(IHI)/UMU(IUMU)
                      TRNSEG=EXP(-OD)

                      SNEW                                  
     &                  =(UU(IUMU,IHI,1)-UU(IUMU,ILO,1)*TRNSEG)         
     &                   /(1-TRNSEG)
     
!                     APPROXIMATE OPTICAL 'CENTER OF MASS' WHERE SNEW WAS CALCULATED
                      TAUCAL = (-TRNSEG*(OD+1)+1)/(-TRNSEG+1)

	                ODCAL = ODCUM+TAUCAL
	                
!                     ON SECOND PASS, EXTRAPOLATE TO FIRST BOUNDARY
                      IF(IHI.EQ.2)THEN
                          EM_SRC(IUMU,IHI-1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(-ODOLD)
                      ENDIF

!                     INTERPOLATE TO CURRENT BOUNDARY
	                IF(IHI.GT.1)THEN
                          EM_SRC(IUMU,IHI) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF

                      ODCUM=ODCUM+OD
                      
!                     ON LAST PASS, EXTRAPOLATE TO LAST BOUNDARY
	                IF(ILO.EQ.NTAU) THEN
                          EM_SRC(IUMU,IHI+1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF
                      
	                ODOLD=ODCAL
	                SOLD=SNEW
#else
                          TRNSEG=EXP(-DTAUC(IHI)/UMU(IUMU))
                          EM_SRC(IUMU,IHI)=(UU(IUMU,IHI,1)              &
     &                      -UU(IUMU,ILO,1)*TRNSEG)/(1-TRNSEG)
#endif
!*************END VINCENT ROSS ADDITON*********************************************
                      IHI=ILO
                  ENDDO
              ELSE

!                 UPLOOK:  LAYER BOTTOM MINUS ATTENUATED TOP RADIANCE:
                  IHI=1
!*************VINCENT ROSS CHANGED FOR SOURCE FUNCTION IMPROVEMENT*****************
#ifdef DISORT_BOUND_SRC
                      ODCUM=0
#endif
                      DO ILO=2,NTAU
#ifdef DISORT_BOUND_SRC
                      OD = -DTAUC(IHI)/UMU(IUMU)
                      TRNSEG=EXP(-OD)

                      SNEW                                  
     &                  =(UU(IUMU,ILO,1)-UU(IUMU,IHI,1)*TRNSEG)         
     &                   /(1-TRNSEG)
     
!                     APPROXIMATE OPTICAL 'CENTER OF MASS' WHERE SNEW WAS CALCULATED
                      TAUCAL = (-TRNSEG*(OD+1)+1)/(-TRNSEG+1)

	                ODCAL = ODCUM+OD-TAUCAL
              
!                     ON SECOND PASS, EXTRAPOLATE TO FIRST BOUNDARY
                      IF(IHI.EQ.2)THEN
                          EM_SRC(IUMU,IHI-1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(-ODOLD)
                      ENDIF
                      
!                     INTERPOLATE TO CURRENT BOUNDARY
	                IF(IHI.GT.1)THEN
                          EM_SRC(IUMU,IHI) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF
	                
                      ODCUM=ODCUM+OD
                      
!                     ON LAST PASS, EXTRAPOLATE TO LAST BOUNDARY
	                IF(ILO.EQ.NTAU) THEN
                          EM_SRC(IUMU,IHI+1) = SOLD + 
     &                    (SNEW-SOLD)/(ODCAL-ODOLD)*(ODCUM-ODOLD)
	                ENDIF

	                ODOLD=ODCAL
	                SOLD=SNEW
#else
                          TRNSEG=EXP(DTAUC(IHI)/UMU(IUMU))
                          EM_SRC(IUMU,IHI)=(UU(IUMU,ILO,1)              &
     &                      -UU(IUMU,IHI,1)*TRNSEG)/(1-TRNSEG)
#endif
!*************END VINCENT ROSS ADDITON*********************************************
                      IHI=ILO
                  ENDDO
              ENDIF

!         END LOOP OVER POLAR ANGLES:
          ENDDO
      ENDIF

!     SUM TOP-OF-ATMOSPHERE FLUXES:
      UPFLX(ML)=UPFLX(ML)+SUBINT(INTRVL)*FLUP(1)
      UPFLXS(ML)=UPFLXS(ML)+SUBINT(INTRVL)*FLUPS(1)
      UPDIFF(ML,NFLUX)=DBLE(UPFLX(ML)+UPFLXS(ML))
      NTFLX(ML)=NTFLX(ML)+SUBINT(INTRVL)*(FLUP(1)+FLUPS(1)-RFLDIR(1))
      RFLDN(1)=0.
      RFLDNS(1)=0.

!     LOOP OVER LAYERS:
      ISEG=ML
      IHI=1
      DO N=1,NSEG(MLOSP1)

!         N IS DISORT LAYER OR UPPER LEVEL INDEX;
!         ISEG IS MODTRAN LAYER OR LOWER LEVEL INDEX.
          ISEG=ISEG-1

!         LOOP OVER LINES-OF-SIGHT:
          DO ILOS=1,NLOS
              IUMU=MAPUMU(ILOS)

!             STORE THERMAL AND SOLAR LAYER SOURCE TERMS:
              IF(.NOT.THERML)THEN

!                 NO THERMAL SOURCE INCLUDED:
                  THMSRC(INTRVL,ISEG,ILOS)=0.
!*************VINCENT ROSS CHANGED FOR SOURCE FUNCTION IMPROVEMENT*****************
#ifndef DISORT_BOUND_SRC
                  ELSEIF(TAUT(INTRVL,ISEG).LT..001 .OR.                 &
     &              EM_SRC(IUMU,IHI).LT..1*BBODY(ISEG))THEN

!                     CONSERVATIVE SCATTERING FOR OPTICALLY THIN LAYERS:
                      THMSRC(INTRVL,ISEG,ILOS)=BBODY(ISEG)
#endif
                  ELSE
                  
#ifdef DISORT_BOUND_SRC
!                     INTERPOLATE TO MODTRAN BOUNDARY IF NECESSARY
                      IF(FRCFLX(ISEG).EQ.0.)THEN
                          THMSRC(INTRVL,ISEG,ILOS)=EM_SRC(IUMU,IHI)
                      ELSE
                          ILO=IHI+1
                          THMSRC(INTRVL,ISEG,ILOS)=
     &                    EM_SRC(IUMU,IHI) + 
     &                    FRCFLX(ISEG)*(EM_SRC(IUMU,ILO)-
     &                    EM_SRC(IUMU,IHI))
                      ENDIF
#else
!                     DISORT DERIVED THERMAL SOURCE:
                      THMSRC(INTRVL,ISEG,ILOS)=EM_SRC(IUMU,IHI)
#endif
                  ENDIF

!                 OBSERVER DISORT LAYER INDEX AND OPTICAL DEPTH:
                  IF(LOWALT(0,ILOS).EQ.ISEG)THEN
                      LC_OBS(0)=NTAU
                      IF(DISALB .AND. LFBEAM .AND. UMU(IUMU).GT.0.)THEN
                          LC_OBS(ILOS)=NTAU
                          OBSTAU(ILOS)=UTAU(NTAU)+FRCFLX(ISEGP1)        &
     &                      +(1-FACALT(0,ILOS))*TAUT(1,ISEG)
                      ENDIF
                  ENDIF
                  IF(LFBEAM)THEN

!                     SOLAR SOURCE:
                      IF(DISAZM)THEN
#ifdef DISORT_BOUND_SRC
!                     INTERPOLATE TO MODTRAN BOUNDARY IF NECESSARY
                      IF(FRCFLX(ISEG).EQ.0.)THEN
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(ILOS,IHI)
                      ELSE
                          ILO=IHI+1
                          SOLSRC(INTRVL,ISEG,ILOS)=
     &                    S0CMS(IUMU,IHI) + 
     &                    FRCFLX(ISEG)*(S0CMS(IUMU,ILO)-
     &                    S0CMS(IUMU,IHI))
                      ENDIF
#else
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(ILOS,IHI)
#endif
                      ELSE
#ifdef DISORT_BOUND_SRC
!                     INTERPOLATE TO MODTRAN BOUNDARY IF NECESSARY
                      IF(FRCFLX(ISEG).EQ.0.)THEN
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(IUMU,IHI)
                      ELSE
                          ILO=IHI+1
                          SOLSRC(INTRVL,ISEG,ILOS)=
     &                    S0CMS(IUMU,IHI) + 
     &                    FRCFLX(ISEG)*(S0CMS(IUMU,ILO)-
     &                    S0CMS(IUMU,IHI))
                      ENDIF
#else
                          SOLSRC(INTRVL,ISEG,ILOS)=S0CMS(IUMU,IHI)
#endif
!*************END VINCENT ROSS CHANGES********************************************
                  ENDIF
              ELSE

!                 NO SOLAR SOURCE:
                  SOLSRC(INTRVL,ISEG,ILOS)=0.
              ENDIF

!         END LOOP OVER LINES-OF-SIGHT:
          ENDDO

!         IHIFLX IS THE MAPPING FROM MODTRAN LEVEL TO EITHER THE
!         COINCIDENT OR HIGHER DISORT LEVEL.
          IHI=IHIFLX(ISEG)

!         SUM FLUXES FROM PREVIOUS CORRELATED-K SUB-INTERVAL:
          IF(FRCFLX(ISEG).EQ.0.)THEN

!             DISORT AND MODTRAN BOUNDARY COINCIDE:
              UPFLX(ISEG)=UPFLX(ISEG)+SUBINT(INTRVL)*FLUP(IHI)
              UPFLXS(ISEG)=UPFLXS(ISEG)+SUBINT(INTRVL)*FLUPS(IHI)
              DNFLX(ISEG)=DNFLX(ISEG)+SUBINT(INTRVL)*RFLDN(IHI)
              DNFLXS(ISEG)=DNFLXS(ISEG)+SUBINT(INTRVL)*RFLDNS(IHI)
              NTFLX(ISEG)=NTFLX(ISEG)+SUBINT(INTRVL)*(FLUP(IHI)         &
     &          -RFLDN(IHI)+FLUPS(IHI)-RFLDNS(IHI)-RFLDIR(IHI))
              DNDRCT(ISEG,NFLUX)=DNDRCT(ISEG,NFLUX)                     &
     &          +DBLE(SUBINT(INTRVL)*RFLDIR(IHI))
          ELSE

!             INTERPOLATE TO MODTRAN LEVEL:
              ILO=IHI+1
              UP=FLUP(IHI)+FRCFLX(ISEG)*(FLUP(ILO)-FLUP(IHI))
              UPS=FLUPS(IHI)+FRCFLX(ISEG)*(FLUPS(ILO)-FLUPS(IHI))
              DN=RFLDN(IHI)+FRCFLX(ISEG)*(RFLDN(ILO)-RFLDN(IHI))
              DNS=RFLDNS(IHI)+FRCFLX(ISEG)*(RFLDNS(ILO)-RFLDNS(IHI))
              DIR=RFLDIR(IHI)+FRCFLX(ISEG)*(RFLDIR(ILO)-RFLDIR(IHI))
              UPFLX(ISEG)=UPFLX(ISEG)+SUBINT(INTRVL)*UP
              UPFLXS(ISEG)=UPFLXS(ISEG)+SUBINT(INTRVL)*UPS
              DNFLX(ISEG)=DNFLX(ISEG)+SUBINT(INTRVL)*DN
              DNFLXS(ISEG)=DNFLXS(ISEG)+SUBINT(INTRVL)*DNS
              NTFLX(ISEG)=NTFLX(ISEG)+SUBINT(INTRVL)*(UP-DN+UPS-DNS-DIR)
              DNDRCT(ISEG,NFLUX)                                        &
     &          =DNDRCT(ISEG,NFLUX)+DBLE(SUBINT(INTRVL)*DIR)
          ENDIF
          UPDIFF(ISEG,NFLUX)=DBLE(UPFLX(ISEG)+UPFLXS(ISEG))
          DNDIFF(ISEG,NFLUX)=DBLE(DNFLX(ISEG)+DNFLXS(ISEG))

!     END LAYER LOOP:
      ENDDO

!     RETURN TO LOOP
      RETURN
      END
