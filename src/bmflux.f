      SUBROUTINE BMFLUX(JNTRVL,SALB,AADREF,S0,SURSCL)

!     FLUX ADDING MULTIPLE SCATTERING ROUTINE.
      IMPLICIT NONE

!     INPUT ARGUMENTS:
!       JNTRVL   NUMBER OF K-DISTRIBUTION INTERVALS FOR CURRENT FREQ.
!       SALB     SURFACE SCATTERING ALBEDO.
!       AADREF   DIRECTIONAL REFLECTIVITY AT SOLAR ZENITH ANGLE.
!       S0       SOURCE IRRADIANCE [W CM-2 / CM-1].
!       SURSCL   DISORT SCALING FACTOR FOR SURFACE REFLECTED RADIANCE.
      INTEGER JNTRVL
      REAL SALB,AADREF,S0,SURSCL

!     PARAMETERS:
!       RT3   SQUARE ROOT OF 3.
      REAL RT3
      PARAMETER(RT3=1.7320508)
      INCLUDE 'PARAMS.h'

!     COMMONS:

!     /MSRD/
!       CSSCAT   COSINE OF THE SCATTERING ANGLE.
!                (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       SLEGEN   Nth LEGENDRE POLYNOMIAL EVALUATED AT THE COSINE OF THE
!                SCATTERING ANGLE TIMES (2N+1)/4pi (N=0 TO NSTR-1).
!       CSZEN0   LAYER BOUNDARY COSINE OF SOLAR/LUNAR ZENITH.
!       CSZEN    LAYER AVERAGE COSINE OF SOLAR/LUNAR ZENITH.
!       CSZENX   AVERAGE SOLAR/LUNAR COSINE ZENITH EXITING
!                (AWAY FROM EARTH) THE CURRENT LAYER.
!       BBGRND   THERMAL EMISSION (FLUX) AT THE GROUND [W CM-2 / CM-1].
!       BBNDRY   LAYER BOUNDARY THERMAL EMISSION (FLUX) [W CM-2 / CM-1].
!       TCONT    LAYER CONTINUUM OPTICAL DEPTH.
!       TAUT     LAYER TOTAL VERTICAL EXTINCTION OPTICAL DEPTH.
!       GTSCAT   SUM OVER SCATTERING SOURCES OF SCATTERING OPTICAL DEPTH
!                AND PHASE FUNCTION LEGENDRE COEFFICIENT PRODUCTS.
!       COSBAR   LAYER EFFECTIVE SCATTERING ASYMMETRY FACTOR.
!       DEPRAT   FRACTIONAL DECREASE IN WEAK-LINE OPTICAL DEPTH TO SUN.
!       S0DEP    OPTICAL DEPTH FROM LAYER BOUNDARY TO SUN.
!       S0TRN    TRANSMITTED SOLAR IRRADIANCES [W CM-2 / CM-1]
!       UPF      LAYER BOUNDARY UPWARD THERMAL FLUX [W CM-2 / CM-1].
!       DNF      LAYER BOUNDARY DOWNWARD THERMAL FLUX [W CM-2 / CM-1].
!       UPFS     LAYER BOUNDARY UPWARD SOLAR FLUX [W CM-2 / CM-1].
!       DNFS     LAYER BOUNDARY DOWNWARD SOLAR FLUX [W CM-2 / CM-1].
!       CO_LIN   TRUE IF LOS AND SOLAR PATHS ARE NEARLY IDENTICAL.
      REAL CSSCAT,SLEGEN,CSZEN0,CSZEN,CSZENX,TCONT,TAUT,GTSCAT,COSBAR,  &
     &  BBGRND,BBNDRY,S0DEP,S0TRN,DEPRAT,UPF,DNF,UPFS,DNFS
      LOGICAL CO_LIN
      COMMON/MSRD/CSSCAT(MLOS),SLEGEN(0:MAZ,MLOS),CSZEN0(LAYDIM),       &
     &  CSZEN(LAYDIM),CSZENX(LAYDIM),TCONT(LAYDIM),TAUT(MXKSUB,LAYDIM), &
     &  GTSCAT(0:MXCMU,1:LAYDIM),COSBAR(LAYDIM),BBGRND,BBNDRY(LAYDIM),  &
     &  S0DEP(MXKSUB,LAYTWO),S0TRN(MXKSUB,LAYTWO),DEPRAT(MXKSUB,LAYDIM),&
     &  UPF(MXKSUB,LAYDIM),DNF(MXKSUB,LAYDIM),UPFS(MXKSUB,LAYDIM),      &
     &  DNFS(MXKSUB,LAYDIM),CO_LIN(MLOS)

!     /FLUX/
      REAL EDN,EUP,EUPC,TDF,RUPC,REF,EDNS,EUPS,EUPCS,TDFS,RUPCS,REFS
      COMMON/FLUX/EDN(LAYDIM),EUP(LAYDIM),EUPC(LAYDIM),TDF(LAYDIM),     &
     &  RUPC(LAYDIM),REF(LAYDIM),EDNS(LAYDIM),EUPS(LAYDIM),             &
     &  EUPCS(LAYDIM),TDFS(LAYDIM),RUPCS(LAYDIM),REFS(LAYDIM)

!     /NETFLX/
!       SUBINT   SPECTRAL BIN "K" SUB-INTERVAL FRACTIONAL WIDTHS.
!       UPFLX    LAYER BOUNDARY UPWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       DNFLX    LAYER BOUNDARY DOWNWARD THERMAL SPECTRAL
!                FLUX (INCLUDES SCATTERED SOLAR IF DISORT
!                & NO AZIMUTH DEPENDENCE) [W CM-2 / CM-1].
!       UPFLXS   LAYER BOUNDARY UPWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       DNFLXS   LAYER BOUNDARY DOWNWARD SCATTERED SOLAR
!                SPECTRAL FLUX (USED WITH DISORT ONLY
!                IF AZIMUTH DEPENDENT) [W CM-2 / CM-1].
!       NTFLX    LAYER BOUNDARY NET (THERMAL PLUS SCATTERED SOLAR PLUS
!                DIRECT SOLAR) UPWARD SPECTRAL FLUX [W CM-2 / CM-1].
      REAL SUBINT,UPFLX,DNFLX,UPFLXS,DNFLXS,NTFLX
      COMMON/NETFLX/SUBINT(MXKSUB),UPFLX(LAYDIM),DNFLX(LAYDIM),         &
     &  UPFLXS(LAYDIM),DNFLXS(LAYDIM),NTFLX(LAYDIM)

!     /WTFLX/
!       UPDIFF  BOUNDARY UPWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDIFF  BOUNDARY DOWNWARD DIFFUSE SPECTRAL FLUX [W CM-2 / CM-1].
!       DNDRCT  BOUNDARY DIRECT SOLAR SPECTRAL FLUX [W CM-2 / CM-1].
!       SMUPDF  LAYER BOUNDARY UPWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDF  LAYER BOUNDARY DOWNWARD DIFFUSE IN-BAND FLUX [W CM-2].
!       SMDNDR  LAYER BOUNDARY DIRECT SOLAR IN-BAND FLUX [W CM-2].
!       NFLUX   SPECTRAL BIN COUNTER FOR FLUX TABLE.
!       NTERMS  NUMBER OF TERMS IN FLUX SPECTRAL SUM.
      DOUBLE PRECISION UPDIFF,DNDIFF,DNDRCT,SMUPDF,SMDNDF,SMDNDR
      INTEGER NFLUX,NTERMS
      COMMON/WTFLX/UPDIFF(1:LAYDIM,-1:MWGT),DNDIFF(1:LAYDIM,-1:MWGT),   &
     &  DNDRCT(1:LAYDIM,-1:MWGT),SMUPDF(LAYDIM),SMDNDF(LAYDIM),         &
     &  SMDNDR(LAYDIM),NFLUX,NTERMS

!     /CNTRL/
!       NSEG     NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
!       THERML   FLAG TO CALCULATE THERMAL SCATTER.
      INTEGER NSEG,ML,MLFLX,IMULT
      LOGICAL THERML
      COMMON/CNTRL/NSEG(0:MLOSP1),ML,MLFLX,IMULT,THERML

!     /CARD1/
!       MODEL    MODEL ATMOSPHERE INDEX.
!       ITYPE    SLANT PATH TYPE.
!       IEMSCT   RADIATIVE TRANSFER MODE.
!                  0 FOR TRANSMITTANCE
!                  1 FOR THERMAL EMISSION ONLY
!                  2 FOR THERMAL EMISSION PLUS SOLAR SCATTER
!                  3 FOR TRANSMITTED SOLAR IRRADIANCE
!                  4 FOR SOLAR SCATTER ONLY
!       M1       MODEL ATMOSPHERE FOR PRESSURE & TEMPERATURE PROFILES.
!       M2       MODEL ATMOSPHERE FOR H2O PROFILE.
!       M3       MODEL ATMOSPHERE FOR O3 PROFILE.
!       I_RD2C   READ CARD 2C, 2C1, ... IF EQUAL 1; SKIP IF EQUAL TO 0.
!       NOPRNT   PRINT FLAG.
!       MODTRN   MODTRAN BAND MODEL FLAG.
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT,MODTRN

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      EXTERNAL DEVCBD

!     INTERNAL VARIABLES:
!       EUP(N)    INTRINSIC UPWARD THERMAL FLUX OF LAYER N
!       EDN(N)    INTRINSIC DOWNWARD THERMAL FLUX OF LAYER N
!       TDF(N)    INTRINSIC THERMAL TRANSMISSION OF LAYER N
!       REF(N)    INTRINSIC THERMAL REFLECTANCE OF LAYER N
!       EUPS(N)   INTRINSIC UPWARD SOLAR FLUX OF LAYER N
!       EDNS(N)   INTRINSIC DOWNWARD SOLAR FLUX OF LAYER N
!       TDFS(N)   INTRINSIC SOLAR TRANSMISSION OF LAYER N
!       REFS(N)   INTRINSIC SOLAR REFLECTANCE OF LAYER N

!     LOCAL VARIABLES:
      INTEGER NLAYRS,IKP1,N,NM1,IK,INTRVL
      REAL RDNCN,RUPCN,EUPCN,RDNCNS,RUPCNS,EUPCNS,TAU,A1ME0,A2C,        &
     &  EDNCN,EDNCNS,AC,DENOM,COEF,A2C2,C,HALFE1,E0,EXPAN,ONEME0,       &
     &  E1,COEF1,COEF2,ACM1,ONEPE0,ONEME1,E2,EX,SOURC,CZTS0

!     NUMBER OF LAYERS:
      NLAYRS=ML-1

!     LOOP OVER K BINS:
      DO INTRVL=1,JNTRVL

!         SURFACE DIFFUSE REFLECTANCE (ALBEDO) AND THERMAL EMISSION:
          RUPCN=SALB
          EUPCN=(1-RUPCN)*BBGRND
          EUPC(ML)=EUPCN
          IF(IEMSCT.EQ.2)THEN

!             SURFACE DIFFUSE REFLECTANCE AND REFLECTED DIRECT SOLAR:
              RUPCNS=SALB
              EUPCNS=AADREF*CSZEN0(1)*S0TRN(INTRVL,1)
              EUPCS(ML)=EUPCNS
          ENDIF

!         UPWARD ADDING LOOP STARTS FROM BOTTOM OF ATMOSPHERE:
          IKP1=1
          DO N=NLAYRS,1,-1

!             LAYER INDICES IN OPPOSITE DIRECTION IN ROUTINE LOOP:
              IK=IKP1
              IKP1=IKP1+1
              TAU=TAUT(INTRVL,IK)

              IF(THERML)THEN
!                 USE TWO STREAM APPROXIMATION FOR THERMAL:
                  C=RT3*(TAU-GTSCAT(0,IK)*COSBAR(IK))
                  A2C=RT3*(TAU-GTSCAT(0,IK))
                  A2C2=A2C*C
                  AC=SQRT(A2C2)
                  IF(AC.GT.20.)THEN
                      DENOM=C+AC
                      REF(N)=(C-AC)/DENOM
                      DENOM=DENOM/2
                      TDF(N)=0.
                      IF(AC.LT.35.)TDF(N)=C*AC*EXP(-AC)/DENOM**2
                      ACM1=AC-1
                      EDN(N)=(BBNDRY(IKP1)+ACM1*BBNDRY(IK))/DENOM
                      EUP(N)=(BBNDRY(IK)+ACM1*BBNDRY(IKP1))/DENOM
                  ELSE
                      IF(AC.LT..08)THEN
                          EXPAN=1-AC*(3-AC)/6
                          ONEME0=AC*EXPAN
                          A1ME0=A2C*EXPAN
                          E0=1-ONEME0
                          ONEPE0=2-ONEME0
                          ONEME1=AC*(12-AC*(4-AC))/24
                          E1=1-ONEME1
                          E2=A2C2*(1-AC+.55*A2C2)/3
                      ELSE
                          E0=EXP(-AC)
                          ONEME0=1-E0
                          ONEPE0=1+E0
                          E1=ONEME0/AC
                          A1ME0=A2C*E1
                          ONEME1=1-E1
                          E2=ONEME0-ONEPE0*ONEME1
                      ENDIF
                      HALFE1=E1/2
                      DENOM=(1+(C-AC)*HALFE1)*(ONEPE0+A1ME0)
                      TDF(N)=2*E0/DENOM
                      REF(N)=(C-A2C)*HALFE1*ONEPE0/DENOM
                      COEF1=A1ME0*E1+E2
                      COEF2=A1ME0*(ONEME1+E0)+ONEME0**2-E2
                      EDN(N)=(COEF1*BBNDRY(IKP1)+COEF2*BBNDRY(IK))/DENOM
                      EUP(N)=(COEF1*BBNDRY(IK)+COEF2*BBNDRY(IKP1))/DENOM
                  ENDIF

!                 CALCULATE COMPOSITE FLUXES AND REFLECTANCES:
                  COEF=TDF(N)/(1-RUPCN*REF(N))
                  EUPCN=EUP(N)+COEF*(EUPCN+EDN(N)*RUPCN)
                  RUPCN=REF(N)+COEF*TDF(N)*RUPCN
                  EUPC(N)=EUPCN
                  RUPC(N)=RUPCN
              ENDIF
              IF(IEMSCT.EQ.2)THEN

!                 CALCULATE VARIABLES FOR SOLAR HYBRID MODIFIED
!                 DELTA EDDINGTON 2-STREAM APPROXIMATION:
                  CALL TRLAY(TAU,GTSCAT(0,IK),COSBAR(IK),CSZEN(IK),     &
     &              S0DEP(INTRVL,IK),DEPRAT(INTRVL,IK),                 &
     &              EX,TDFS(N),REFS(N))
                  IF(EX.GT.1.E-6)THEN
                      SOURC=S0TRN(INTRVL,IK)/EX
                  ELSE
                      SOURC=S0*EXP                                      &
     &                  ((DEPRAT(INTRVL,IK)-1.00001)*S0DEP(INTRVL,IK))
                  ENDIF
                  SOURC=CSZENX(IK)*SOURC
                  EDNS(N)=SOURC*TDFS(N)
                  EUPS(N)=SOURC*REFS(N)
                  TDFS(N)=EX+TDFS(N)
                  COEF=TDFS(N)/(1-RUPCNS*REFS(N))
                  EUPCNS=EUPS(N)+COEF*(EUPCNS+EDNS(N)*RUPCNS)
                  RUPCNS=REFS(N)+COEF*TDFS(N)*RUPCNS
                  EUPCS(N)=EUPCNS
                  RUPCS(N)=RUPCNS
              ENDIF

!             END UPWARD LAYER LOOP:
          ENDDO

!         NOW ADD DOWNWARD FROM TOP LAYER (N=1):
          IK=ML
          DNF(INTRVL,IK)=0.
          IF(THERML)THEN
              EDNCN=0.
              UPF(INTRVL,IK)=EUPC(1)
              UPFLX(IK)=UPFLX(IK)+SUBINT(INTRVL)*EUPC(1)
              RDNCN=0.
          ELSE
              UPF(INTRVL,IK)=0.
          ENDIF
          DNFS(INTRVL,IK)=0.
          IF(IEMSCT.EQ.2)THEN
              EDNCNS=0.
              UPFS(INTRVL,IK)=EUPCS(1)
              UPFLXS(IK)=UPFLXS(IK)+SUBINT(INTRVL)*EUPCS(1)
              NTFLX(IK)=NTFLX(IK)+                                      &
     &          SUBINT(INTRVL)*(EUPCS(1)-CSZEN0(IK)*S0TRN(INTRVL,IK))
              RDNCNS=0.
          ELSE
              UPFS(INTRVL,IK)=0.
          ENDIF
          NM1=1
          DO N=2,NLAYRS
              IK=IK-1
              IF(THERML)THEN
                  DENOM=1-RDNCN*REF(NM1)
                  COEF=TDF(NM1)/DENOM
                  EDNCN=EDN(NM1)+COEF*(EDNCN+EUP(NM1)*RDNCN)
                  RDNCN=REF(NM1)+COEF*TDF(NM1)*RDNCN
                  DNF(INTRVL,IK)=(EDNCN+EUPC(N)*RDNCN)/DENOM
                  UPF(INTRVL,IK)=(EUPC(N)+EDNCN*RUPC(N))/DENOM
                  DNFLX(IK)=DNFLX(IK)+SUBINT(INTRVL)*DNF(INTRVL,IK)
                  UPFLX(IK)=UPFLX(IK)+SUBINT(INTRVL)*UPF(INTRVL,IK)
                  NTFLX(IK)=NTFLX(IK)+SUBINT(INTRVL)*                   &
     &              (EUPC(N)*(1-RDNCN)-EDNCN*(1-RUPC(N)))/DENOM
              ELSE
                  DNF(INTRVL,IK)=0.
                  UPF(INTRVL,IK)=0.
              ENDIF
              IF(IEMSCT.EQ.2)THEN
                  DENOM=1-RDNCNS*REFS(NM1)
                  COEF=TDFS(NM1)/DENOM
                  EDNCNS=EDNS(NM1)+COEF*(EDNCNS+EUPS(NM1)*RDNCNS)
                  RDNCNS=REFS(NM1)+COEF*TDFS(NM1)*RDNCNS
                  DNFS(INTRVL,IK)=(EDNCNS+EUPCS(N)*RDNCNS)/DENOM
                  UPFS(INTRVL,IK)=(EUPCS(N)+EDNCNS*RUPCS(N))/DENOM
                  CZTS0=CSZEN0(IK)*S0TRN(INTRVL,IK)
                  DNDRCT(IK,NFLUX)                                      &
     &              =DNDRCT(IK,NFLUX)+DBLE(SUBINT(INTRVL)*CZTS0)
                  DNFLXS(IK)=DNFLXS(IK)+SUBINT(INTRVL)*DNFS(INTRVL,IK)
                  UPFLXS(IK)=UPFLXS(IK)+SUBINT(INTRVL)*UPFS(INTRVL,IK)
                  NTFLX(IK)=NTFLX(IK)-SUBINT(INTRVL)*(CZTS0             &
     &              +(EDNCNS*(1-RUPCS(N))-EUPCS(N)*(1-RDNCNS))/DENOM)
              ELSE
                  DNFS(INTRVL,IK)=0.
                  UPFS(INTRVL,IK)=0.
              ENDIF
              NM1=N

!             END DOWNWARD LAYER LOOP:
          ENDDO

!         SURFACE (IK=1, N=ML, NM1=NLAYRS):
          IF(THERML)THEN
              DENOM=1-RDNCN*REF(NLAYRS)
              COEF=TDF(NLAYRS)/DENOM
              EDNCN=EDN(NLAYRS)+COEF*(EDNCN+EUP(NLAYRS)*RDNCN)
              RDNCN=REF(NLAYRS)+COEF*TDF(NLAYRS)*RDNCN
              DNF(INTRVL,1)=(EDNCN+EUPC(ML)*RDNCN)/DENOM
              UPF(INTRVL,1)=EUPC(ML)+SALB*DNF(INTRVL,1)
              DNFLX(1)=DNFLX(1)+SUBINT(INTRVL)*DNF(INTRVL,1)
          ELSE
              DNF(INTRVL,1)=0.
              UPF(INTRVL,1)=0.
          ENDIF
          IF(IEMSCT.EQ.2)THEN
              DENOM=1-RDNCNS*REFS(NLAYRS)
              COEF=TDFS(NLAYRS)/DENOM
              EDNCNS=EDNS(NLAYRS)+COEF*(EDNCNS+EUPS(NLAYRS)*RDNCNS)
              RDNCNS=REFS(NLAYRS)+COEF*TDFS(NLAYRS)*RDNCNS
              DNFS(INTRVL,1)=(EDNCNS+EUPCS(ML)*RDNCNS)/DENOM
              UPFS(INTRVL,1)=SALB*DNFS(INTRVL,1)+EUPCS(ML)
              DNDRCT(1,NFLUX)=DNDRCT(1,NFLUX)                           &
     &          +DBLE(SUBINT(INTRVL)*(CSZEN0(1)*S0TRN(INTRVL,1)))
              DNFLXS(1)=DNFLXS(1)+SUBINT(INTRVL)*DNFS(INTRVL,1)
          ELSE
              DNFS(INTRVL,1)=0.
              UPFS(INTRVL,1)=0.
          ENDIF

!         END K-DISTRIBUTION LOOP
      ENDDO

!     USE DISORT TO SCALE SURFACE FLUXES:
      DNFLX(1)=SURSCL*DNFLX(1)
      DNFLXS(1)=SURSCL*DNFLXS(1)

      IF(THERML)UPFLX(1)=EUPC(ML)+SALB*DNFLX(1)
      NTFLX(1)=UPFLX(1)-DNFLX(1)
      IF(IEMSCT.EQ.2)THEN
          UPFLXS(1)=AADREF*REAL(DNDRCT(1,NFLUX))+SALB*DNFLXS(1)
          NTFLX(1)=NTFLX(1)+UPFLXS(1)-DNFLXS(1)-REAL(DNDRCT(1,NFLUX))
          DNDRCT(ML,NFLUX)=DBLE(CSZEN0(ML)*S0)
      ENDIF
      NTFLX(ML)=NTFLX(ML)+UPFLX(ML)
      IF(NOPRNT.NE.9)THEN

!         HAVE DISORT SCALING SPECTRAL GRID POINTS:
          DO IK=1,ML
              UPDIFF(IK,NFLUX)=DBLE(UPFLX(IK)+UPFLXS(IK))
              DNDIFF(IK,NFLUX)=DBLE(DNFLX(IK)+DNFLXS(IK))
          ENDDO
      ENDIF

!     RETURN TO ROUTINE LOOP:
      RETURN
      END
