      SUBROUTINE DRIVER(ID)
      IMPLICIT NONE

!     PARAMETERS:
!      THREAD: Thread number handled by MPI
!       MAXDAT   MAXIMUM LAYERS*FREQUENCIES*KNTRVL VALUES ALLOWED
!                FOR STORING MULTIPLE SCATTERING DATA.
      INTEGER MAXDAT,ID
      CHARACTER LABEL*6
      COMMON /PRONUM/LABEL
      PARAMETER(MAXDAT=0)
      INCLUDE 'PARAMS.h'
      INCLUDE 'ERROR.h'

!     COMMONS:
      INCLUDE 'IFIL.h'
      INCLUDE 'YPROP.h'
      INCLUDE 'BASE.h'
      INCLUDE 'PC.h'

!     /CARD1/
!       MODEL    MODEL ATMOSPHERE INDEX.
!       ITYPE    SLANT PATH TYPE.
!       IEMSCT   RADIATIVE TRANSFER MODE.
!                  0 FOR TRANSMITTANCE
!                  1 FOR THERMAL EMISSION ONLY
!                  2 FOR THERMAL EMISSION PLUS SOLAR SCATTER
!                  3 FOR TRANSMITTED SOLAR IRRADIANCE
!                  4 FOR SOLAR SCATTER ONLY
!       M1       MODEL ATMOSPHERE FOR PRESSURE & TEMPERATURE PROFILES.
!       M2       MODEL ATMOSPHERE FOR H2O PROFILE.
!       M3       MODEL ATMOSPHERE FOR O3 PROFILE.
!       I_RD2C   READ CARD 2C, 2C1, ... IF EQUAL 1; SKIP IF EQUAL TO 0.
!       NOPRNT   PRINT FLAG.
!       MODTRN   MODTRAN BAND MODEL FLAG.
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT,MODTRN

!     /SURFWV/
!       LAMBER  LOGICAL FLAG, .TRUE. FOR LAMBERTIAN SURFACE.
!       TPTEMP  TARGET-PIXEL SURFACE TEMPERATURES [K].
!       TPHDIR  TARGET-PIXEL HEMISPHERE DIRECTIONAL REFLECTANCE AT
!               VIEWING ANGLES.
!       TPBRDF  TARGET-PIXEL BIDIRECTIONAL REFLECTANCE DISTRIBUTION
!               FUNCTION AT VIEWING AND SUN ANGLES.
!       AATEMP  AREA-AVERAGED GROUND SURFACE TEMPERATURES [K].
!       AASALB  AREA-AVERAGED GROUND SURFACE ALBEDO.
!       AADREF  AREA-AVERAGED GROUND SURFACE DIRECTIONAL REFLECTIVITY
!               AT THE SOLAR ZENITH ANGLE.
!       EMU     GROUND DIRECTIONAL EMISSIVITY AT VIEWING ANGLES.
!       BEM     GROUND DIRECTIONAL EMISSIVITY AT QUADRATURE ANGLES.
!       RMU     GROUND BRDF AZIMUTH COMPONENTS AT VIEWING ANGLES
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
!       BDR     GROUND BRDF AZIMUTH COMPONENTS AT QUADRATURE ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
      LOGICAL LAMBER
      REAL TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,EMU,BEM,RMU,BDR
      COMMON/SURFWV/LAMBER,TPTEMP(MLOS),TPHDIR(MLOS),TPBRDF(MLOS),      &
     &  AATEMP,AASALB,AADREF,EMU(MXUMU),BEM(MI),                        &
     &  RMU(1:MXUMU,0:MI,0:MAZ),BDR(1:MI,0:MI,0:MAZ)                    &

!     /CARD2A/
      INTEGER NCRALT,NCRSPC
      DOUBLE PRECISION CTHIK,CALT
      REAL CEXT,CWAVLN,CCOLWD,CCOLIP,CHUMID,ASYMWD,ASYMIP
      COMMON/CARD2A/CTHIK,CALT,CEXT,NCRALT,NCRSPC,CWAVLN,CCOLWD,        &
     &  CCOLIP,CHUMID,ASYMWD,ASYMIP

!     /CARD2D/
      INTEGER IREG,IREGC
      DOUBLE PRECISION ALTB
      COMMON/CARD2D/IREG(4),ALTB(4),IREGC(4)

!     /CARD3/
!       H1ALT    OBSERVER (SENSOR) ALTITUDE [KM].
!       H2ALT    FINAL (TANGENT FOR LIMB PATH) ALTITUDE [KM].
!       OBSZEN   OBSERVER ZENITH ANGLE (H1ALT TO H2ALT) [DEG].
!       HRANGE   DISTANCE FROM H1ALT TO H2ALT [KM].
!       BETA     EARTH CENTER ANGLE BETWEEN H1ALT AND H2ALT [DEG].
!       REARTH   RADIUS OF THE EARTH [KM].
!       HMIN     PATH MINIMUM ALTITUDE [KM].
!       HMAX     PATH MAXIMUM ALTITUDE [KM].
!       CKRANG   MAXIMUM PATH RANGE FOR K-DISTRIBUTION OUTPUT
!                (=0. FOR TOTAL PATH ONLY; <0. FOR ALL RANGES).
!       BCKZEN   ZENITH ANGLE FOR BACKWARD (H2ALT TO H1ALT) PATH [DEG].
!       REARTH   EARTH RADIUS [KM].
!       ANGLEM   LUNAR PHASE ANGLE [0 TO 180 DEG].
!       LENN     PATH LENGTH SWITCH (0=SHORT, 1=LONG).
!       IDAY     DAY OF YEAR [0-366, DEFAULT (0) IS DAY 91].
!       ISOURC   SOURCE FLAG [0=SUN AND 1=MOON].
!       NLOS     NUMBER OF LINE-OF-SIGHT PATHS.
      INTEGER LENN,IDAY,ISOURC,NLOS
      DOUBLE PRECISION H1ALT,H2ALT,OBSZEN,HRANGE,BETA,REARTH,           &
     &  HMIN,HMAX,CKRANG,BCKZEN,ANGLEM
      COMMON/CARD3/H1ALT(MLOS),H2ALT(MLOS),OBSZEN(MLOS),HRANGE(MLOS),   &
     &  BETA(MLOS),HMIN(MLOS),HMAX(MLOS),CKRANG(MLOS),BCKZEN(MLOS),     &
     &  REARTH,ANGLEM,LENN(MLOS),IDAY,ISOURC,NLOS

!     /CARD3A/
!       G        SCATTERING FUNCTION ASYMMETRY FACTOR.
      INTEGER IPH
      REAL G
      COMMON/CARD3A/IPH,G

!     /CARD4/
!       IV1      LOWEST SPECTRAL FREQUENCY OUTPUT [CM-1].
!       IV2      HIGHEST SPECTRAL FREQUENCY OUTPUT [CM-1].
!       IDV      PRINTOUT SPECTRAL FREQUENCY STEP SIZE [CM-1].
!       IFWHM    TRIANGULAR SLIT FULL-WIDTH-HALF-MAXIMUM [CM-1].
!       VBAND    CURRENT COMPUTATION BAND FREQUENCY [CM-1].
!                (EQUALS BAND CENTER FOR 1, 5 & 15 CM-1 BAND MODELS;
!                EQUALS THE MINIMUM BAND VALUE FOR 0.1 CM-1 BAND MODEL)
!       IBINPT   BIN NUMBER OF CURRENT SPECTRAL POINT.
!                (CENTER FREQUENCY = IBINPT * BNDWID + OSHIFT).
!       IBINLO   BIN NUMBER OF (PADDED) SPECTRAL RANGE LOWER BOUND.
!       IBINHI   BIN NUMBER OF (PADDED) SPECTRAL RANGE UPPER BOUND.
!       IBINMN   BIN NUMBER OF MINIMUM COMPUTATION SPECTRAL POINT.
!       IBINMX   BIN NUMBER OF MAXIMUM COMPUTATION SPECTRAL POINT.
!       IBINDL   BIN NUMBER INCREMENT FOR SPECTRAL PRINTOUT.
!       IBINRS   BIN NUMBER INCREMENT EQUAL TO SPECTRAL RESOLUTION.
!       IBINOS   BIN NUMBER OFFSET BETWEEN CURRENT & OUTPUT SPC POINTS.
!       IBINWR   BIN NUMBER OF NEXT SPECTRAL DATA WRITE.
!       MBINPT   BIN NUMBER MAXIMUM FOR CURRENT BAND MODEL RESOLUTION.
!       IDBIN5   SPECTRAL BIN NUMBER STEP SIZE FOR 5 CM-1 GRID.
!       ISTEP5   INCREMENT FOR RETRIEVING 5 CM-1 RESOLUTION DATA [CM-1].
!       NSPCDT   NUMBER OF OUTPUT SPECTRAL DATA POINTS.
      DOUBLE PRECISION IDV
      REAL IV1,IV2,IFWHM,VBAND
      INTEGER IBINPT,IBINLO,IBINHI,IBINMN,IBINMX,IBINDL,                &
     &  IBINRS,IBINOS,IBINWR,MBINPT,IDBIN5,ISTEP5,NSPCDT
      COMMON/CARD4/IDV,IV1,IV2,IFWHM,VBAND,IBINPT,IBINLO,IBINHI,IBINMN, &
     &  IBINMX,IBINDL,IBINRS,IBINOS,IBINWR,MBINPT,IDBIN5,ISTEP5,NSPCDT

!     /RCNSTN/
!       PI       THE CONSTANT PI
!       DEG      NUMBER OF DEGREES IN ONE RADIAN.
!       BIGNUM   MAXIMUM SINGLE PRECISION NUMBER.
!       BIGEXP   MAXIMUM EXPONENTIAL ARGUMENT WITHOUT OVERFLOW.
!       RRIGHT   SMALLEST SINGLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
      REAL PI,DEG,BIGNUM,BIGEXP,RRIGHT
      COMMON/RCNSTN/PI,DEG,BIGNUM,BIGEXP,RRIGHT

!     /DCNSTN/
!       DRIGHT   SMALLEST DOUBLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
!       DPDEG    NUMBER OF DEGREES IN ONE RADIAN IN DOUBLE PRECISION
      DOUBLE PRECISION DRIGHT,DPDEG
      COMMON/DCNSTN/DRIGHT,DPDEG

!     /CNTRL/
!       NSEG     NUMBER OF PATH SEGMENTS ALONG LINE-OF-SIGHT.
!       ML       NUMBER OF ATMOSPHERIC PROFILE LEVELS.
!       MLFLX    NUMBER OF LEVELS FOR WHICH FLUX VALUES ARE WRITTEN.
!       IMULT    MULTIPLE SCATTERING FLAG
!                  (0=NONE, 1=AT SENSOR, -1=AT FINAL OR TANGENT POINT).
!       THERML   FLAG TO CALCULATE THERMAL SCATTER.
      INTEGER NSEG,ML,MLFLX,IMULT
      LOGICAL THERML
      COMMON/CNTRL/NSEG(0:MLOSP1),ML,MLFLX,IMULT,THERML

!     /MPROF/
!       ZM       PROFILE LEVEL ALTITUDES [KM].
!       PM       PROFILE LEVEL PRESSURES [MBAR].
!       TM       PROFILE LEVEL TEMPERATURES [K].
!       RFNDX    PROFILE LEVEL REFRACTIVITIES.
!       LRHSET   FLAG, .TRUE. IF RELATIVE HUMIDITY IS NOT TO BE SCALED.
      DOUBLE PRECISION ZM
      REAL PM,TM,RFNDX
      LOGICAL LRHSET
      COMMON/MPROF/ZM(LAYDIM),PM(LAYDIM),TM(LAYDIM),                    &
     &  RFNDX(LAYDIM),LRHSET(LAYDIM)

!     /SAVEMS/
!       LUSEMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS REUSED.
!       LSAVMS  LOGICAL, TRUE IF MULTIPLE SCATTERING DATA IS  SAVED.
      LOGICAL LUSEMS,LSAVMS
      COMMON/SAVEMS/LUSEMS,LSAVMS

!     COMMON /CFLAGS/
!       YFLAG    Y COORDINATE FLAG FOR plot.dat FILE
!                  = "T" FOR TRANSMITTANCE
!                  = "R" FOR RADIANCE (IRRADIANCE FOR IEMSCT=3)
!                  = "N" FOR NO plot.dat OUTPUT
!       XFLAG    X COORDINATE FLAG FOR plot.dat FILE
!                  = "W" FOR FREQUENCY IN WAVENUMBERS (CM-1) AND
!                        RADIANCE IN W SR-1 CM-2 / CM-1
!                  = "M" FOR WAVELENGTH IN MICRONS AND
!                        RADIANCE IN W SR-1 CM-2 / MICRON
!                  = "N" FOR WAVELENGTH IN NANOMETERS AND
!                        RADIANCE IN MICRO-WATTS SR-1 CM-2 / NANOMETER
!       DLIMIT   DELIMITER CHARACTER STRING BETWEEN MODTRAN RUNS
!       FLAGS    SCANNING FUNCTION FLAGS.
      CHARACTER YFLAG*1,XFLAG*1,DLIMIT*8,FLAGS*7
      COMMON/CFLAGS/YFLAG,XFLAG,DLIMIT,FLAGS

!     COMMON /AERC/ IS FOR AEROSOL ANGSTROM-LAW PERTURBATIONS.
!     /AERC/
!       ASTMO   AEROSOL ANGSTROM LAW OFFSET.
      REAL ASTROM,ASTMO
      COMMON/AERC/ASTROM(MAER,MXWVLN),ASTMO

!     /JM1/
!       CODE     CODE INPUT FLAG: 'F' OR 'L' FOR LOWTRAN BAND MODEL.
!                                 'T' OR 'M' FOR MODTRAN BAND MODEL.
!                                 'C' OR 'K' FOR CORRELATED-K MODEL.
!       SPEED    COMPUTATIONAL SPEED FLAG USED WITH CK MODEL ['F' OR '2'
!                FOR FAST (12 K'S), 'M' OR '1' FOR MODERATE (17 K'S),
!                AND 'S' OR '0' FOR SLOW (33 K'S); 'S' IS DEFAULT]
!       SURREF   SURFACE REFLECTANCE CHARACTER STRING.
!                IF FIRST NON-BLANK CHARACTER IS "B",
!                  BI-DIRECTIONAL REFLECTANCE DISTRIBUTION
!                  FUNCTION (BRDF) DATA IS READ IN.
!                IF FIRST NON-BLANK CHARACTER IS "L" OR "-"
!                  SURFACE IS MODELED AS A LAMBERTIAN REFLECTOR AND
!                  SPECTRAL ALBEDO IS READ FROM FILE "DATA/spec_alb.dat"
!                OTHERWISE, THE CHARACTER STRING IS ASSUMED TO CONTAIN
!                  A SPECTRALLY INDEPENDENT VALUE FOR SURFACE ALBEDO.
      CHARACTER CODE*1,SPEED*1,SURREF*7
      COMMON/JM1/CODE,SPEED,SURREF

!     /JM1A1/
!       RESCHR   BAND MODEL RESOLUTION CHARACTER STRING.
!       DISSTR   CHARACTER STRING USED TO READ IN DISORT LOGICALS.
!       H2OSTR   VERTICAL WATER COLUMN CHARACTER STRING (IF THE
!                FIRST NON-BLANK CHARACTER IS A "G", THE WATER
!                COLUMN IN GM/CM2 FOLLOWS "G"; IF THE FIRST
!                NON-BLANK CHARACTER IS AN "A", THE WATER COLUMN
!                IN ATM-CM AT 273.15K FOLLOWS "A"; OTHERWISE THE
!                STRING CONTAINS A WATER COLUMN SCALING FACTOR).
!       O3STR    VERTICAL OZONE COLUMN CHARACTER STRING (IF THE
!                FIRST NON-BLANK CHARACTER IS A "G", THE OZONE
!                COLUMN IN GM/CM2 FOLLOWS "G"; IF THE FIRST
!                NON-BLANK CHARACTER IS AN "A", THE OZONE COLUMN
!                IN ATM-CM AT 273.15K FOLLOWS "A"; OTHERWISE THE
!                STRING CONTAINS AN OZONE COLUMN SCALING FACTOR).
!       USRSUN   USER-SPECIFIED TOP-OF-ATMOSPHERE SOLAR IRRADIANCE FILE.
!       BMROOT   PREFIX OF MOLECULAR BAND MODEL PARAMETERS FILE.
!       FILTNM   NAME OF FILTER RESPONSE FUNCTION FILE.
!       H2OAER   FLAG, TRUE IF DEFAULT AEROSOL PROPERTIES ARE REVISED
!                BASED ON WATER COLUMN SCALING.
!       DATDIR   NAME OF THE MODTRAN DATA DIRECTORY.
      CHARACTER RESCHR*2,DISSTR*3,H2OSTR*10,O3STR*10,USRSUN*(NAMLEN),   &
     &  FILTNM*(NAMLEN),BMROOT*(NAMLEN),H2OAER*1,DATDIR*(NAMLEN-LENSUN)
      COMMON/JM1A1/RESCHR,DISSTR,H2OSTR,O3STR,USRSUN,                   &
     &  FILTNM,BMROOT,H2OAER,DATDIR

!     /JM1A2/
!       SOLCON   SOLAR CONSTANT (ACTUAL VALUE IF POSITIVE,
!                                SCALE FACTOR IF NEGATIVE).
      LOGICAL LSUN
      REAL SFWHM,CO2MX,SOLCON
      COMMON/JM1A2/LSUN,SFWHM,CO2MX,SOLCON

!     /JM5/
!       IRPT     REPEAT INPUT FLAG (0=NONE, 1=ALL, 3=GEOM, 4=SPEC).
!       IFAC     CURRENT COLUMN SCALING FACTOR INDEX.
!       NFACMN   NUMBER OF COLUMN SCALING FACTOR LESS THAN 1.
!       NFACMX   NUMBER OF COLUMN SCALING FACTOR GREATER THAN 1.
!       FACMC    CURRENT COLUMN SCALING FACTOR.
!       SCALMN   MINIMUM COLUMN SCALING FACTOR.
!       SCALMX   MAXIMUM COLUMN SCALING FACTOR.
!       LBMRES   LOGICAL FLAG, .TRUE. FOR BAND MODEL AND .FALSE.
!                FOR 1 NM SPECTRAL RESOLUTION OUTPUT.
      INTEGER IRPT,IFAC,NFACMN,NFACMX
      REAL FACMC
      DOUBLE PRECISION SCALMN,SCALMX
      LOGICAL LBMRES
      COMMON/JM5/SCALMN,SCALMX,IRPT,IFAC,NFACMN,NFACMX,FACMC,LBMRES

!     /CJM5/
!       AMOD3D   FLAG INDICATING OUTPUT DATABASE FILE TYPE:
      CHARACTER AMOD3D*1
      COMMON/CJM5/AMOD3D

!     /SPCCTL/
!       DODRGD   .TRUE. FOR NON-DEFAULT SPECTRAL ANALYSIS.
      LOGICAL DODGRD
      COMMON/SPCCTL/DODGRD

!     /TP8CTL/
!       LTAPE8   .TRUE. IF TAPE8 IS BEING WRITTEN.
      LOGICAL LTAPE8
      COMMON/TP8CTL/LTAPE8

!     /SUNFLG/
!       LNFLRT   LENGTH OF I/O FILE ROOT NAME, 0 IF NO mod5root.in FILE.
!       LRDSUN   SOLAR DATA FLAG, TRUE IF IRRADIANCES IN COMMON BLOCK
!                /SOL01/ HAVE BEEN MODIFIED FROM THE BLOCK DATA.
      INTEGER LNFLRT
      LOGICAL LRDSUN
      COMMON/SUNFLG/LNFLRT,LRDSUN

!     /SUNNAM/
!       SUNFIL   NAME OF DEFAULT FILE CONTAINING SOLAR IRRADIANCE DATA.
!       FLRT     ROOT NAME FOR ALL I/O FILES.
      CHARACTER FLRT*(NAMLEN-4),SUNFIL*(LENSUN)
      COMMON/SUNNAM/FLRT,SUNFIL

!     /landoceanflag/
!       landocean   Use CBRDF to determine scene type as land or ocean
!                   = 1 Land; = 0 Ocean
      INTEGER landocean
      COMMON/landoceanflag/landocean

!     Added to be able to output radiance file from driver and include 
!     solar zenith angle.
!     /ANGSRF/
!       CVWSRF  COSINE OF THE VIEW ZENITH ANGLE FROM THE SURFACE.
!       CSNSRF  COSINE OF THE SOLAR (LUNAR) ZENITH AT SURFACE.
!       AZMSRF  RELATIVE AZIMUTH ANGLE (SUN - SENSOR AT SURFACE) [RAD].
!       UMU1    COSINE OF THE PATH NADIR ANGLE.
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       UMU0    COSINE OF THE SOLAR ZENITH ANGLE.
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       PHI1    RELATIVE AZIMUTH ANGLE (SUN - LOS PATH AT SENSOR) [DEG].
!               (AT H1ALT IF IMULT=1; AT OR "NEAR" H2ALT IF IMULT=-1)
!       CMU     COSINE OF THE NADIR ANGLES USED IN DISORT.
      REAL CVWSRF,CSNSRF,AZMSRF,UMU1,UMU0,PHI1,CMU
      COMMON/ANGSRF/CVWSRF(MLOS),CSNSRF(MLOS),AZMSRF(MLOS),UMU1(MLOS),  &
     &  UMU0,PHI1(MLOS),CMU(MI)

!     SAVED COMMONS:
      SAVE /SUNFLG/,/SUNNAM/

!     DECLARE BLOCK DATA ROUTINES EXTERNAL:
      EXTERNAL DEVCBD,S01BD,TITLE

!     FUNCTIONS:
!       RFLECT   DECODES SURREF AND DEFINES SURFACE REFLECTANCE
!                FUNCTION.  RETURNS FALSE IF SURREF CAN NOT BE DECODED.
!       GEODRV   COMPUTES COLUMN AMOUNTS; RETURNS .TRUE. IF SUCCESSFUL.
      LOGICAL RFLECT,GEODRV

!     LOCAL VARIABLES:
!       LMODEL   FLAG, .TRUE. IF MODEL ATMOSPHERE IS USED.
!       LNFILT   LENGTH OF FILTER RESPONSE FUNCTION FILE NAME.
!       H2OCOL   WATER COLUMN [KM GM /M3].
!       O3COL    OZONE COLUMN [KM GM /M3].
!       IRPTSV   ORIGINAL REPEAT RUN (IRPT) INPUT.  IF NEGATIVE,
!                A REPEAT RUN MESSAGE IS OUTPUT TO THE TERMINAL.
!       GETSP1   TOP-OF-ATMOSPHERE SOLAR IRRADIANCES TABULATED
!                EACH 0.1 WAVENUMBER [W CM-2 / CM-1].
!       GETS01   TOP-OF-ATMOSPHERE SOLAR IRRADIANCES TABULATED
!                EACH 1.0 WAVENUMBER [W CM-2 / CM-1].
!       GETS05   TOP-OF-ATMOSPHERE SOLAR IRRADIANCES TABULATED
!                EACH 05 WAVENUMBERS [W CM-2 / CM-1].
!       GETS15   TOP-OF-ATMOSPHERE SOLAR IRRADIANCES TABULATED
!                EACH 15 WAVENUMBERS [W CM-2 / CM-1].
!       LENDAT   LENGTH OF DATDIR STRING.
!       APPREF   FLAG, .TRUE. IF APPREF REFLECTANCE IS COMPUTED
!                INSTEAD OF RADIANCE.
!       ASTMC    AEROSOL ANGSTROM LAW COEFFICIENT @ 550 NM.
!       ASTMX    AEROSOL ANGSTROM LAW EXPONENT.
!       LASTM    LOGICAL FLAG, TRUE IS ANGSTROM PARAMETERS ARE INPUT.
!       LDASTM   LOGICAL IMPLYING THAT ASTMX IS A DELTA VALUE.
!       LAPLUS   LOGICAL FLAG FOR THE AEROSOL A+ OPTION.
!       LOPEN    LOGICAL FLAG, .TRUE. IF FILE IS OPEN.
!       I_SCAN   SCANNING FUNCTION NUMERICAL LABEL.
!       FWSCAN   NUMBER OF FULL-WIDTH AT HALF-MAXIMUM (FWHM)
!                USED TO INTEGRATE SCANNING FUNCTION
!       DEGALL   LOGICAL FLAG, .TRUE. TO SCAN (DEGRADE) ALL TAPE7 DATA.
!       DH2O     WATER LAYER THICKNESS (mm), INPUT FROM CARD 4A!
!       MLTRFL   'T' MULTIPLE REFLECTION; 'F' SINGLE PASS EXTINCTION.
!       INITC1   LOGICAL FLAG, .TRUE. FOR INITIAL PASS THROUGH CD1.
!       KPRINT   LOGICAL FLAG DICTATING K-DISTRIBUTION OUTPUT.
!       REFPTH   NAME OF REFRACTIVE PATH INPUT FILE.
!       AERRH    RELATIVE HUMIDITY USED FOR AEROSOL MODELS [%].
!       ZMAX     MAXIMUM ATMOSPHERIC PROFILE ALTITUDE [KM].
!       NMFLRT   CURRENT CASE NUMBER, SET TO -1 WHEN DONE.
!       ILOS     LOOP INDEX FOR OBSERVER ZENITH ANGLES.
!       ILOSLO   FIRST LOOP INDEX FOR OBSERVER ZENITH ANGLES.
!       ITYPKP   KEPT VALUE OF INPUT ITYPE.
      CHARACTER CLRT*(NAMLEN),PLTOUT*(NAMLEN),SPFLUX*(NAMLEN),          &
     &  DBOUT*(NAMLEN),REFPTH*(NAMLEN)
!     GLUT CHARACTER DODB*7
      LOGICAL LAPLUS,LOPEN,DEGALL,LMODEL,LYMOL,                         &
     &  LSKIP,APPREF,LASTM,LDASTM(2),MLTRFL,INITC1,KPRINT
      INTEGER I,IWAV,JPRT,KNTRVL,I_SCAN,LNFILT,IRPTSV,MARIC1,MARK,      &
     &  LENDAT,NSSALB,NMFLRT,ILOS,ILOSLO,ITYPKP
      REAL TPTMPS,H2OCOL,O3COL,FWSCAN,ASTMC,ASTMX,RHASYM,GETS01,GETS05, &
     &  GETS15,GETSP1,DH2O,AERRH
      DOUBLE PRECISION ZMAX
      EXTERNAL GETS01,GETS05,GETS15,GETSP1

!     LOCAL ARRAYS:
!       ICH      NUMERIC LABEL FOR AEROSOL MODEL.
!       GROUND   FLAG, .TRUE. IF LINE-OF-SIGHT TERMINATES AT THE GROUND.
      INTEGER ICH(4)
      LOGICAL GROUND(MLOS)

!     DATA:
!       H1SAV    SAVED VALUE OF INPUT H1ALT.
!       H2SAV    SAVED VALUE OF INPUT H2ALT.
!       OZENSV   SAVED VALUE OF INPUT OBSZEN.
!       RNGSAV   SAVED VALUE OF INPUT HRANGE.
!       BETASV   SAVED VALUE OF INPUT BETA.
!       HMINSV   SAVED VALUE OF HMIN.
!       BZENSV   SAVED VALUE OF INPUT BCKZEN.
!       LENNSV   SAVED VALUE OF INPUT LENN.
!       LXIST7   LOGICAL FLAG, .TRUE. IF TAPE7.SCR IS TO BE REUSED.
      DOUBLE PRECISION H1SAV(MLOS),H2SAV(MLOS),OZENSV(MLOS),            &
     &  RNGSAV(MLOS),BETASV(MLOS),HMINSV(MLOS),BZENSV(MLOS)
      INTEGER LENNSV(MLOS),IKMAXS
      LOGICAL LXIST7
      SAVE H1SAV,H2SAV,OZENSV,RNGSAV,BETASV,HMINSV,                     &
     &  BZENSV,LENNSV,IKMAXS,LXIST7
      DATA H1SAV/MLOS*0.D0/,H2SAV/MLOS*0.D0/,OZENSV/MLOS*0.D0/,         &
     &  RNGSAV/MLOS*0.D0/,BETASV/MLOS*0.D0/,HMINSV/MLOS*0.D0/,          &
     &  BZENSV/MLOS*0.D0/,LENNSV/MLOS*0/,IKMAXS/0/,LXIST7/.FALSE./

      REAL(KIND=8) RADOUT(mxchnl), data_out(mxchnl+2)
      INTEGER(KIND=2), PARAMETER :: ifntp5=197
      INTEGER(KIND=4) ntp5, ios, itp5
      INTEGER :: nchall, irec
      CHARACTER(LEN=80) :: ctape5fn

!     From trans.f, for converting cos(solzen) to solzen.   
      real*8 sr2d
      parameter(sr2d=90.d0/acos(0.d0))

!     DEFINE CONSTANTS
!       BIGNUM  CUTOFF FOR AVOIDING OVERFLOWS
!       BIGEXP  ARGUMENT CUTOFF FOR AVOIDING OVERFLOWS IN EXP FUNCTION
      PI=2*ACOS(0.)
      DPDEG=90/ACOS(0.D0)
      DEG=REAL(DPDEG)
      BIGNUM=1.0E35
      BIGEXP=LOG(BIGNUM)
      CALL RIGHT(RRIGHT,DRIGHT)

!     MPOINT MAPS BAND MODEL SPECIES TO EXTINCTION SOURCE NUMBER.
      MPOINT( 1)=17
      MPOINT( 2)=36
      MPOINT( 3)=31
      MPOINT( 4)=47
      MPOINT( 5)=44
      MPOINT( 6)=46
      MPOINT( 7)=50
      MPOINT( 8)=54
      MPOINT( 9)=56
      MPOINT(10)=55
      MPOINT(11)=52
      MPOINT(12)=11

      DO I=1,NMOLX+MMOLY
          MPOINT(NMOL+I)=MEXT+I
      ENDDO


      WRITE(LABEL, '(I6.6)') ID
!     Input filenames for multiple tape5 runs
      OPEN(ifntp5, FILE="list_tape5"//".asc", IOSTAT=ios)
      READ(ifntp5,'(I4)') ntp5
!      WRITE(*,*), 'Read through asc file'

      open(618,file='radiance'//'.bin',form='Unformatted',
     &         access='Direct',recl=8)
!      open(617,file='radiance'//LABEL//'.out',status='replace')
      irec = 0

      DO itp5 = 1, ntp5
         READ(ifntp5,'(A80)') ctape5fn

      IF(LJMASS)OUTPUTCOUNT=0

!     DEFINE FILE NAMES AND OPEN FILES:
      LNFLRT=-1
      NMFLRT=0

   10 CONTINUE
      INITC1=.TRUE.
!      WRITE(*,*), CTAPE5FN
      CALL FNAMES(NMFLRT,CTAPE5FN,CLRT,SPFLUX,DBOUT,REFPTH)

      IF(NMFLRT.EQ.-1)RETURN

!     START CALCULATION:
   20 CONTINUE
      IREG(1)=0
      IREG(2)=0
      IREG(3)=0
      IREG(4)=0
      DO IWAV=1,MXWVLN
          DO I=1,MAER
              EXTC(I,IWAV)=0.
              ABSC(I,IWAV)=0.
              ASYM(I,IWAV)=0.
          ENDDO
      ENDDO

!     CARD 1:
      CALL CD1(NLOS,TPTMPS,APPREF,LMODEL,LYMOL,INITC1,KPRINT,CLRT)
!GLUT CALL CD1(NLOS,APPREF,LMODEL,CLRT,DODB)
      ITYPKP=ITYPE
      IF(LJMASS)TPTMPS=TPTEMP(1)
!     BINARY FILE NAMES:
      CALL FNAMBN(PLTOUT,LNFLRT,FLRT)

!     CARD 1A:
      CALL CD1A(LENN(1),ASTMC,ASTMX,ASTMO,AERRH,LNFILT,LENDAT,KNTRVL,   &
     &  LASTM,LDASTM,NSSALB,RHASYM,KPRINT)

!     CARD 2 AEROSOL MODEL:
      CALL CD2(LAPLUS,LMODEL,ICH,LNFLRT,FLRT)

!     CARD 2A CLOUD MODEL:
      CALL CD2A(LMODEL)
!      print '(a)', 'Card 2A Done'

!     CARD 2B VERTICAL STRUCTURE ALGORITHM:
      CALL CD2B
!      print '(a)', 'Card 2B Done'

!     CARD 2C USER-DEFINED PROFILES:
      CALL CD2C(LMODEL,LAPLUS,LENDAT,MARIC1,MARK,JPRT,ICH,              &
     &  H2OCOL,O3COL,LYMOL,REARTH)
!      print '(a)', 'Card 2C Done'

!     CARD 2E USER-SUPPLIED AEROSOL EXTINCTION, ABSORPTION & ASYMMETRY:
      CALL CD2E
!      print '(a)', 'Card 2E Done'

!     RE-ENTRY FOR REPEAT GEOMETRY INPUT OPTION (IRPT=3):
   30 CONTINUE
      ILOSLO=2

!     CARD 3 GEOMETRY IPUTS:
      CALL CD3(1,REFPTH)
!      print '(a)', 'Card 3 Done'

!     CARD 3A SOLAR GEOMETRY INPUTS:
      CALL CD3A(ANGLEM,IDAY,ISOURC)
!      print '(a)', 'Card 3A Done' 

!     RE-ENTRY FOR REPEAT SPECTRAL INPUT OPTION (IRPT=4):
   40 CONTINUE

!     CARD 4 SPECTRAL INPUTS (UNLESS ONLY GEOMETRY CHANGED):
      IF(IRPT.NE.3)CALL CD4(ICH(1),MARIC1,MARK,NLOS,LNFILT,             &
     &  I_SCAN,FWSCAN,DEGALL,PLTOUT,SPFLUX,NMFLRT,LNFLRT,FLRT)
!      print '(a)', 'Card 4 Done'

!     INITIALIZE COOLING RATE FITTING COEFFICIENTS:
      IF(IMULT.NE.0)CALL COOL0(IRPT)

!           write(*,*), 'Beginning Scratch File Writing'
!     DO NOT CREATE A MULTIPLE SCATTERING SCRATCH
!     FILE IF IT WILL BE EXCESSIVELY LARGE.
      IF(LSAVMS)THEN
          IF(ML*KNTRVL*(1+(IBINMX-IBINLO)/IBINDL).GT.MAXDAT)THEN
              LSAVMS=.FALSE.
              LUSEMS=.FALSE.
              CLOSE(ISCRCH)
          ELSEIF(LUSEMS)THEN
              IF(.NOT.LJMASS)WRITE(IPR,'(/(2A))')                       &
     &          ' ***  ASYMMETRY FACTORS, OPTICAL DEPTHS AND VERTICAL', &
     &          ' FLUXES FROM   ***',' *** THE PREVIOUS MULTIPLE',      &
     &          ' SCATTERING CALCULATION WILL BE RE-USED. ***'
          ELSEIF(.NOT.LJMASS)THEN
              WRITE(IPR,'(/(2A))')' *** ASYMMETRY FACTORS, OPTICAL',    &
     &          ' DEPTHS AND VERTICAL FLUXES ***',' *** ARE BEING',     &
     &          ' SAVED IN A SCRATCH FILE FOR SUBSEQUENT USE. ***'
          ENDIF
      ENDIF
!      write(*,*), 'Finished Scratch File for Scattering'

!     COMPUTE COLUMN DENSITY DATA:
      TPTEMP(1)=TPTMPS
      ZMAX=ZM(ML)
      
!      write(*,*), 'Computing Column Densities and assigning variables'
      IF(.NOT.GEODRV(GROUND,KPRINT,LDASTM,LASTM,ASTMC,ASTMX,            &
     &  RHASYM,AERRH,ZMAX,1,H1SAV(1),H2SAV(1),OZENSV(1),                &
     &  RNGSAV(1),BETASV(1),HMINSV(1),BZENSV(1),                        &
     &  LENNSV(1),IKMAXS,KNTRVL,ICH,LNFLRT,FLRT,LABEL))THEN

!         GEOMETRY ERROR DETECTED:
          IF(LJMASS)THEN
!      write(*,*), 'Second Condition Envoked! exitting program'
              CALL WRTBUF(FATAL)
              RETURN
          ENDIF

!         READ REMAINDER OF INPUTS AFTER A GEOMETRY ERROR DETECTED.
!      write(*,*), 'GEometry Errors detected, reading remainders'
          CALL GEOERR(NLOS,LENDAT,LNFLRT,IRPTSV,FLRT,LABEL)
          GOTO 60
      ENDIF

!     LOOP OVER ADDITIONAL LINE-OF-SIGHT PATHS
      DO ILOS=ILOSLO,NLOS

!         CARD 3 GEOMETRY IPUTS:
          CALL CD3(ILOS,REFPTH)

!         COMPUTE COLUMN DENSITY DATA:
          TPTEMP(ILOS)=TPTMPS
          IF(.NOT.GEODRV(GROUND,KPRINT,LDASTM,LASTM,ASTMC,ASTMX,RHASYM, &
     &      AERRH,ZMAX,ILOS,H1SAV(ILOS),H2SAV(ILOS),OZENSV(ILOS),       &
     &      RNGSAV(ILOS),BETASV(ILOS),HMINSV(ILOS),BZENSV(ILOS),        &
     &      LENNSV(ILOS),IKMAXS,KNTRVL,ICH,LNFLRT,FLRT,LABEL))THEN

!             GEOMETRY ERROR DETECTED:
              IF(LJMASS)THEN
!             write(*,*), 'Geometry Error detected, exitting program'
                  CALL WRTBUF(FATAL)
                  RETURN
              ENDIF

!             READ REMAINDER OF INPUTS AFTER A GEOMETRY ERROR DETECTED
!      write(*,*), 'Reading remainders after Geometry Error'
              CALL GEOERR(NLOS,LENDAT,LNFLRT,IRPTSV,FLRT)
              GOTO 60
          ENDIF

!     END LOOP OVER ADDITIONAL LINE-OF-SIGHT PATHS:
      ENDDO
!      write(*,*), 'done with do loop'

!     SURFACE REFLECTANCE MODEL
      AATEMP=0.
      IF(.NOT.RFLECT(SURREF,DATDIR,LENDAT,NLOS,DH2O,MLTRFL))THEN
          WRITE(IPR,'(/2A,/18X,3A)')' Error in DRIVER: ',               &
     &      ' Surface reflectance specification based on',              &
     &      ' input SURREF = "',SURREF,'" was unsuccessful.'
          IF(LJMASS)THEN
              CALL WRTBUF(FATAL)
              RETURN
          ENDIF
          STOP 'Error in DRIVER:  Surface not defined; check tape6.'
      ENDIF


!     The BRDF Model was read in RFLECT and was used to determine Land/Ocean flag.
      call PCRTM_INIT
!      print '(a)', 'Calling PCRTM_INIt'

!     AREA-AVERAGED SURFACE TEMPERATURE (IF NOT YET DEFINED):
      IF(AATEMP.LE.0.)THEN
          IF(GROUND(1) .AND. TPTMPS.GT.0.)THEN

!             USED TARGET-PIXEL VALUE SINCE IT IS ON THE GROUND:
              AATEMP=TPTMPS
          ELSE

!             SET TO BOTTOM TEMPERATURE PROFILE VALUE:
              AATEMP=TM(1)
          ENDIF
      ENDIF

!     RE-ENTRY POINT FOR MCSCENE DATABASE GENERATION:
   50 CONTINUE

!     WRITE HEADERS AND READ CARD 5:
      CALL CD5(FLRT,LNFLRT,H2OCOL,O3COL,TPTMPS)
      IRPTSV=IRPT
      IRPT=ABS(IRPT)

!     CHECK TO SEE IF TAPE7.SCR EXISTS AND IS TO BE REUSED.
      LSKIP=.FALSE.
      IF(FLAGS(6:6).EQ.'R' .AND. LXIST7)CALL REBIN(LSKIP,IEMSCT,JPUSCR)
      IF(LSKIP)THEN
          WRITE(IPR,'(/2A)')' *****  CALL TO TRANS IS SKIPPED ',        &
     &      '- PREVIOUS RESULTS ARE CONVOLVED  *****'
          IF(BINOUT)THEN
              INQUIRE(JPLOT,OPENED=LOPEN)
              IF(LOPEN)WRITE(JPLOT)DLIMIT
          ELSE
              INQUIRE(IPLOT,OPENED=LOPEN)
              IF(LOPEN)WRITE(IPLOT,'(A)')DLIMIT
          ENDIF
      ELSEIF(RESCHR.EQ.'05' .AND. .NOT.LSUN)THEN

!         USE SOLAR IRRADIANCE DATA STORED IN /SOL05/:
          CALL TRANS(RESCHR,IPH,ISOURC,IDAY,ANGLEM,                     &
     &      GROUND,KNTRVL,NLOS,LNFILT,GETS05,APPREF,DH2O,               &
     &      MLTRFL,NCHALL,RADOUT)
      ELSEIF(RESCHR.EQ.'15' .AND. .NOT.LSUN)THEN
!      print '(a)', 'Initializing Card 5'

!         USE SOLAR IRRADIANCE DATA STORED IN /SOL15/:
          CALL TRANS(RESCHR,IPH,ISOURC,IDAY,ANGLEM,                     &
     &      GROUND,KNTRVL,NLOS,LNFILT,GETS15,APPREF,DH2O,               &
     &      MLTRFL,NCHALL,RADOUT)
      ELSEIF(RESCHR.EQ.'p1')THEN

!         USE SOLAR IRRADIANCE DATA READ INTO /SOLP1/:
          CALL TRANS(RESCHR,IPH,ISOURC,IDAY,ANGLEM,                     &
     &      GROUND,KNTRVL,NLOS,LNFILT,GETSP1,APPREF,DH2O,               &
     &      MLTRFL,NCHALL,RADOUT)
      ELSE

!         USE SOLAR IRRADIANCE DATA CURRENTLY IN /SOL01/:
          CALL TRANS(RESCHR,IPH,ISOURC,IDAY,ANGLEM,                     &
     &      GROUND,KNTRVL,NLOS,LNFILT,GETS01,APPREF,DH2O,               &
     &      MLTRFL,NCHALL,RADOUT)

!         RESTORE 1 CM-1 SOLAR IRRADIANCE DATA FILE IF IT WAS ALTERED:
          IF(LRDSUN)THEN
              !CALL RDSUN(1.,DATDIR(1:LENDAT)//SUNFIL,'6',0.,LNFLRT,FLRT)
              CALL RDSUN(1.,DATDIR(1:LENDAT)//'SUN01kurucz1997.dat','6',&
     &                   0.,LNFLRT,FLRT)
              LRDSUN=.FALSE.
          ENDIF
      ENDIF

       write(617, *) DBLE(nchAll)
       write(617, *) DBLE(acos(UMU0)*sr2d)
       irec = irec + 1
       write(618,rec=irec) DBLE(nchAll)
       irec = irec + 1
       write(618,rec=irec) DBLE(acos(UMU0)*sr2d)
       DO i=1,nchAll
          irec = irec + 1
          write(617,*)radout(i)
          write(618,rec=irec)radout(i)
       ENDDO

       GOTO 70

!     IF CONTINUUM OPTICAL DATA IS TO BE GENERATED,
!     SAVE .mc FILE AND OPEN .mch FILE.
      IF(AMOD3D.EQ.'C' .AND. IRPT.NE.0)THEN
          CLOSE(IDBOUT,STATUS='KEEP')
          IF(LNFLRT.LE.0)THEN
              CALL OPNFL(IDBOUT,0,'mch.dat','UNKNOWN','FORMATTED',      &
     &          'DRIVER')
          ELSE
              CALL OPNFL(IDBOUT,0,FLRT(1:LNFLRT)//'.mch','UNKNOWN',     &
     &          'FORMATTED','DRIVER')
          ENDIF
      ENDIF

!     IF AN ERROR WAS LOGGED, PROCESSING RESUMES HERE:
      IF(.NOT.LJMASS)THEN
          WRITE(IPU ,'(A)')TXTSPR
          IF(BINOUT)THEN
              CALL BN_SEP()
          ELSEIF(LTAPE8)THEN
              WRITE(IPR1,'(A)')TXTSPR
          ENDIF
      ENDIF

!     DEGRAD USING INFORMATION IN THE SCRATCH FILE TAPE7.SCR
      IF(DODGRD)THEN
          DO ILOS=1,NLOS
              CALL DGRD(DEGALL,I_SCAN,FWSCAN,                           &
     &          LSKIP,LNFLRT,FLRT,ILOS,NLOS)
!             IF (IRETURN .EQ. 1) THEN
!                FLAGS(5:6) = '  '
!                GOTO 60
!             ENDIF
          ENDDO
      ELSE
          FLAGS(5:6)='  '
      ENDIF

!     CONTINUE HERE IF A FAILED GEOMETRY WAS DETECTED:
   60 CONTINUE

!     DEALLOCATE CLOUD SPECTRAL DATA ARRAYS:
      IF(NCRSPC.EQ.1 .AND. IRPT.LE.1)CALL CRDEAL
      IF(IRPT.EQ.0)THEN
          IF(.NOT.LJMASS)THEN
              IF(IFAC.LT.NFACMX)THEN

!                 REWIND JPUSCR TO AVOID SAVING TOO MUCH DATA:
                  REWIND(JPUSCR)
              ELSEIF(FLAGS(5:5).NE.'S')THEN
                  CLOSE(JPUSCR,STATUS='DELETE')
              ELSE
                  CLOSE(JPUSCR,STATUS='KEEP')
              ENDIF
          ENDIF
      ELSE
          IF(.NOT.LJMASS)REWIND(JPUSCR)
          LXIST7=FLAGS(5:5).EQ.'S'
      ENDIF
      IF(.NOT.LJMASS)WRITE(IPR,'(/A,I5,A1,3(I3,F9.0))')' CARD 5 *****', &
     &  IRPT,AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
      IF(IRPT.EQ.5 .OR. IFAC.LT.NFACMX)THEN
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-5)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with scaled amounts.'
          GOTO 50
      ELSEIF(IRPT.EQ.4)THEN

!         ENTER NEW SPECTRAL INPUTS:
!           LINE-OF-SIGHT CALCULATIONS ARE REPEATED BECAUSE INDEX
!           OF REFRACTION CHANGES.  USE SAVED GEOMETRY INPUTS.
          DO ILOS=1,NLOS
              H1ALT(ILOS)=H1SAV(ILOS)
              H2ALT(ILOS)=H2SAV(ILOS)
              OBSZEN(ILOS)=OZENSV(ILOS)
              HRANGE(ILOS)=RNGSAV(ILOS)
              BETA(ILOS)=BETASV(ILOS)
              BCKZEN(ILOS)=BZENSV(ILOS)
              LENN(ILOS)=LENNSV(ILOS)
          ENDDO
          ITYPE=ITYPKP
          IF(ITYPE.EQ.4)THEN
              HMIN(1)=HMINSV(1)
              NSEG(1)=IKMAXS
          ENDIF
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-4)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with new spectral inputs.'

!         MAKE ONLY ONE PASS THROUGH PATH GEOMETRY LOOP:
          ILOSLO=NLOS+1
          GOTO 40
      ELSEIF(IRPT.EQ.3)THEN

!         ENTER NEW GEOMETRY INPUTS:
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-3)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with new geometry inputs.'
          ITYPE=ITYPKP
          GOTO 30
      ELSEIF(IRPT.LE.1)THEN

!GLUT    GLUT GENERATION OPTION:
!GLUT    CALL UPCASE(DODB)
!GLUT    IF(DODB.EQ.'ADBONLY')THEN
!GLUT       CALL WRTDB(DBOUT)
!GLUT       CREATE ADB BUT REWIND TAPE6, TAPE7, TAPE8.
!GLUT       REWIND(IPR)
!GLUT       REWIND(IPU)
!GLUT       REWIND(IPR1)
!GLUT       REWIND(IPLOT)
!GLUT    ELSEIF(INDEX(DODB,'ADB').NE.0)THEN
!GLUT       CALL WRTDB(DBOUT)
!GLUT       CREATE ADB BUT REWIND ONLY TAPE7.
!GLUT       REWIND(IPU)
!GLUT    ELSE
!GLUT       CLOSE(IDBIN,STATUS='DELETE')
!GLUT       CLOSE(IDBOUT,STATUS='DELETE')
!GLUT    ENDIF

!         ENTER ALL NEW INPUTS:
          IF(.NOT.LJMASS .AND. IRPTSV.EQ.-1)WRITE(*,'(/A)')             &
     &      ' Beginning MODTRAN repeat run with all new inputs.'
          IF(IRPT.EQ.1)GOTO 20
      ENDIF
      IF(KNTRVL.GT.1 .AND. AMOD3D.EQ.'T')CALL M3DDB(KNTRVL,NSEG(1))     

   70 CONTINUE

!     CLOSE FILES:
      IF(LJMASS)CALL WRTBUF(SUCCES)
      CALL FLCLOS(NMOLYS,NMOLY,NOPRNT)

!     INITIATE NEXT RUN:
!!    print*, "LJMASS, LNFLRT = ", LJMASS, LNFLRT
!!    IF(.NOT.LJMASS .AND. LNFLRT.GT.0)GOTO 10


      END DO

      close(617)
      close(618)
      CALL RMFIL
!      print '(a)', 'Subroutine Driver is finished running'
      RETURN
      END

      SUBROUTINE GEOERR(NLOS,LENDAT,LNFLRT,IRPTSV,FLRT)

!     READS REMAINDER OF INPUTS AFTER A GEOMETRY ERROR IS DETECTED.
      IMPLICIT NONE

!     PARAMETERS:
      INCLUDE 'PARAMS.h'

!     INPUT ARGUMENTS:
!       NLOS     NUMBER OF LINE-OF-SIGHT PATHS.
!       LENDAT   LENGTH OF DATDIR STRING.
!       LNFLRT   LENGTH OF I/O FILE ROOT NAME, 0 IF NO mod5root.in FILE.
!       FLRT     ROOT NAME FOR ALL I/O FILES.
      INTEGER NLOS,LENDAT,LNFLRT
      CHARACTER FLRT*(NAMLEN-4),LABEL*6
      COMMON /PRONUM/LABEL

!     OUTPUT ARGUMENTS:
!       IRPTSV   ORIGINAL REPEAT RUN (IRPT) INPUT.  IF NEGATIVE,
!                A REPEAT RUN MESSAGE IS OUTPUT TO THE TERMINAL.
      INTEGER IRPTSV

!     COMMONS:
      INCLUDE 'IFIL.h'

!     /SURFWV/
!       LAMBER  LOGICAL FLAG, .TRUE. FOR LAMBERTIAN SURFACE.
!       TPTEMP  TARGET-PIXEL SURFACE TEMPERATURES [K].
!       TPHDIR  TARGET-PIXEL HEMISPHERE DIRECTIONAL REFLECTANCE AT
!               VIEWING ANGLES.
!       TPBRDF  TARGET-PIXEL BIDIRECTIONAL REFLECTANCE DISTRIBUTION
!               FUNCTION AT VIEWING AND SUN ANGLES.
!       AATEMP  AREA-AVERAGED GROUND SURFACE TEMPERATURES [K].
!       AASALB  AREA-AVERAGED GROUND SURFACE ALBEDO.
!       AADREF  AREA-AVERAGED GROUND SURFACE DIRECTIONAL REFLECTIVITY
!               AT THE SOLAR ZENITH ANGLE.
!       EMU     GROUND DIRECTIONAL EMISSIVITY AT VIEWING ANGLES.
!       BEM     GROUND DIRECTIONAL EMISSIVITY AT QUADRATURE ANGLES.
!       RMU     GROUND BRDF AZIMUTH COMPONENTS AT VIEWING ANGLES
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
!       BDR     GROUND BRDF AZIMUTH COMPONENTS AT QUADRATURE ANGLE
!               AND AT SUN (=0) OR QUADRATURE (>0) ANGLE.
      LOGICAL LAMBER
      REAL TPTEMP,TPHDIR,TPBRDF,AATEMP,AASALB,AADREF,EMU,BEM,RMU,BDR
      COMMON/SURFWV/LAMBER,TPTEMP(MLOS),TPHDIR(MLOS),TPBRDF(MLOS),      &
     &  AATEMP,AASALB,AADREF,EMU(MXUMU),BEM(MI),                        &
     &  RMU(1:MXUMU,0:MI,0:MAZ),BDR(1:MI,0:MI,0:MAZ)                    &

!     /JM1/
!       CODE     CODE INPUT FLAG: 'F' OR 'L' FOR LOWTRAN BAND MODEL.
!                                 'T' OR 'M' FOR MODTRAN BAND MODEL.
!                                 'C' OR 'K' FOR CORRELATED-K MODEL.
!       SPEED    COMPUTATIONAL SPEED FLAG USED WITH CK MODEL ['F' OR '2'
!                FOR FAST (12 K'S), 'M' OR '1' FOR MODERATE (17 K'S),
!                AND 'S' OR '0' FOR SLOW (33 K'S); 'S' IS DEFAULT]
!       SURREF   SURFACE REFLECTANCE CHARACTER STRING.
!                IF FIRST NON-BLANK CHARACTER IS "B",
!                  BI-DIRECTIONAL REFLECTANCE DISTRIBUTION
!                  FUNCTION (BRDF) DATA IS READ IN.
!                IF FIRST NON-BLANK CHARACTER IS "L" OR "-"
!                  SURFACE IS MODELED AS A LAMBERTIAN REFLECTOR AND
!                  SPECTRAL ALBEDO IS READ FROM FILE "DATA/spec_alb.dat"
!                OTHERWISE, THE CHARACTER STRING IS ASSUMED TO CONTAIN
!                  A SPECTRALLY INDEPENDENT VALUE FOR SURFACE ALBEDO.
      CHARACTER CODE*1,SPEED*1,SURREF*7
      COMMON/JM1/CODE,SPEED,SURREF

!     /JM1A1/
!       RESCHR   BAND MODEL RESOLUTION CHARACTER STRING.
!       DISSTR   CHARACTER STRING USED TO READ IN DISORT LOGICALS.
!       H2OSTR   VERTICAL WATER COLUMN CHARACTER STRING (IF THE
!                FIRST NON-BLANK CHARACTER IS A "G", THE WATER
!                COLUMN IN GM/CM2 FOLLOWS "G"; IF THE FIRST
!                NON-BLANK CHARACTER IS AN "A", THE WATER COLUMN
!                IN ATM-CM AT 273.15K FOLLOWS "A"; OTHERWISE THE
!                STRING CONTAINS A WATER COLUMN SCALING FACTOR).
!       O3STR    VERTICAL OZONE COLUMN CHARACTER STRING (IF THE
!                FIRST NON-BLANK CHARACTER IS A "G", THE OZONE
!                COLUMN IN GM/CM2 FOLLOWS "G"; IF THE FIRST
!                NON-BLANK CHARACTER IS AN "A", THE OZONE COLUMN
!                IN ATM-CM AT 273.15K FOLLOWS "A"; OTHERWISE THE
!                STRING CONTAINS AN OZONE COLUMN SCALING FACTOR).
!       USRSUN   USER-SPECIFIED TOP-OF-ATMOSPHERE SOLAR IRRADIANCE FILE.
!       BMROOT   PREFIX OF MOLECULAR BAND MODEL PARAMETERS FILE.
!       FILTNM   NAME OF FILTER RESPONSE FUNCTION FILE.
!       H2OAER   FLAG, TRUE IF DEFAULT AEROSOL PROPERTIES ARE REVISED
!                BASED ON WATER COLUMN SCALING.
!       DATDIR   NAME OF THE MODTRAN DATA DIRECTORY.
      CHARACTER RESCHR*2,DISSTR*3,H2OSTR*10,O3STR*10,USRSUN*(NAMLEN),   &
     &  FILTNM*(NAMLEN),BMROOT*(NAMLEN),H2OAER*1,DATDIR*(NAMLEN-LENSUN)
      COMMON/JM1A1/RESCHR,DISSTR,H2OSTR,O3STR,USRSUN,                   &
     &  FILTNM,BMROOT,H2OAER,DATDIR

!     /JM5/
!       IRPT     REPEAT INPUT FLAG (0=NONE, 1=ALL, 3=GEOM, 4=SPEC).
!       IFAC     CURRENT COLUMN SCALING FACTOR INDEX.
!       NFACMN   NUMBER OF COLUMN SCALING FACTOR LESS THAN 1.
!       NFACMX   NUMBER OF COLUMN SCALING FACTOR GREATER THAN 1.
!       FACMC    CURRENT COLUMN SCALING FACTOR.
!       SCALMN   MINIMUM COLUMN SCALING FACTOR.
!       SCALMX   MAXIMUM COLUMN SCALING FACTOR.
!       LBMRES   LOGICAL FLAG, .TRUE. FOR BAND MODEL AND .FALSE.
!                FOR 1 NM SPECTRAL RESOLUTION OUTPUT.
      INTEGER IRPT,IFAC,NFACMN,NFACMX
      REAL FACMC
      DOUBLE PRECISION SCALMN,SCALMX
      LOGICAL LBMRES
      COMMON/JM5/SCALMN,SCALMX,IRPT,IFAC,NFACMN,NFACMX,FACMC,LBMRES

!     /CJM5/
!       AMOD3D   FLAG INDICATING OUTPUT DATABASE FILE TYPE:
      CHARACTER AMOD3D*1
      COMMON/CJM5/AMOD3D

!     /TP8CTL/
!       LTAPE8   .TRUE. IF TAPE8 IS BEING WRITTEN.
      LOGICAL LTAPE8
      COMMON/TP8CTL/LTAPE8

!     /SPCCTL/
!       DODRGD   .TRUE. FOR NON-DEFAULT SPECTRAL ANALYSIS.
      LOGICAL DODGRD
      COMMON/SPCCTL/DODGRD

!     LOCAL VARIABLES:
!       DH2O     WATER LAYER THICKNESS (mm), INPUT FROM CARD 4A!
!       MLTRFL   'T' MULTIPLE REFLECTION; 'F' SINGLE PASS EXTINCTION.
      REAL DH2O
      LOGICAL MLTRFL

!     FUNCTIONS:
!       RFLECT   DECODES SURREF AND DEFINES SURFACE REFLECTANCE
!                FUNCTION.  RETURNS FALSE IF SURREF CAN NOT BE DECODED.
      LOGICAL RFLECT

!     SURFACE REFLECTANCE MODEL:
      AATEMP=0.
      IF(.NOT.RFLECT(SURREF,DATDIR,LENDAT,NLOS,DH2O,MLTRFL))THEN
          WRITE(IPR,'(/2A,/18X,3A)')' Error in GEOERR: ',               &
     &      ' Surface reflectance specification based on',              &
     &      ' input SURREF = "',SURREF,'" was unsuccessful.'
          STOP 'Error in GEOERR:  Surface not defined; check tape6.'
      ENDIF
      CALL CARD5(LNFLRT,FLRT)
      IRPTSV=IRPT
      IRPT=ABS(IRPT)

!     FINAL OUTPUT FOR FAILED GEOMETRY:
      WRITE(IPU,'(I5,A1,3(I3,F9.3),/A)')                                &
     &  IRPT,AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC,TXTSPR
      IF(BINOUT)THEN
          CALL BNWT8(IRPT,NFACMN,NFACMX,IFAC,SCALMN,SCALMX,FACMC,AMOD3D)
          CALL BN_SEP()
      ELSEIF(LTAPE8)THEN
          WRITE(IPR1,'(I5,A1,3(I3,F9.3))')                              &
     &      IRPT,AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC
          WRITE(IPR1,'(A)')TXTSPR
      ENDIF
      IF(DODGRD)WRITE(JPUSCR)                                           &
     &  IRPT,AMOD3D,NFACMN,SCALMN,NFACMX,SCALMX,IFAC,FACMC

!     RESET IFAC TO INDICATE THAT LOOP OVER SCALING FACTOR IS DONE:
      IFAC=NFACMX
      RETURN
      END



      SUBROUTINE PCRTM_INIT
!______________________________________________________________________|
!     |
!     06/15/2012 added by Hui Li          
!     Read PCRTM parameters                                            |
!______________________________________________________________________|
      
!     ZEROS A REAL ARRAY -A- HAVING -LENGTH- ELEMENTS:
      IMPLICIT NONE
      INCLUDE 'PC.h'
!     DEFINE 

!     /landoceanflag/
!     landocean   Use CBRDF to determine scene type as land or ocean
      INTEGER landocean
      COMMON/landoceanflag/landocean

      integer i,j,imono,ik,ib
      real tmp(MxChnl)
      !--------ADD pcrtm.in for PCRTM calculation-----
!     CHARACTER GridFile*80,ParFile*80
      CHARACTER(LEN=80) :: Gridfile,GridFileLand,GridFileOcean
      CHARACTER(LEN=80) :: ParFile,ParFileLand,ParFileOcean

!     NAMELIST /InOutPar/GridFile,ParFile
      NAMELIST /InOutPar/GridFileLand,GridFileOcean,ParFileLand,
     &                   ParFileOcean

      open(615,file='pcrtm.in',action='read')
      read(615,InOutPar)
      close(615)

      IF (landocean .EQ. 1) THEN
         GridFile = GridFileLand
         ParFile = ParFileLand
      ELSE IF (landocean .EQ. 0) THEN
         GridFile = GridFileOcean
         ParFile = ParFileOcean
      ELSE
         print*, "ERROR in PCRTM_INIT, land/ocean flag"
      END IF

      open(530, file=GridFile,STATUS='old')
      read(530, *) nMono,nk

      initflag=.false.
      do imono=1,nMono
          read(530,*) ChanCheck(imono),(IKcheck(imono,ik),ik=1,nk)
      enddo

      if (MOD(ChanCheck(1),5) .ne. 0) then
          initflag=.true.
          nMono=nMono+1
          do imono=nMono,2,-1
             ChanCheck(imono)=ChanCheck(imono-1)
             do ik=1,nk
                IKcheck(imono,ik)=IKcheck(imono-1,ik)
             end do
          end do
          ChanCheck(1)=ChanCheck(1)-MOD(ChanCheck(1),5)
          IKcheck(1,:)=0
          IKcheck(1,1)=1
      end if
      
      close(530)


!     read in PCRTM parameters
      open(616,file=PARFILE,status='old')
      read(616,*) nb

      do ib=1,nb

        read(616,*) nReg(ib), nPcBnd(ib),nch(ib)

        read(616,*) (radStd(i,ib),i=1,nReg(ib))
   
        read(616,*) (frqChBnd(i,ib),i=1,nch(ib))
    
        read(616,*) (radStdCh(i,ib),i=1,nch(ib))

        read(616,*) ((regCoef(i,j,ib),i=1,nReg(ib)),j=1,nPcBnd(ib))  

        read(616,*) ((PC(j,i,ib),j=1,nPcBnd(ib)),i=1,nch(ib)) 

        read(616,*) (RadMeanCh(i,ib),i=1,nch(ib))

        read(616,*) (tmp(i),i=1,nch(ib))
      end do ! do ib=1,nb
      
      close(616)
      
      RETURN
      END

