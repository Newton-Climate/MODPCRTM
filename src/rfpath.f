      SUBROUTINE RFPATH(REARTH,H1,H2,ANGLE,LENN,HMIN,GETAMT,            &
     &  PHI,BETA,HRANGE,BEND)

!     RFPATH TRACES THE REFRACTED RAY FROM H1 WITH INITIAL ZENITH
!     ANGLE "ANGLE" TO H2 WHERE THE ZENITH ANGLE IS PHI, AND CALCULATES
!     THE ABSORBER AMOUNTS (IF GETAMT) ALONG THE PATH.  IT STARTS
!     FROM THE LOWEST POINT ALONG THE PATH (THE TANGENT HEIGHT HMIN
!     IF LENN=1 OR HA=MIN(H1,H2) IF LENN=0) AND PROCEEDS TO THE HIGHEST
!     POINT.  BETA AND HRANGE ARE THE EARTH CENTERED ANGLE AND THE
!     TOTAL DISTANCE RESPECTIVELY FOR THE REFRACTED PATH FROM H1 TO H2.
      IMPLICIT NONE

!     INPUT ARGUMENTS:
!       REARTH   RADIUS OF THE EARTH [KM].
!       H1       OBSERVER (SENSOR) ALTITUDE [KM].
!       H2       FINAL (TARGET) ALTITUDE [KM].
!       ANGLE    ZENITH ANGLE FROM H1 TO H2 [DEG].
!       LENN     PATH LENGTH SWITCH (0=SHORT, 1=LONG).
!       HMIN     PATH MINIMUM ALTITUDE.
!       GETAMT   LOGICAL FLAG, .TRUE. IF COLUMN AMOUNTS ARE CALCULATED.
!       PHI      ZENITH ANGLE AT TARGET (H2) TO OBSERVER (H1) [DEG].

!     OUTPUT ARGUMENTS:
!       PHI      ZENITH ANGLE AT TARGET (H2) TO OBSERVER (H1) [DEG].
!       BETA     EARTH CENTER ANGLE BETWEEN H1 AND H2 [DEG].
!       HRANGE   DISTANCE FROM H1 TO H2 [KM].
!       BEND     BENDING DUE TO REFRACTION ALONG PATH [DEG].
      DOUBLE PRECISION REARTH,H1,H2,ANGLE,HMIN,PHI,BETA,HRANGE,BEND
      INTEGER LENN
      LOGICAL GETAMT

!     PARAMETERS
      INCLUDE 'PARAMS.h'

!     COMMONS:
      INCLUDE 'IFIL.h'
      INCLUDE 'SOLS.h'

!     /FILLP/
!       ZP       ALTITUDE AT REFRACTED PATH LEVELS [KM].
!       RANGEP   SEGMENT RANGE [KM].
!       PP       PRESSURE AT REFRACTED PATH LEVELS [MBAR].
!       TP       TEMPERATURE AT REFRACTED PATH LEVELS [K].
!       RHP      RELATIVE HUMIDITY AT REFRACTED PATH LEVELS [%].
!       RFNDXP   REFRACTIVITIES AT REFRACTED PATH LEVELS.
!       DENPTH   ATMOSPHERIC LEVEL DENSITIES
!                [UNITS VARY WITH SPECIES BUT MOST OFTEN ATM CM / KM].
      DOUBLE PRECISION ZP,RANGEP,PP,RFNDXP,DENPTH
      REAL TP,RHP
      COMMON/FILLP/ZP(LAYDM1),RANGEP(LAYDM1),PP(LAYDM1),                &
     &  TP(LAYDM1),RHP(LAYDM1),RFNDXP(LAYDM1),DENPTH(0:MEXTXY,1:LAYDM1)

!     /PTHAMT/
!       PPSUM    DENSITY WEIGHTED PATH SEGMENT AVERAGE PRESSURE [MBAR].
!       TPSUM    DENSITY WEIGHTED PATH SEGMENT AVERAGE TEMPERATURE [K].
!       APSAPX   AEROSOL PATH SEGMENT SPECTRAL EXTINCTION OPTICAL DEPTH.
!       APSAPA   AEROSOL PATH SEGMENT SPECTRAL ABSORPTION OPTICAL DEPTH.
!       RHOPSM   REFRACTED PATH SEGMENT COLUMN DENSITY [G/CM3].
!       AMTPTH   PATH SEGMENT COLUMN DENSITIES
!                [UNITS VARY WITH SPECIES BUT OFTEN ATM CM].
      REAL PPSUM,TPSUM,APSAPX,APSAPA,RHOPSM,AMTPTH
      COMMON/PTHAMT/PPSUM(LAYDM1),TPSUM(LAYDM1),APSAPX(MWVSAP,LAYDM1),  &
     &  APSAPA(MWVSAP,LAYDM1),RHOPSM(LAYDM1),AMTPTH(0:MEXTXY,1:LAYDM1)

!     /PATH/
!       PTHCOS   COSINE OF PATH ZENITH AT PATH BOUNDARIES.
!       PTHZEN   PATH ZENITH AT PATH BOUNDARIES [DEG].
!       PTHECA   SENSOR TO PATH EARTH CENTER ANGLE [DEG].
!       PTHALT   ALTITUDES AT PATH BOUNDARIES [KM].
!       PTH_MS   ALTITUDES AT PATH BOUNDARIES FOR THE MS PATH.
!       PTHSEG   PATH SEGMENT LENGTH [KM].
!       PTHRNG   SENSOR TO PATH BOUNDARY RANGE [KM].
!       JMAX     NUMBER OF DISTINCT LOS PATH SEGMENT ENDPOINT ALTITUDES.
!       IKHMIN   PATH BOUNDARY INDEX OF PATH MINIMUM ALTITUDE.
!       IKHMAX   PATH BOUNDARY INDEX OF PATH MAXIMUM ALTITUDE.
!       IKOUT    NUMBER OF PATH BOUNDARIES K DATA IS OUTPUT.
!       NTKDIS   RECORD NUMBER FOR K-DISTRIBUTION TRANSMITTANCE FILE.
!       NRKDIS   RECORD NUMBER FOR K-DISTRIBUTION RADIANCE FILE.
!       MAPPTH   MAPPING FROM PATH SEGMENT MIDPOINT TO VERTICAL LAYER.
!       IPTHHT   ALTITUDES (HEIGHTS) AT PATH BOUNDARIES [M].
!       LOWALT   VERTICAL LAYER BOUNDARY INDEX AT OR JUST BELOW PTHALT.
!       FACALT   ALTITUDE INTERPOLATION FRACTION FOR PTHALT
!       PATH_T   TEMPERATURE AT PATH BOUNDARIES [K].
!       PATH_P   PRESSURE AT PATH BOUNDARIES [ATM].
!       PTHRH    RELATIVE HUMIDITY AT PATH BOUNDARIES [K].
!       LSSGEO   LOGICAL FLAG, .TRUE. FOR SOLAR PATHS.
!       LTANMX   LOGICAL FLAG, .TRUE. IF PATH HAS A TANGENT MAXIMUM.
      DOUBLE PRECISION PTHCOS,PTHZEN,PTHECA,PTHALT,PTH_MS,PTHSEG,PTHRNG
      INTEGER JMAX,IKHMIN,IKHMAX,IKOUT,NTKDIS,NRKDIS,MAPPTH,            &
     &  IPTHHT,LOWALT
      REAL FACALT,PATH_T,PATH_P,PTHRH
      LOGICAL LSSGEO,LTANMX
      COMMON/PATH/PTHCOS(0:LAYTWO),PTHZEN(0:LAYTWO),PTHECA(0:LAYTWO),   &
     &  PTHALT(0:LAYTWO,1:MLOS),PTH_MS(0:LAYDIM),PTHSEG(LAYTWO),        &
     &  PTHRNG(0:LAYTWO,1:MLOS),JMAX,IKHMIN(MLOS),IKHMAX(MLOS),         &
     &  IKOUT(MLOS),MAPPTH(LAYTWO,1:MLOS),IPTHHT(0:LAYTWO),NTKDIS,      &
     &  NRKDIS,LOWALT(0:LAYTWO,1:MLOS),FACALT(0:LAYTWO,1:MLOS),         &
     &  PATH_T(0:LAYTWO,1:MLOS),PATH_P(0:LAYTWO,1:MLOS),                &
     &  PTHRH(0:LAYTWO,1:MLOS),LSSGEO,LTANMX

!     /SMALL1/
      DOUBLE PRECISION DHALFR,DPRNG2
      COMMON/SMALL1/DHALFR,DPRNG2
      LOGICAL LSMALL
      COMMON/SMALL2/LSMALL
      LOGICAL LPRINT
      COMMON/CPRINT/LPRINT

!     /CARD1/
!       MODEL    MODEL ATMOSPHERE INDEX.
!       ITYPE    SLANT PATH TYPE.
!       IEMSCT   RADIATIVE TRANSFER MODE.
!                  0 FOR TRANSMITTANCE
!                  1 FOR THERMAL EMISSION ONLY
!                  2 FOR THERMAL EMISSION PLUS SOLAR SCATTER
!                  3 FOR TRANSMITTED SOLAR IRRADIANCE
!                  4 FOR SOLAR SCATTER ONLY
!       M1       MODEL ATMOSPHERE FOR PRESSURE & TEMPERATURE PROFILES.
!       M2       MODEL ATMOSPHERE FOR H2O PROFILE.
!       M3       MODEL ATMOSPHERE FOR O3 PROFILE.
!       I_RD2C   READ CARD 2C, 2C1, ... IF EQUAL 1; SKIP IF EQUAL TO 0.
!       NOPRNT   PRINT FLAG.
!       MODTRN   MODTRAN BAND MODEL FLAG.
      INTEGER MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT
      LOGICAL MODTRN
      COMMON/CARD1/MODEL,ITYPE,IEMSCT,M1,M2,M3,I_RD2C,NOPRNT,MODTRN

!     /DCNSTN/
!       DRIGHT   SMALLEST DOUBLE PRECISION REAL ADDED TO 1 EXCEEDS 1.
!       DPDEG    NUMBER OF DEGREES IN ONE RADIAN IN DOUBLE PRECISION
      DOUBLE PRECISION DRIGHT,DPDEG
      COMMON/DCNSTN/DRIGHT,DPDEG

!     DECLARE BLOCK DATA ROUTINES EXTERNA
      EXTERNAL DEVCBD

!     LOCAL VARIABLES:
!       LORDER   LOGICAL FLAG, .TRUE. IF H1 .LE. H2.
!       ANGLEA   ZENITH ANGLE AT HA [DEG].
!       SINPTH   SINE OF PATH ZENITH ANGLE AT PATH BOUNDARIES.
!       COSPTH   COSINE OF PATH ZENITH ANGLE AT PATH BOUNDARIES.
      LOGICAL LORDER
      INTEGER KA,JD,JO,KAMAX,JNEXT,JHA,J2,J,J1
      DOUBLE PRECISION DPANDX,HA,HB,RSCLHT,GAMMA0,CPATH,SINPTH,THETA,   &
     &  DBEND,DBETA,COSPTH,ANGLEA,SAVCOS,SAVSIN,RNG
      KAMAX=0

!     INITIALIZE PATH PARAMETERS:
      LORDER=H1.LE.H2
      IF(LORDER)THEN
          HA=H1
          HB=H2
          ANGLEA=ANGLE
      ELSE
          HA=H2
          HB=H1
          ANGLEA=PHI
      ENDIF
      IF(LSMALL)THEN
          SAVSIN=SIN(ANGLEA/DPDEG)
          SAVCOS=COS(ANGLEA/DPDEG)
          DBEND=0.D0
      ENDIF
      IF(.NOT.LJMASS .AND. GETAMT .AND. NPR.LT.1 .AND. LPRINT)          &
     &  WRITE(IPR,'(/A,///(3A))')                                       &
     &  ' CALCULATION OF THE REFRACTED PATH THROUGH THE ATMOSPHERE',    &
     &  '  I     START       END     START     DELTA     TOTAL',        &
     &  '     DELTA     EARTH    END TO     DELTA      PATH',           &
     &  '       LAYER   LAYER     LAYER',                               &
     &  '     ALTITUDE  ALTITUDE    TO END     RANGE     RANGE',        &
     &  '     EARTH    CENTER     START   BENDING   BENDING',           &
     &  '     AVERAGE     AVG   AVERAGE',                               &
     &  '                           ZENITH                    ',        &
     &  '     ANGLE     ANGLE    ZENITH                    ',           &
     &  '    PRESSURE    TEMP   DENSITY',                               &
     &  '         (KM)      (KM)     (DEG)     (KM)       (KM)',        &
     &  '     (DEG)     (DEG)     (DEG)     (DEG)    (DEG) ',           &
     &  '        (MB)     (K)  (GM/CM3)'
      JNEXT=1
      IF(LENN.EQ.1)THEN

!         LONG PATH:  FILL IN SYMMETRIC PART FROM TANGENT HEIGHT TO HA.
          CALL FILL(HMIN,HA,JNEXT)
          JHA=JNEXT
      ENDIF

!     FILL IN PATH FROM HA TO HB.
      IF(HA.NE.HB)CALL FILL(HA,HB,JNEXT)
      JMAX=JNEXT

!     INTEGRATE EACH PATH SEGMENT:
      BETA=0.D0
      HRANGE=0.D0
      BEND=0.D0
      IF(LENN.EQ.0)THEN

!         SHORT PATH:
          SINPTH=SIN(ANGLEA/DPDEG)
          COSPTH=COS(ANGLEA/DPDEG)
          CALL DPFISH(HA,RSCLHT,GAMMA0)
          CPATH=DPANDX(REARTH+HA,HA,RSCLHT,GAMMA0)*SINPTH
          JNEXT=1
          THETA=ANGLEA
      ELSE

!         DO LONG PATH SYMMETRIC PART:  FROM TANGENT HEIGHT ZP(1) TO HA.
          CALL DPSCHT(ZP(1),ZP(2),RFNDXP(1),RFNDXP(2),RSCLHT,GAMMA0)
          CPATH=DPANDX(REARTH+ZP(1),ZP(1),RSCLHT,GAMMA0)
          IF(.NOT.LJMASS .AND. GETAMT .AND. NPR.LT.1 .AND. LPRINT)THEN
              IF(LORDER)THEN
                  WRITE(IPR,'(2(6X,A,/))')'TANGENT   H1','HEIGHT'
              ELSE
                  WRITE(IPR,'(2(6X,A,/))')'TANGENT   H2','HEIGHT'
              ENDIF
          ENDIF
          SINPTH=1.D0
          COSPTH=0.D0
          THETA=90.D0
          J2=JHA-1
          RNG=DHALFR/J2
          DO J=1,J2
              CALL DPSCHT(ZP(J),ZP(J+1),RFNDXP(J),RFNDXP(J+1),          &
     &          RSCLHT,GAMMA0)
              IF(LSMALL)THEN
                  SINPTH=SAVSIN
                  COSPTH=SAVCOS
                  RANGEP(J)=RNG
                  PHI=ANGLEA
                  DBETA=(2*DPDEG*SAVSIN*RANGEP(J))                      &
     &              /(ZP(J)+ZP(J+1)+2*REARTH)
              ELSEIF(ITYPE.NE.4)THEN
                  SAVCOS=COSPTH
                  CALL RFGEOM(REARTH,ZP(J),ZP(J+1),CPATH,RSCLHT,GAMMA0, &
     &              SINPTH,COSPTH,RANGEP(J),DBEND)
                  IF(SINPTH.GT. 1.D0)SINPTH= 1.D0
                  IF(SINPTH.LT.-1.D0)SINPTH=-1.D0
                  DBEND=DBEND*DPDEG
                  BEND=BEND+DBEND
                  PHI=ASIN(SINPTH)*DPDEG
                  DBETA=THETA-PHI+DBEND
              ENDIF
              IF(GETAMT)CALL SEGMNT(J,J+1,REARTH,RANGEP(J),SAVCOS,      &
     &          COSPTH,PPSUM(J),TPSUM(J),RHOPSM(J),AMTPTH(0,J),         &
     &          APSAPX(1,J),APSAPA(1,J))
              PHI=180-PHI
              HRANGE=HRANGE+RANGEP(J)

!             SAVE REFRACTED RAY PATH LENGTH FOR MULTIPLE SCATTERING.
              BETA=BETA+DBETA
              IF(GETAMT)THEN
                  IF(.NOT.LJMASS .AND. NPR.LT.1 .AND. LPRINT)           &
     &              WRITE(IPR,'(I3,10F10.5,F12.5,F8.2,1P,E10.3)')       &
     &              J,ZP(J),ZP(J+1),THETA,RANGEP(J),HRANGE,DBETA,BETA,  &
     &              PHI,DBEND,BEND,PPSUM(J),TPSUM(J),RHOPSM(J)
                  KAMAX=J2+J
                  PTHCOS(J2-J)=COS(PHI/DPDEG)
                  PTHCOS(KAMAX-1)=COS(THETA/DPDEG)
              ENDIF
              IF(.NOT.LSSGEO)THEN
                  ZENLAY(J)=THETA
                  ECALAY(J)=DBETA
              ENDIF
              THETA=180-PHI
          ENDDO

!         DOUBLE PATH QUANTITIES FOR OTHER PART OF THE SYMMETRIC PATH.
          BEND=2*BEND
          BETA=2*BETA
          HRANGE=2*HRANGE
          IF(.NOT.LJMASS .AND. GETAMT .AND. NPR.LT.1 .AND. LPRINT)      &
     &      WRITE(IPR,'(2(/T10,A),T40,F9.3,T58,F9.3,T85,F9.3,/)')       &
     &      'DOUBLE RANGE, BETA, BENDING',                              &
     &      'FOR SYMMETRIC PART OF PATH',HRANGE,BETA,BEND
          JNEXT=JHA
      ENDIF

!     DO PATH FROM HA TO HB:
      IF(HA.NE.HB)THEN
          JO=KAMAX-JNEXT+1
          J1=JNEXT
          J2=JMAX-1
          IF(H1.GT.H2)THEN
              JD=J2-J1+1
              DO KA=KAMAX-1,0,-1
                  PTHCOS(KA+JD)=PTHCOS(KA)
              ENDDO
              KAMAX=KAMAX+JD
              JO=0
          ENDIF
          IF(.NOT.LJMASS .AND. GETAMT .AND. NPR.LT.1 .AND. LPRINT)THEN
              IF(LORDER)THEN
                  WRITE(IPR,'(10X,A,/)')'H1 TO H2'
              ELSE
                  WRITE(IPR,'(10X,A,/)')'H2 TO H1'
              ENDIF
          ENDIF
          DO J=J1,J2
              CALL DPSCHT(ZP(J),ZP(J+1),RFNDXP(J),RFNDXP(J+1),          &
     &          RSCLHT,GAMMA0)
              IF(LSMALL)THEN
                  SINPTH=SAVSIN
                  COSPTH=SAVCOS
                  RANGEP(J)=DPRNG2*((ZP(J+1)-ZP(J))/(ZP(J2+1)-ZP(J1)))
                  PHI=ANGLEA
                  DBETA=(2*DPDEG*SAVSIN*RANGEP(J))                      &
     &              /(ZP(J)+ZP(J+1)+2*REARTH)
              ELSEIF(ITYPE.NE.4)THEN
                  SAVCOS=COSPTH
                  CALL RFGEOM(REARTH,ZP(J),ZP(J+1),CPATH,RSCLHT,GAMMA0, &
     &              SINPTH,COSPTH,RANGEP(J),DBEND)
                  IF(SINPTH.GT. 1.D0)SINPTH= 1.D0
                  IF(SINPTH.LT.-1.D0)SINPTH=-1.D0
                  DBEND=DBEND*DPDEG
                  BEND=BEND+DBEND
                  PHI=ASIN(SINPTH)*DPDEG
                  DBETA=THETA-PHI+DBEND
              ENDIF
              IF(GETAMT)CALL SEGMNT(J,J+1,REARTH,RANGEP(J),SAVCOS,      &
     &          COSPTH,PPSUM(J),TPSUM(J),RHOPSM(J),AMTPTH(0,J),         &
     &          APSAPX(1,J),APSAPA(1,J))
              PHI=180-PHI
              HRANGE=HRANGE+RANGEP(J)
              BETA=BETA+DBETA
              IF(.NOT.LJMASS .AND. GETAMT .AND. NPR.LT.1 .AND. LPRINT)  &
     &          WRITE(IPR,'(I3,10F10.5,F12.5,F8.2,1P,E10.3)')           &
     &          J,ZP(J),ZP(J+1),THETA,RANGEP(J),HRANGE,DBETA,BETA,PHI,  &
     &          DBEND,BEND,PPSUM(J),TPSUM(J),RHOPSM(J)

!             SAVE LAYER REFRACTED PATH ANGLE FOR MULTIPLE SCATTERING.
              IF(H2.GT.H1)THEN
                  KAMAX=J+JO
                  PTHCOS(KAMAX-1)=COS(THETA/DPDEG)
              ELSE
                  PTHCOS(J2-J)=COS(PHI/DPDEG)
              ENDIF
              IF(.NOT.LSSGEO)THEN
                  ZENLAY(J)=THETA
                  ECALAY(J)=DBETA
              ENDIF
              THETA=180-PHI
          ENDDO
      ENDIF
      IF(.NOT.LSSGEO)ZENLAY(JMAX)=THETA
      IF(.NOT.LORDER)PHI=ANGLEA
      RETURN
      END
